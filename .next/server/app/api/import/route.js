"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/import/route";
exports.ids = ["app/api/import/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "module":
/*!*************************!*\
  !*** external "module" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("module");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fimport%2Froute&page=%2Fapi%2Fimport%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimport%2Froute.ts&appDir=%2FUsers%2Fsymbosrisai%2FDocuments%2Fanaconda-assesment-1%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsymbosrisai%2FDocuments%2Fanaconda-assesment-1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fimport%2Froute&page=%2Fapi%2Fimport%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimport%2Froute.ts&appDir=%2FUsers%2Fsymbosrisai%2FDocuments%2Fanaconda-assesment-1%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsymbosrisai%2FDocuments%2Fanaconda-assesment-1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_symbosrisai_Documents_anaconda_assesment_1_src_app_api_import_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/import/route.ts */ \"(rsc)/./src/app/api/import/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/import/route\",\n        pathname: \"/api/import\",\n        filename: \"route\",\n        bundlePath: \"app/api/import/route\"\n    },\n    resolvedPagePath: \"/Users/symbosrisai/Documents/anaconda-assesment-1/src/app/api/import/route.ts\",\n    nextConfigOutput,\n    userland: _Users_symbosrisai_Documents_anaconda_assesment_1_src_app_api_import_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/import/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZpbXBvcnQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmltcG9ydCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmltcG9ydCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnN5bWJvc3Jpc2FpJTJGRG9jdW1lbnRzJTJGYW5hY29uZGEtYXNzZXNtZW50LTElMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGc3ltYm9zcmlzYWklMkZEb2N1bWVudHMlMkZhbmFjb25kYS1hc3Nlc21lbnQtMSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDNkI7QUFDMUc7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmFjb25kYS1hc3Nlc21lbnQtMS8/NTBjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvc3ltYm9zcmlzYWkvRG9jdW1lbnRzL2FuYWNvbmRhLWFzc2VzbWVudC0xL3NyYy9hcHAvYXBpL2ltcG9ydC9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvaW1wb3J0L3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvaW1wb3J0XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9pbXBvcnQvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvc3ltYm9zcmlzYWkvRG9jdW1lbnRzL2FuYWNvbmRhLWFzc2VzbWVudC0xL3NyYy9hcHAvYXBpL2ltcG9ydC9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvaW1wb3J0L3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fimport%2Froute&page=%2Fapi%2Fimport%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimport%2Froute.ts&appDir=%2FUsers%2Fsymbosrisai%2FDocuments%2Fanaconda-assesment-1%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsymbosrisai%2FDocuments%2Fanaconda-assesment-1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/import/route.ts":
/*!*************************************!*\
  !*** ./src/app/api/import/route.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_ipynb_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/ipynb-converter */ \"(rsc)/./src/lib/ipynb-converter.ts\");\n/* harmony import */ var _lib_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/storage */ \"(rsc)/./src/lib/storage/index.ts\");\n/**\n * @file Next.js API Route for converting an .ipynb file to a Runt event log.\n * This endpoint handles multipart/form-data requests containing the notebook file.\n */ \n // Using alias for cleaner imports\n\nconst runtime = \"nodejs\";\n/**\n * Handles POST requests to /api/import.\n * Expects a multipart/form-data request with a single file field named 'notebook'.\n *\n * @param {Request} request The incoming HTTP request.\n * @returns A NextResponse object with the JSON event log or an error message.\n */ async function POST(request) {\n    try {\n        // 1. Get the form data from the request\n        const formData = await request.formData();\n        const file = formData.get(\"notebook\");\n        // --- Robust Error Handling for File Upload ---\n        if (!file) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"No file uploaded. Please include a file in the 'notebook' field.\"\n            }, {\n                status: 400\n            } // Bad Request\n            );\n        }\n        if (file.type !== \"application/json\" && !file.name.endsWith(\".ipynb\")) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Invalid file type. Please upload a valid .ipynb file.\"\n            }, {\n                status: 400\n            } // Bad Request\n            );\n        }\n        // 2. Read and parse the file content\n        const fileContent = await file.text();\n        let notebookJson;\n        try {\n            notebookJson = JSON.parse(fileContent);\n            // Basic validation to ensure it looks like a notebook file\n            if (!notebookJson.cells || !notebookJson.nbformat) {\n                throw new Error(\"Parsed JSON does not appear to be a valid notebook file.\");\n            }\n        } catch (parseError) {\n            console.error(\"JSON Parsing Error:\", parseError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to parse the uploaded file. Please ensure it is a valid JSON .ipynb file.\"\n            }, {\n                status: 400\n            } // Bad Request\n            );\n        }\n        // 3. Instantiate the converter and generate events\n        const converter = new _lib_ipynb_converter__WEBPACK_IMPORTED_MODULE_1__.IpynbConverter(notebookJson);\n        const events = converter.generateEvents();\n        // 4. Store via adapter\n        const adapter = (0,_lib_storage__WEBPACK_IMPORTED_MODULE_2__.getStorageAdapter)();\n        const result = await adapter.saveEvents(events, {\n            filenameBase: file.name?.replace(/\\.[^.]+$/, \"\") || \"notebook-events\"\n        });\n        // 5. Return the successful response with storage location\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            events,\n            stored: result\n        }, {\n            status: 200\n        });\n    } catch (error) {\n        // --- Catch-all for any other unexpected errors ---\n        console.error(\"An unexpected error occurred:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"An internal server error occurred during file processing.\"\n        }, {\n            status: 500\n        } // Internal Server Error\n        );\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9pbXBvcnQvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7O0NBR0MsR0FFMEM7QUFDWSxDQUFDLGtDQUFrQztBQUV4QztBQUUzQyxNQUFNRyxVQUFVLFNBQVM7QUFFaEM7Ozs7OztDQU1DLEdBQ00sZUFBZUMsS0FBS0MsT0FBZ0I7SUFDekMsSUFBSTtRQUNGLHdDQUF3QztRQUN4QyxNQUFNQyxXQUFXLE1BQU1ELFFBQVFDLFFBQVE7UUFDdkMsTUFBTUMsT0FBT0QsU0FBU0UsR0FBRyxDQUFDO1FBRTFCLGdEQUFnRDtRQUNoRCxJQUFJLENBQUNELE1BQU07WUFDVCxPQUFPUCxxREFBWUEsQ0FBQ1MsSUFBSSxDQUN0QjtnQkFBRUMsT0FBTztZQUFtRSxHQUM1RTtnQkFBRUMsUUFBUTtZQUFJLEVBQUUsY0FBYzs7UUFFbEM7UUFFQSxJQUFJSixLQUFLSyxJQUFJLEtBQUssc0JBQXNCLENBQUNMLEtBQUtNLElBQUksQ0FBQ0MsUUFBUSxDQUFDLFdBQVc7WUFDbkUsT0FBT2QscURBQVlBLENBQUNTLElBQUksQ0FDdEI7Z0JBQUVDLE9BQU87WUFBd0QsR0FDakU7Z0JBQUVDLFFBQVE7WUFBSSxFQUFFLGNBQWM7O1FBRXBDO1FBRUEscUNBQXFDO1FBQ3JDLE1BQU1JLGNBQWMsTUFBTVIsS0FBS1MsSUFBSTtRQUNuQyxJQUFJQztRQUVKLElBQUk7WUFDRkEsZUFBZUMsS0FBS0MsS0FBSyxDQUFDSjtZQUMxQiwyREFBMkQ7WUFDM0QsSUFBSSxDQUFDRSxhQUFhRyxLQUFLLElBQUksQ0FBQ0gsYUFBYUksUUFBUSxFQUFFO2dCQUNqRCxNQUFNLElBQUlDLE1BQU07WUFDbEI7UUFDRixFQUFFLE9BQU9DLFlBQVk7WUFDbkJDLFFBQVFkLEtBQUssQ0FBQyx1QkFBdUJhO1lBQ3JDLE9BQU92QixxREFBWUEsQ0FBQ1MsSUFBSSxDQUN0QjtnQkFBRUMsT0FBTztZQUFtRixHQUM1RjtnQkFBRUMsUUFBUTtZQUFJLEVBQUUsY0FBYzs7UUFFbEM7UUFFQSxtREFBbUQ7UUFDbkQsTUFBTWMsWUFBWSxJQUFJeEIsZ0VBQWNBLENBQUNnQjtRQUNyQyxNQUFNUyxTQUFTRCxVQUFVRSxjQUFjO1FBRXZDLHVCQUF1QjtRQUN2QixNQUFNQyxVQUFVMUIsK0RBQWlCQTtRQUNqQyxNQUFNMkIsU0FBUyxNQUFNRCxRQUFRRSxVQUFVLENBQUNKLFFBQVE7WUFDOUNLLGNBQWN4QixLQUFLTSxJQUFJLEVBQUVtQixRQUFRLFlBQVksT0FBTztRQUN0RDtRQUVBLDBEQUEwRDtRQUMxRCxPQUFPaEMscURBQVlBLENBQUNTLElBQUksQ0FBQztZQUFFaUI7WUFBUU8sUUFBUUo7UUFBTyxHQUFHO1lBQUVsQixRQUFRO1FBQUk7SUFFckUsRUFBRSxPQUFPRCxPQUFPO1FBQ2Qsb0RBQW9EO1FBQ3BEYyxRQUFRZCxLQUFLLENBQUMsaUNBQWlDQTtRQUMvQyxPQUFPVixxREFBWUEsQ0FBQ1MsSUFBSSxDQUN0QjtZQUFFQyxPQUFPO1FBQTRELEdBQ3JFO1lBQUVDLFFBQVE7UUFBSSxFQUFFLHdCQUF3Qjs7SUFFNUM7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2FuYWNvbmRhLWFzc2VzbWVudC0xLy4vc3JjL2FwcC9hcGkvaW1wb3J0L3JvdXRlLnRzPzNhOTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBOZXh0LmpzIEFQSSBSb3V0ZSBmb3IgY29udmVydGluZyBhbiAuaXB5bmIgZmlsZSB0byBhIFJ1bnQgZXZlbnQgbG9nLlxuICogVGhpcyBlbmRwb2ludCBoYW5kbGVzIG11bHRpcGFydC9mb3JtLWRhdGEgcmVxdWVzdHMgY29udGFpbmluZyB0aGUgbm90ZWJvb2sgZmlsZS5cbiAqL1xuXG5pbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBJcHluYkNvbnZlcnRlciB9IGZyb20gJ0AvbGliL2lweW5iLWNvbnZlcnRlcic7IC8vIFVzaW5nIGFsaWFzIGZvciBjbGVhbmVyIGltcG9ydHNcbmltcG9ydCB7IElOb3RlYm9vayB9IGZyb20gJ0AvdHlwZXMvbm90ZWJvb2stdHlwZXMnO1xuaW1wb3J0IHsgZ2V0U3RvcmFnZUFkYXB0ZXIgfSBmcm9tICdAL2xpYi9zdG9yYWdlJztcblxuZXhwb3J0IGNvbnN0IHJ1bnRpbWUgPSAnbm9kZWpzJztcblxuLyoqXG4gKiBIYW5kbGVzIFBPU1QgcmVxdWVzdHMgdG8gL2FwaS9pbXBvcnQuXG4gKiBFeHBlY3RzIGEgbXVsdGlwYXJ0L2Zvcm0tZGF0YSByZXF1ZXN0IHdpdGggYSBzaW5nbGUgZmlsZSBmaWVsZCBuYW1lZCAnbm90ZWJvb2snLlxuICpcbiAqIEBwYXJhbSB7UmVxdWVzdH0gcmVxdWVzdCBUaGUgaW5jb21pbmcgSFRUUCByZXF1ZXN0LlxuICogQHJldHVybnMgQSBOZXh0UmVzcG9uc2Ugb2JqZWN0IHdpdGggdGhlIEpTT04gZXZlbnQgbG9nIG9yIGFuIGVycm9yIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICAvLyAxLiBHZXQgdGhlIGZvcm0gZGF0YSBmcm9tIHRoZSByZXF1ZXN0XG4gICAgY29uc3QgZm9ybURhdGEgPSBhd2FpdCByZXF1ZXN0LmZvcm1EYXRhKCk7XG4gICAgY29uc3QgZmlsZSA9IGZvcm1EYXRhLmdldCgnbm90ZWJvb2snKSBhcyBGaWxlIHwgbnVsbDtcblxuICAgIC8vIC0tLSBSb2J1c3QgRXJyb3IgSGFuZGxpbmcgZm9yIEZpbGUgVXBsb2FkIC0tLVxuICAgIGlmICghZmlsZSkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiBcIk5vIGZpbGUgdXBsb2FkZWQuIFBsZWFzZSBpbmNsdWRlIGEgZmlsZSBpbiB0aGUgJ25vdGVib29rJyBmaWVsZC5cIiB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH0gLy8gQmFkIFJlcXVlc3RcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZpbGUudHlwZSAhPT0gJ2FwcGxpY2F0aW9uL2pzb24nICYmICFmaWxlLm5hbWUuZW5kc1dpdGgoJy5pcHluYicpKSB7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgICB7IGVycm9yOiBcIkludmFsaWQgZmlsZSB0eXBlLiBQbGVhc2UgdXBsb2FkIGEgdmFsaWQgLmlweW5iIGZpbGUuXCIgfSxcbiAgICAgICAgICB7IHN0YXR1czogNDAwIH0gLy8gQmFkIFJlcXVlc3RcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyAyLiBSZWFkIGFuZCBwYXJzZSB0aGUgZmlsZSBjb250ZW50XG4gICAgY29uc3QgZmlsZUNvbnRlbnQgPSBhd2FpdCBmaWxlLnRleHQoKTtcbiAgICBsZXQgbm90ZWJvb2tKc29uOiBJTm90ZWJvb2s7XG5cbiAgICB0cnkge1xuICAgICAgbm90ZWJvb2tKc29uID0gSlNPTi5wYXJzZShmaWxlQ29udGVudCk7XG4gICAgICAvLyBCYXNpYyB2YWxpZGF0aW9uIHRvIGVuc3VyZSBpdCBsb29rcyBsaWtlIGEgbm90ZWJvb2sgZmlsZVxuICAgICAgaWYgKCFub3RlYm9va0pzb24uY2VsbHMgfHwgIW5vdGVib29rSnNvbi5uYmZvcm1hdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZWQgSlNPTiBkb2VzIG5vdCBhcHBlYXIgdG8gYmUgYSB2YWxpZCBub3RlYm9vayBmaWxlLlwiKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiSlNPTiBQYXJzaW5nIEVycm9yOlwiLCBwYXJzZUVycm9yKTtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ0ZhaWxlZCB0byBwYXJzZSB0aGUgdXBsb2FkZWQgZmlsZS4gUGxlYXNlIGVuc3VyZSBpdCBpcyBhIHZhbGlkIEpTT04gLmlweW5iIGZpbGUuJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH0gLy8gQmFkIFJlcXVlc3RcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gMy4gSW5zdGFudGlhdGUgdGhlIGNvbnZlcnRlciBhbmQgZ2VuZXJhdGUgZXZlbnRzXG4gICAgY29uc3QgY29udmVydGVyID0gbmV3IElweW5iQ29udmVydGVyKG5vdGVib29rSnNvbik7XG4gICAgY29uc3QgZXZlbnRzID0gY29udmVydGVyLmdlbmVyYXRlRXZlbnRzKCk7XG5cbiAgICAvLyA0LiBTdG9yZSB2aWEgYWRhcHRlclxuICAgIGNvbnN0IGFkYXB0ZXIgPSBnZXRTdG9yYWdlQWRhcHRlcigpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFkYXB0ZXIuc2F2ZUV2ZW50cyhldmVudHMsIHtcbiAgICAgIGZpbGVuYW1lQmFzZTogZmlsZS5uYW1lPy5yZXBsYWNlKC9cXC5bXi5dKyQvLCAnJykgfHwgJ25vdGVib29rLWV2ZW50cycsXG4gICAgfSk7XG5cbiAgICAvLyA1LiBSZXR1cm4gdGhlIHN1Y2Nlc3NmdWwgcmVzcG9uc2Ugd2l0aCBzdG9yYWdlIGxvY2F0aW9uXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXZlbnRzLCBzdG9yZWQ6IHJlc3VsdCB9LCB7IHN0YXR1czogMjAwIH0pO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gLS0tIENhdGNoLWFsbCBmb3IgYW55IG90aGVyIHVuZXhwZWN0ZWQgZXJyb3JzIC0tLVxuICAgIGNvbnNvbGUuZXJyb3IoJ0FuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQ6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdBbiBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3Igb2NjdXJyZWQgZHVyaW5nIGZpbGUgcHJvY2Vzc2luZy4nIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH0gLy8gSW50ZXJuYWwgU2VydmVyIEVycm9yXG4gICAgKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsIklweW5iQ29udmVydGVyIiwiZ2V0U3RvcmFnZUFkYXB0ZXIiLCJydW50aW1lIiwiUE9TVCIsInJlcXVlc3QiLCJmb3JtRGF0YSIsImZpbGUiLCJnZXQiLCJqc29uIiwiZXJyb3IiLCJzdGF0dXMiLCJ0eXBlIiwibmFtZSIsImVuZHNXaXRoIiwiZmlsZUNvbnRlbnQiLCJ0ZXh0Iiwibm90ZWJvb2tKc29uIiwiSlNPTiIsInBhcnNlIiwiY2VsbHMiLCJuYmZvcm1hdCIsIkVycm9yIiwicGFyc2VFcnJvciIsImNvbnNvbGUiLCJjb252ZXJ0ZXIiLCJldmVudHMiLCJnZW5lcmF0ZUV2ZW50cyIsImFkYXB0ZXIiLCJyZXN1bHQiLCJzYXZlRXZlbnRzIiwiZmlsZW5hbWVCYXNlIiwicmVwbGFjZSIsInN0b3JlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/import/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/event-generators.ts":
/*!*************************************!*\
  !*** ./src/lib/event-generators.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createActorProfileSetEvent: () => (/* binding */ createActorProfileSetEvent),\n/* harmony export */   createCellCreatedEvent: () => (/* binding */ createCellCreatedEvent),\n/* harmony export */   createCellOutputEvents: () => (/* binding */ createCellOutputEvents),\n/* harmony export */   createCellSourceChangedEvent: () => (/* binding */ createCellSourceChangedEvent),\n/* harmony export */   createNotebookMetadataEvents: () => (/* binding */ createNotebookMetadataEvents)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"(rsc)/./src/node_modules/uuid/dist/esm/v4.js\");\n/* harmony import */ var _schema_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../schema/mod */ \"(rsc)/./src/schema/mod.ts\");\n/**\n * @file This module is responsible for generating specific event payloads\n * based on the Runt event schema. It acts as a bridge between the raw\n * .ipynb format and the structured event log, encapsulating all direct\n * interactions with the schema definitions.\n */ \n\nfunction createActorProfileSetEvent(actorId, displayName) {\n    return _schema_mod__WEBPACK_IMPORTED_MODULE_0__.events.actorProfileSet({\n        id: actorId,\n        type: \"human\",\n        displayName: displayName\n    });\n}\nfunction createNotebookMetadataEvents(metadata) {\n    const metadataEvents = [];\n    const title = `Imported Notebook - ${new Date().toLocaleDateString()}`;\n    metadataEvents.push(_schema_mod__WEBPACK_IMPORTED_MODULE_0__.events.notebookTitleChanged({\n        title\n    }));\n    if (metadata.kernelspec?.display_name) {\n        metadataEvents.push(_schema_mod__WEBPACK_IMPORTED_MODULE_0__.events.notebookMetadataSet({\n            key: \"kernelspec_display_name\",\n            value: metadata.kernelspec.display_name\n        }));\n    }\n    if (metadata.kernelspec?.language) {\n        metadataEvents.push(_schema_mod__WEBPACK_IMPORTED_MODULE_0__.events.notebookMetadataSet({\n            key: \"language\",\n            value: metadata.kernelspec.language\n        }));\n    }\n    return metadataEvents;\n}\nfunction createCellCreatedEvent(cell, createdBy, cellBefore, allCells) {\n    const cellType = cell.cell_type === \"code\" ? \"code\" : \"markdown\";\n    const cellData = {\n        id: `cell-${(0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])()}`,\n        cellType: cellType,\n        createdBy: createdBy\n    };\n    return (0,_schema_mod__WEBPACK_IMPORTED_MODULE_0__.createCellBetween)(cellData, cellBefore, null, allCells);\n}\nfunction createCellSourceChangedEvent(cellId, source, modifiedBy) {\n    const fullSource = Array.isArray(source) ? source.join(\"\") : source;\n    return _schema_mod__WEBPACK_IMPORTED_MODULE_0__.events.cellSourceChanged({\n        id: cellId,\n        source: fullSource,\n        modifiedBy: modifiedBy\n    });\n}\nfunction createCellOutputEvents(cellId, outputs, clearedBy) {\n    if (!outputs || outputs.length === 0) {\n        return [];\n    }\n    const outputEvents = [];\n    outputEvents.push(_schema_mod__WEBPACK_IMPORTED_MODULE_0__.events.cellOutputsCleared({\n        cellId: cellId,\n        wait: false,\n        clearedBy: clearedBy\n    }));\n    outputs.forEach((output, index)=>{\n        const outputId = `output-${(0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])()}`;\n        switch(output.output_type){\n            case \"stream\":\n                outputEvents.push(_schema_mod__WEBPACK_IMPORTED_MODULE_0__.events.terminalOutputAdded({\n                    id: outputId,\n                    cellId: cellId,\n                    position: index,\n                    streamName: output.name,\n                    content: {\n                        type: \"inline\",\n                        data: Array.isArray(output.text) ? output.text.join(\"\") : output.text\n                    }\n                }));\n                break;\n            case \"execute_result\":\n            case \"display_data\":\n                const representations = Object.entries(output.data).reduce((acc, [mimeType, data])=>{\n                    acc[mimeType] = {\n                        type: \"inline\",\n                        data\n                    };\n                    return acc;\n                }, {});\n                if (output.output_type === \"execute_result\") {\n                    outputEvents.push(_schema_mod__WEBPACK_IMPORTED_MODULE_0__.events.multimediaResultOutputAdded({\n                        id: outputId,\n                        cellId: cellId,\n                        position: index,\n                        representations: representations,\n                        executionCount: output.execution_count ?? 0\n                    }));\n                } else {\n                    outputEvents.push(_schema_mod__WEBPACK_IMPORTED_MODULE_0__.events.multimediaDisplayOutputAdded({\n                        id: outputId,\n                        cellId: cellId,\n                        position: index,\n                        representations: representations\n                    }));\n                }\n                break;\n            case \"error\":\n                outputEvents.push(_schema_mod__WEBPACK_IMPORTED_MODULE_0__.events.errorOutputAdded({\n                    id: outputId,\n                    cellId: cellId,\n                    position: index,\n                    content: {\n                        type: \"inline\",\n                        data: {\n                            ename: output.ename,\n                            evalue: output.evalue,\n                            traceback: output.traceback\n                        }\n                    }\n                }));\n                break;\n        }\n    });\n    return outputEvents;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/event-generators.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/ipynb-converter.ts":
/*!************************************!*\
  !*** ./src/lib/ipynb-converter.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IpynbConverter: () => (/* binding */ IpynbConverter)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"(rsc)/./src/node_modules/uuid/dist/esm/v4.js\");\n/* harmony import */ var _event_generators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-generators */ \"(rsc)/./src/lib/event-generators.ts\");\n/**\n * @file This module contains the main IpynbConverter class, which orchestrates\n * the entire process of converting a parsed .ipynb file into a Runt event log.\n */ \n\n/**\n * Orchestrates the conversion of a Jupyter Notebook JSON object into a\n * structured event log.\n */ class IpynbConverter {\n    /**\n   * Initializes the converter with the notebook data.\n   * @param notebook The parsed JSON content of an .ipynb file.\n   */ constructor(notebook){\n        this.events = [];\n        this.cellReferences = [];\n        this.notebook = notebook;\n        // Each import session is performed by a new, unique actor.\n        this.actorId = `user-${(0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])()}`;\n    }\n    /**\n   * Generates the complete, ordered list of events from the notebook.\n   * This is the main entry point for the conversion process.\n   * @returns An array of NotebookEvent objects.\n   */ generateEvents() {\n        this._generateInitialEvents();\n        this._generateCellEvents();\n        return this.events;\n    }\n    /**\n   * Creates the initial events that set up the actor profile and notebook metadata.\n   */ _generateInitialEvents() {\n        // 1. Create an actor profile for the user performing the import.\n        const actorEvent = (0,_event_generators__WEBPACK_IMPORTED_MODULE_0__.createActorProfileSetEvent)(this.actorId, \"Notebook Importer\");\n        this.events.push(actorEvent);\n        // 2. Create events for the notebook's metadata (e.g., title, language).\n        const metadataEvents = (0,_event_generators__WEBPACK_IMPORTED_MODULE_0__.createNotebookMetadataEvents)(this.notebook.metadata);\n        this.events.push(...metadataEvents);\n    }\n    /**\n   * Iterates through each cell in the notebook and generates the corresponding\n   * creation, source, and output events in the correct sequence.\n   */ _generateCellEvents() {\n        // This variable will hold the reference to the previously processed cell,\n        // which is crucial for the fractional indexing logic.\n        let cellBefore = null;\n        for (const cell of this.notebook.cells){\n            // 1. Generate the 'CellCreated' event. This helper function returns\n            // not just the event but also the newly created cell's ID.\n            const creationResult = (0,_event_generators__WEBPACK_IMPORTED_MODULE_0__.createCellCreatedEvent)(cell, this.actorId, cellBefore, this.cellReferences);\n            this.events.push(...creationResult.events);\n            const newCellId = creationResult.newCellId;\n            // 2. Generate the 'CellSourceChanged' event to populate the cell's content.\n            const sourceEvent = (0,_event_generators__WEBPACK_IMPORTED_MODULE_0__.createCellSourceChangedEvent)(newCellId, cell.source, this.actorId);\n            this.events.push(sourceEvent);\n            // 3. If it's a code cell, generate its output events.\n            if (cell.cell_type === \"code\") {\n                const codeCell = cell;\n                const outputEvents = (0,_event_generators__WEBPACK_IMPORTED_MODULE_0__.createCellOutputEvents)(newCellId, codeCell.outputs, this.actorId);\n                this.events.push(...outputEvents);\n            }\n            // 4. Update our references for the next iteration.\n            // We find the newly created cell's event to get its fractionalIndex.\n            const createdEvent = creationResult.events.find((e)=>e.name === \"v2.CellCreated\");\n            const newCellRef = {\n                id: newCellId,\n                // The cellType here must match the one used in the event schema.\n                cellType: cell.cell_type === \"code\" ? \"code\" : \"markdown\",\n                fractionalIndex: createdEvent?.args?.fractionalIndex || null\n            };\n            this.cellReferences.push(newCellRef);\n            cellBefore = newCellRef; // Set `cellBefore` for the next loop iteration.\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/ipynb-converter.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/storage/index.ts":
/*!**********************************!*\
  !*** ./src/lib/storage/index.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getStorageAdapter: () => (/* binding */ getStorageAdapter)\n/* harmony export */ });\n/* harmony import */ var _json_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./json-adapter */ \"(rsc)/./src/lib/storage/json-adapter.ts\");\n/* harmony import */ var _s3_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./s3-adapter */ \"(rsc)/./src/lib/storage/s3-adapter.ts\");\n\n\nfunction getStorageAdapter() {\n    const backend = process.env.STORAGE_BACKEND || \"json\";\n    if (backend === \"s3\") {\n        return new _s3_adapter__WEBPACK_IMPORTED_MODULE_1__.S3StorageAdapter();\n    }\n    const baseDir = process.env.JSON_STORAGE_DIR;\n    return new _json_adapter__WEBPACK_IMPORTED_MODULE_0__.JsonFileStorageAdapter(baseDir);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3N0b3JhZ2UvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXdEO0FBQ1I7QUFLekMsU0FBU0U7SUFDZCxNQUFNQyxVQUFVQyxRQUFRQyxHQUFHLENBQUNDLGVBQWUsSUFBSTtJQUMvQyxJQUFJSCxZQUFZLE1BQU07UUFDcEIsT0FBTyxJQUFJRix5REFBZ0JBO0lBQzdCO0lBQ0EsTUFBTU0sVUFBVUgsUUFBUUMsR0FBRyxDQUFDRyxnQkFBZ0I7SUFDNUMsT0FBTyxJQUFJUixpRUFBc0JBLENBQUNPO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hY29uZGEtYXNzZXNtZW50LTEvLi9zcmMvbGliL3N0b3JhZ2UvaW5kZXgudHM/OGU0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKc29uRmlsZVN0b3JhZ2VBZGFwdGVyIH0gZnJvbSAnLi9qc29uLWFkYXB0ZXInO1xuaW1wb3J0IHsgUzNTdG9yYWdlQWRhcHRlciB9IGZyb20gJy4vczMtYWRhcHRlcic7XG5pbXBvcnQgdHlwZSB7IFN0b3JhZ2VBZGFwdGVyIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIHsgU3RvcmFnZUFkYXB0ZXIgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0b3JhZ2VBZGFwdGVyKCk6IFN0b3JhZ2VBZGFwdGVyIHtcbiAgY29uc3QgYmFja2VuZCA9IHByb2Nlc3MuZW52LlNUT1JBR0VfQkFDS0VORCB8fCAnanNvbic7XG4gIGlmIChiYWNrZW5kID09PSAnczMnKSB7XG4gICAgcmV0dXJuIG5ldyBTM1N0b3JhZ2VBZGFwdGVyKCk7XG4gIH1cbiAgY29uc3QgYmFzZURpciA9IHByb2Nlc3MuZW52LkpTT05fU1RPUkFHRV9ESVI7XG4gIHJldHVybiBuZXcgSnNvbkZpbGVTdG9yYWdlQWRhcHRlcihiYXNlRGlyKTtcbn1cblxuXG5cblxuXG4iXSwibmFtZXMiOlsiSnNvbkZpbGVTdG9yYWdlQWRhcHRlciIsIlMzU3RvcmFnZUFkYXB0ZXIiLCJnZXRTdG9yYWdlQWRhcHRlciIsImJhY2tlbmQiLCJwcm9jZXNzIiwiZW52IiwiU1RPUkFHRV9CQUNLRU5EIiwiYmFzZURpciIsIkpTT05fU1RPUkFHRV9ESVIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/storage/index.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/storage/json-adapter.ts":
/*!*****************************************!*\
  !*** ./src/lib/storage/json-adapter.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonFileStorageAdapter: () => (/* binding */ JsonFileStorageAdapter)\n/* harmony export */ });\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(rsc)/./src/node_modules/uuid/dist/esm/v4.js\");\n\n\n\nclass JsonFileStorageAdapter {\n    constructor(baseDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"storage\")){\n        this.baseDir = baseDir;\n    }\n    async saveEvents(events, options) {\n        const filenameBase = options?.filenameBase || `events-${(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])()}`;\n        const filename = `${filenameBase}.json`;\n        const dir = this.baseDir;\n        const fullPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(dir, filename);\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().mkdir(dir, {\n            recursive: true\n        });\n        await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().writeFile(fullPath, JSON.stringify(events, null, 2), \"utf-8\");\n        return {\n            uri: `file://${fullPath}`,\n            backend: \"json\",\n            key: filename\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3N0b3JhZ2UvanNvbi1hZGFwdGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUE2QjtBQUNMO0FBQ1k7QUFHN0IsTUFBTUk7SUFHWEMsWUFBWUMsVUFBa0JMLGdEQUFTLENBQUNPLFFBQVFDLEdBQUcsSUFBSSxVQUFVLENBQUU7UUFDakUsSUFBSSxDQUFDSCxPQUFPLEdBQUdBO0lBQ2pCO0lBRUEsTUFBTUksV0FBV0MsTUFBaUIsRUFBRUMsT0FBMkIsRUFBMEI7UUFDdkYsTUFBTUMsZUFBZUQsU0FBU0MsZ0JBQWdCLENBQUMsT0FBTyxFQUFFVixnREFBTUEsR0FBRyxDQUFDO1FBQ2xFLE1BQU1XLFdBQVcsQ0FBQyxFQUFFRCxhQUFhLEtBQUssQ0FBQztRQUN2QyxNQUFNRSxNQUFNLElBQUksQ0FBQ1QsT0FBTztRQUN4QixNQUFNVSxXQUFXZixnREFBUyxDQUFDYyxLQUFLRDtRQUVoQyxNQUFNZCx3REFBUSxDQUFDZSxLQUFLO1lBQUVHLFdBQVc7UUFBSztRQUN0QyxNQUFNbEIsNERBQVksQ0FBQ2dCLFVBQVVJLEtBQUtDLFNBQVMsQ0FBQ1YsUUFBUSxNQUFNLElBQUk7UUFFOUQsT0FBTztZQUNMVyxLQUFLLENBQUMsT0FBTyxFQUFFTixTQUFTLENBQUM7WUFDekJPLFNBQVM7WUFDVEMsS0FBS1Y7UUFDUDtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmFjb25kYS1hc3Nlc21lbnQtMS8uL3NyYy9saWIvc3RvcmFnZS9qc29uLWFkYXB0ZXIudHM/NjkxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCB7IFN0b3JhZ2VBZGFwdGVyLCBTdG9yYWdlUmVzdWx0LCBTYXZlRXZlbnRzT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgSnNvbkZpbGVTdG9yYWdlQWRhcHRlciBpbXBsZW1lbnRzIFN0b3JhZ2VBZGFwdGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBiYXNlRGlyOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoYmFzZURpcjogc3RyaW5nID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdzdG9yYWdlJykpIHtcbiAgICB0aGlzLmJhc2VEaXIgPSBiYXNlRGlyO1xuICB9XG5cbiAgYXN5bmMgc2F2ZUV2ZW50cyhldmVudHM6IHVua25vd25bXSwgb3B0aW9ucz86IFNhdmVFdmVudHNPcHRpb25zKTogUHJvbWlzZTxTdG9yYWdlUmVzdWx0PiB7XG4gICAgY29uc3QgZmlsZW5hbWVCYXNlID0gb3B0aW9ucz8uZmlsZW5hbWVCYXNlIHx8IGBldmVudHMtJHt1dWlkdjQoKX1gO1xuICAgIGNvbnN0IGZpbGVuYW1lID0gYCR7ZmlsZW5hbWVCYXNlfS5qc29uYDtcbiAgICBjb25zdCBkaXIgPSB0aGlzLmJhc2VEaXI7XG4gICAgY29uc3QgZnVsbFBhdGggPSBwYXRoLmpvaW4oZGlyLCBmaWxlbmFtZSk7XG5cbiAgICBhd2FpdCBmcy5ta2RpcihkaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZShmdWxsUGF0aCwgSlNPTi5zdHJpbmdpZnkoZXZlbnRzLCBudWxsLCAyKSwgJ3V0Zi04Jyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdXJpOiBgZmlsZTovLyR7ZnVsbFBhdGh9YCxcbiAgICAgIGJhY2tlbmQ6ICdqc29uJyxcbiAgICAgIGtleTogZmlsZW5hbWUsXG4gICAgfTtcbiAgfVxufVxuXG5cblxuXG5cbiJdLCJuYW1lcyI6WyJmcyIsInBhdGgiLCJ2NCIsInV1aWR2NCIsIkpzb25GaWxlU3RvcmFnZUFkYXB0ZXIiLCJjb25zdHJ1Y3RvciIsImJhc2VEaXIiLCJqb2luIiwicHJvY2VzcyIsImN3ZCIsInNhdmVFdmVudHMiLCJldmVudHMiLCJvcHRpb25zIiwiZmlsZW5hbWVCYXNlIiwiZmlsZW5hbWUiLCJkaXIiLCJmdWxsUGF0aCIsIm1rZGlyIiwicmVjdXJzaXZlIiwid3JpdGVGaWxlIiwiSlNPTiIsInN0cmluZ2lmeSIsInVyaSIsImJhY2tlbmQiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/storage/json-adapter.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/storage/s3-adapter.ts":
/*!***************************************!*\
  !*** ./src/lib/storage/s3-adapter.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S3StorageAdapter: () => (/* binding */ S3StorageAdapter)\n/* harmony export */ });\n// Scaffold for future S3 support using @aws-sdk/client-s3\nclass S3StorageAdapter {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async saveEvents(_events, _options) {\n        throw new Error(\"S3 adapter not configured. Set STORAGE_BACKEND=s3 and provide AWS credentials.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3N0b3JhZ2UvczMtYWRhcHRlci50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMERBQTBEO0FBR25ELE1BQU1BO0lBQ1gsNkRBQTZEO0lBQzdELE1BQU1DLFdBQVdDLE9BQWtCLEVBQUVDLFFBQTRCLEVBQTBCO1FBQ3pGLE1BQU0sSUFBSUMsTUFBTTtJQUNsQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hY29uZGEtYXNzZXNtZW50LTEvLi9zcmMvbGliL3N0b3JhZ2UvczMtYWRhcHRlci50cz9jNmQyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNjYWZmb2xkIGZvciBmdXR1cmUgUzMgc3VwcG9ydCB1c2luZyBAYXdzLXNkay9jbGllbnQtczNcbmltcG9ydCB7IFN0b3JhZ2VBZGFwdGVyLCBTdG9yYWdlUmVzdWx0LCBTYXZlRXZlbnRzT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgUzNTdG9yYWdlQWRhcHRlciBpbXBsZW1lbnRzIFN0b3JhZ2VBZGFwdGVyIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICBhc3luYyBzYXZlRXZlbnRzKF9ldmVudHM6IHVua25vd25bXSwgX29wdGlvbnM/OiBTYXZlRXZlbnRzT3B0aW9ucyk6IFByb21pc2U8U3RvcmFnZVJlc3VsdD4ge1xuICAgIHRocm93IG5ldyBFcnJvcignUzMgYWRhcHRlciBub3QgY29uZmlndXJlZC4gU2V0IFNUT1JBR0VfQkFDS0VORD1zMyBhbmQgcHJvdmlkZSBBV1MgY3JlZGVudGlhbHMuJyk7XG4gIH1cbn1cblxuXG5cblxuXG4iXSwibmFtZXMiOlsiUzNTdG9yYWdlQWRhcHRlciIsInNhdmVFdmVudHMiLCJfZXZlbnRzIiwiX29wdGlvbnMiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/storage/s3-adapter.ts\n");

/***/ }),

/***/ "(rsc)/./src/schema/mod.ts":
/*!***************************!*\
  !*** ./src/schema/mod.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AI_TOOL_CALL_MIME_TYPE: () => (/* binding */ AI_TOOL_CALL_MIME_TYPE),\n/* harmony export */   AI_TOOL_MIME_TYPES: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.AI_TOOL_MIME_TYPES),\n/* harmony export */   AI_TOOL_RESULT_MIME_TYPE: () => (/* binding */ AI_TOOL_RESULT_MIME_TYPE),\n/* harmony export */   APPLICATION_MIME_TYPES: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.APPLICATION_MIME_TYPES),\n/* harmony export */   ActorTypeSchema: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.ActorTypeSchema),\n/* harmony export */   CellTypeSchema: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.CellTypeSchema),\n/* harmony export */   ExecutionStateSchema: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.ExecutionStateSchema),\n/* harmony export */   IMAGE_MIME_TYPES: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.IMAGE_MIME_TYPES),\n/* harmony export */   JUPYTER_MIME_TYPES: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.JUPYTER_MIME_TYPES),\n/* harmony export */   KNOWN_MIME_TYPES: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.KNOWN_MIME_TYPES),\n/* harmony export */   MediaRepresentationSchema: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.MediaRepresentationSchema),\n/* harmony export */   OutputTypeSchema: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.OutputTypeSchema),\n/* harmony export */   QueueStatusSchema: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.QueueStatusSchema),\n/* harmony export */   RuntimeStatusSchema: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.RuntimeStatusSchema),\n/* harmony export */   TEXT_MIME_TYPES: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.TEXT_MIME_TYPES),\n/* harmony export */   adjacentCells: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.adjacentCells),\n/* harmony export */   applyDeltas: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.applyDeltas),\n/* harmony export */   cellFractionalIndex: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.cellFractionalIndex),\n/* harmony export */   cellIDs$: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.cellIDs$),\n/* harmony export */   cellList$: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.cellList$),\n/* harmony export */   cellOrdering$: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.cellOrdering$),\n/* harmony export */   cellPositionInfo: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.cellPositionInfo),\n/* harmony export */   cellQuery: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.cellQuery),\n/* harmony export */   cellReferences$: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.cellReferences$),\n/* harmony export */   cells$: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.cells$),\n/* harmony export */   cellsAfter: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.cellsAfter),\n/* harmony export */   cellsBefore: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.cellsBefore),\n/* harmony export */   cellsInRange: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.cellsInRange),\n/* harmony export */   cellsWithIndices$: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.cellsWithIndices$),\n/* harmony export */   createCellBetween: () => (/* binding */ createCellBetween),\n/* harmony export */   createCellBetweenAndCommit: () => (/* binding */ createCellBetweenAndCommit),\n/* harmony export */   createTestJitterProvider: () => (/* binding */ createTestJitterProvider),\n/* harmony export */   defaultJitterProvider: () => (/* binding */ defaultJitterProvider),\n/* harmony export */   events: () => (/* binding */ events),\n/* harmony export */   firstCell$: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.firstCell$),\n/* harmony export */   fractionalIndexBetween: () => (/* binding */ fractionalIndexBetween),\n/* harmony export */   fractionalIndexBetweenWithFallback: () => (/* binding */ fractionalIndexBetweenWithFallback),\n/* harmony export */   generateFractionalIndices: () => (/* binding */ generateFractionalIndices),\n/* harmony export */   getAdjacentCells: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.getAdjacentCells),\n/* harmony export */   getFinalContent: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.getFinalContent),\n/* harmony export */   getNotebookInfo: () => (/* binding */ getNotebookInfo),\n/* harmony export */   getNotebookMetadata: () => (/* binding */ getNotebookMetadata),\n/* harmony export */   initialFractionalIndex: () => (/* binding */ initialFractionalIndex),\n/* harmony export */   isAiToolCallData: () => (/* binding */ isAiToolCallData),\n/* harmony export */   isAiToolMimeType: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.isAiToolMimeType),\n/* harmony export */   isAiToolResultData: () => (/* binding */ isAiToolResultData),\n/* harmony export */   isApplicationMimeType: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.isApplicationMimeType),\n/* harmony export */   isArtifactContainer: () => (/* binding */ isArtifactContainer),\n/* harmony export */   isErrorOutput: () => (/* binding */ isErrorOutput),\n/* harmony export */   isImageMimeType: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.isImageMimeType),\n/* harmony export */   isInlineContainer: () => (/* binding */ isInlineContainer),\n/* harmony export */   isJsonMimeType: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.isJsonMimeType),\n/* harmony export */   isJupyterMimeType: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.isJupyterMimeType),\n/* harmony export */   isKnownMimeType: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.isKnownMimeType),\n/* harmony export */   isRichOutput: () => (/* binding */ isRichOutput),\n/* harmony export */   isTextBasedMimeType: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.isTextBasedMimeType),\n/* harmony export */   isTextMimeType: () => (/* reexport safe */ _types_ts__WEBPACK_IMPORTED_MODULE_0__.isTextMimeType),\n/* harmony export */   isValidFractionalIndex: () => (/* binding */ isValidFractionalIndex),\n/* harmony export */   lastCell$: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.lastCell$),\n/* harmony export */   materializers: () => (/* binding */ materializers),\n/* harmony export */   moveCellBetween: () => (/* binding */ moveCellBetween),\n/* harmony export */   moveCellBetweenAndCommit: () => (/* binding */ moveCellBetweenAndCommit),\n/* harmony export */   moveCellBetweenWithRebalancing: () => (/* binding */ moveCellBetweenWithRebalancing),\n/* harmony export */   moveCellWithRebalancing: () => (/* binding */ moveCellWithRebalancing),\n/* harmony export */   needsRebalancing: () => (/* binding */ needsRebalancing),\n/* harmony export */   neighboringCells: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.neighboringCells),\n/* harmony export */   notebookMetadata$: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.notebookMetadata$),\n/* harmony export */   outputDeltas$: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.outputDeltas$),\n/* harmony export */   outputDeltasQuery: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.outputDeltasQuery),\n/* harmony export */   rebalanceCellIndices: () => (/* binding */ rebalanceCellIndices),\n/* harmony export */   runtimeSessions$: () => (/* reexport safe */ _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__.runtimeSessions$),\n/* harmony export */   tables: () => (/* reexport safe */ _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables),\n/* harmony export */   validateFractionalIndexOrder: () => (/* binding */ validateFractionalIndexOrder)\n/* harmony export */ });\n/* harmony import */ var _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @livestore/livestore */ \"(rsc)/./src/node_modules/@livestore/common/dist/schema/EventDef.js\");\n/* harmony import */ var _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @livestore/livestore */ \"(rsc)/./src/node_modules/effect/dist/esm/Schema.js\");\n/* harmony import */ var _types_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.ts */ \"(rsc)/./src/schema/types.ts\");\n/* harmony import */ var _tables_ts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables.ts */ \"(rsc)/./src/schema/tables.ts\");\n/* harmony import */ var _queries_index_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./queries/index.ts */ \"(rsc)/./src/schema/queries/index.ts\");\n\n\n\n\n\n\n/**\n * CLIENT AUTHENTICATION PATTERNS\n *\n * The LiveStore sync backend validates client connections using authToken and clientId.\n * Different client types use different authentication patterns:\n *\n * SERVICE CLIENTS (runtime: true):\n * - Runtime agents: clientId = runtimeId (e.g. \"python-runtime-123\")\n * - Notebook runners: clientId = \"automation-client\" (headless execution)\n * - TUI clients: clientId = \"tui-client\" (terminal interface)\n * - Service clients use RUNT_API_KEY for user authentication (AUTH_TOKEN as service fallback)\n * - ClientId must be non-numeric to prevent user impersonation\n *\n * USER CLIENTS (runtime: false/undefined):\n * - Regular users: clientId = authenticated user ID\n * - Anonymous users: clientId = \"anonymous-user\"\n * - User clients use OIDC tokens for authentication\n * - ClientId must match authenticated user ID\n *\n * PRESENCE DISPLAY:\n * - Runtime agents: Bot icon with runtimeType label\n * - Notebook runners: Play icon (headless execution you can monitor)\n * - TUI clients: Terminal icon (terminal interface)\n * - Regular users: User avatar/initials\n */ // Events describe notebook and cell changes\n// All events are scoped to a single notebook (storeId = notebookId)\nconst events = {\n    debug1: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.Debug\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String\n        })\n    }),\n    // Notebook events (single notebook per store)\n    /** @deprecated  */ notebookInitialized: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.NotebookInitialized\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            title: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            ownerId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String\n        })\n    }),\n    notebookTitleChanged: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.NotebookTitleChanged\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            title: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String\n        })\n    }),\n    notebookMetadataSet: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.NotebookMetadataSet\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            key: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            value: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String\n        })\n    }),\n    // Cell events\n    cellCreated: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.CellCreated\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            cellType: _types_ts__WEBPACK_IMPORTED_MODULE_0__.CellTypeSchema,\n            position: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Number,\n            createdBy: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            actorId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String)\n        })\n    }),\n    /**\n  v2 cell created with fractional indexing\n   {\n     id: CellId,\n     fractionalIndex: string, // Fractional index (e.g., \"a0\", \"a5\", \"b0\")\n     cellType: CellType,\n   }\n\n   Note: fractionalIndex column has been added to cells table.\n   Future migration steps:\n   1. Migrate existing cells to use fractional indices based on position\n   2. Update all queries to use ORDER BY fractionalIndex instead of position\n   3. Eventually deprecate position column from cells table\n   4. Update v1.CellCreated to calculate fractional index\n   */ cellCreated2: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v2.CellCreated\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            fractionalIndex: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String.annotations({\n                description: \"Jittered fractional index for deterministic ordering\"\n            }),\n            cellType: _types_ts__WEBPACK_IMPORTED_MODULE_0__.CellTypeSchema,\n            createdBy: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String\n        })\n    }),\n    cellSourceChanged: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.CellSourceChanged\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            source: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            modifiedBy: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String\n        })\n    }),\n    cellTypeChanged: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.CellTypeChanged\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            cellType: _types_ts__WEBPACK_IMPORTED_MODULE_0__.CellTypeSchema,\n            actorId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String)\n        })\n    }),\n    cellDeleted: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.CellDeleted\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            actorId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String)\n        })\n    }),\n    cellMoved: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.CellMoved\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            newPosition: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Number,\n            actorId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String)\n        })\n    }),\n    cellMoved2: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v2.CellMoved\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            fractionalIndex: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String.annotations({\n                description: \"New fractional index position for the cell\"\n            }),\n            actorId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String)\n        })\n    }),\n    cellSourceVisibilityToggled: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.CellSourceVisibilityToggled\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            sourceVisible: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Boolean,\n            actorId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String)\n        })\n    }),\n    cellOutputVisibilityToggled: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.CellOutputVisibilityToggled\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            outputVisible: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Boolean,\n            actorId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String)\n        })\n    }),\n    cellAiContextVisibilityToggled: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.CellAiContextVisibilityToggled\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            aiContextVisible: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Boolean,\n            actorId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String)\n        })\n    }),\n    // Runtime lifecycle events\n    runtimeSessionStarted: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.RuntimeSessionStarted\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            sessionId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            runtimeId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            runtimeType: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            capabilities: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n                canExecuteCode: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Boolean,\n                canExecuteSql: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Boolean,\n                canExecuteAi: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Boolean,\n                availableAiModels: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Any)\n            })\n        })\n    }),\n    presenceSet: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.PresenceSet\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            userId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String)\n        })\n    }),\n    runtimeSessionStatusChanged: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.RuntimeSessionStatusChanged\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            sessionId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            status: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Literal(\"ready\", \"busy\", \"restarting\")\n        })\n    }),\n    runtimeSessionTerminated: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.RuntimeSessionTerminated\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            sessionId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            reason: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Literal(\"shutdown\", \"restart\", \"error\", \"timeout\", \"displaced\")\n        })\n    }),\n    // Execution queue events\n    executionRequested: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.ExecutionRequested\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            queueId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            executionCount: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Number,\n            requestedBy: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            actorId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String)\n        })\n    }),\n    executionAssigned: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.ExecutionAssigned\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            queueId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            runtimeSessionId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String\n        })\n    }),\n    executionStarted: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.ExecutionStarted\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            queueId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            runtimeSessionId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            startedAt: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Date\n        })\n    }),\n    executionCompleted: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.ExecutionCompleted\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            queueId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            status: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Literal(\"success\", \"error\", \"cancelled\"),\n            error: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String),\n            completedAt: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Date,\n            executionDurationMs: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Number\n        })\n    }),\n    executionCancelled: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.ExecutionCancelled\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            queueId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            cancelledBy: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            actorId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String),\n            reason: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String\n        })\n    }),\n    // Unified output system - granular events replacing cellOutputAdded\n    multimediaDisplayOutputAdded: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.MultimediaDisplayOutputAdded\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            position: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Number,\n            representations: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Record({\n                key: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n                value: _types_ts__WEBPACK_IMPORTED_MODULE_0__.MediaRepresentationSchema\n            }),\n            displayId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String)\n        })\n    }),\n    multimediaDisplayOutputUpdated: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.MultimediaDisplayOutputUpdated\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            displayId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            representations: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Record({\n                key: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n                value: _types_ts__WEBPACK_IMPORTED_MODULE_0__.MediaRepresentationSchema\n            })\n        })\n    }),\n    multimediaResultOutputAdded: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.MultimediaResultOutputAdded\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            position: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Number,\n            representations: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Record({\n                key: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n                value: _types_ts__WEBPACK_IMPORTED_MODULE_0__.MediaRepresentationSchema\n            }),\n            executionCount: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Number\n        })\n    }),\n    terminalOutputAdded: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.TerminalOutputAdded\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            position: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Number,\n            content: _types_ts__WEBPACK_IMPORTED_MODULE_0__.MediaRepresentationSchema,\n            streamName: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Literal(\"stdout\", \"stderr\")\n        })\n    }),\n    /** @deprecated  */ terminalOutputAppended: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.TerminalOutputAppended\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            outputId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            content: _types_ts__WEBPACK_IMPORTED_MODULE_0__.MediaRepresentationSchema\n        })\n    }),\n    terminalOutputAppended2: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v2.TerminalOutputAppended\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            outputId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            delta: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            sequenceNumber: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Number\n        })\n    }),\n    markdownOutputAdded: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.MarkdownOutputAdded\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            position: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Number,\n            content: _types_ts__WEBPACK_IMPORTED_MODULE_0__.MediaRepresentationSchema\n        })\n    }),\n    /** @deprecated  */ markdownOutputAppended: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.MarkdownOutputAppended\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            outputId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            content: _types_ts__WEBPACK_IMPORTED_MODULE_0__.MediaRepresentationSchema\n        })\n    }),\n    markdownOutputAppended2: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v2.MarkdownOutputAppended\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            outputId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            delta: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            sequenceNumber: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Number\n        })\n    }),\n    errorOutputAdded: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.ErrorOutputAdded\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            position: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Number,\n            content: _types_ts__WEBPACK_IMPORTED_MODULE_0__.MediaRepresentationSchema\n        })\n    }),\n    cellOutputsCleared: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.CellOutputsCleared\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            wait: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Boolean,\n            clearedBy: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String\n        })\n    }),\n    // AI events\n    aiSettingsChanged: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.AiSettingsChanged\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            provider: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            model: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            settings: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n                temperature: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Number),\n                maxTokens: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Number),\n                systemPrompt: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String)\n            })\n        })\n    }),\n    // SQL events\n    sqlConnectionChanged: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.SqlConnectionChanged\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            connectionId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String),\n            changedBy: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String\n        })\n    }),\n    sqlResultVariableChanged: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.SqlResultVariableChanged\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            resultVariable: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String),\n            changedBy: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String\n        })\n    }),\n    // UI state\n    uiStateSet: _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.uiState.set,\n    actorProfileSet: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.ActorProfileSet\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            type: _types_ts__WEBPACK_IMPORTED_MODULE_0__.ActorTypeSchema,\n            displayName: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            avatar: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String)\n        })\n    }),\n    // Tool approval events\n    toolApprovalRequested: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.ToolApprovalRequested\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            toolCallId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            toolName: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            arguments: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Record({\n                key: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n                value: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Any\n            }),\n            requestedAt: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Date\n        })\n    }),\n    toolApprovalResponded: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.synced({\n        name: \"v1.ToolApprovalResponded\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            toolCallId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            status: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Literal(\"approved_once\", \"approved_always\", \"denied\"),\n            approvedBy: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.String,\n            respondedAt: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.Date\n        })\n    })\n};\n// Helper function to select primary representation from multimedia data\nfunction selectPrimaryRepresentation(representations, preferredMimeTypes = [\n    // JSON-based formats first (highest priority for rich data)\n    \"application/vnd.plotly.v1+json\",\n    \"application/vnd.vegalite.v6+json\",\n    \"application/vnd.vegalite.v5+json\",\n    \"application/vnd.vegalite.v4+json\",\n    \"application/vnd.vegalite.v3+json\",\n    \"application/vnd.vegalite.v2+json\",\n    \"application/vnd.vega.v5+json\",\n    \"application/vnd.vega.v4+json\",\n    \"application/vnd.vega.v3+json\",\n    \"application/vnd.jupyter.widget-view+json\",\n    \"application/vnd.jupyter.widget-state+json\",\n    \"application/vnd.dataresource+json\",\n    \"application/vdom.v1+json\",\n    \"application/geo+json\",\n    \"application/json\",\n    // Interactive content\n    \"application/javascript\",\n    // Rich display formats\n    \"text/html\",\n    \"image/svg+xml\",\n    // Binary images\n    \"image/png\",\n    \"image/jpeg\",\n    \"image/gif\",\n    // Text formats\n    \"text/latex\",\n    \"text/markdown\",\n    \"text/plain\"\n]) {\n    for (const mimeType of preferredMimeTypes){\n        if (representations[mimeType]) {\n            return {\n                mimeType,\n                container: representations[mimeType]\n            };\n        }\n    }\n    return null;\n}\n// Helper function to update existing displays with same displayId\nfunction updateExistingDisplays(displayId, representations, // deno-lint-ignore no-explicit-any\nctx) {\n    const existingOutputs = ctx.query(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.select().where({\n        displayId,\n        outputType: \"multimedia_display\"\n    }));\n    if (existingOutputs.length === 0) {\n        return [];\n    }\n    const primaryRep = selectPrimaryRepresentation(representations);\n    if (!primaryRep) {\n        return [];\n    }\n    const { mimeType, container } = primaryRep;\n    const data = container.type === \"inline\" ? String(container.data || \"\") : \"\";\n    return [\n        _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.update({\n            data,\n            mimeType,\n            representations\n        }).where({\n            displayId,\n            outputType: \"multimedia_display\"\n        })\n    ];\n}\n// Shared helper function for updating presence\nfunction updatePresence(userId, cellId) {\n    return _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.presence.insert({\n        userId,\n        cellId: cellId || null\n    }).onConflict(\"userId\", \"replace\");\n}\n// Materializers map events to state changes\nconst materializers = _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.materializers(events, {\n    \"v1.Debug\": (event, ctx)=>{\n        const existingDebug = ctx.query(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.debug.select().where({\n            id: event.id\n        }).limit(1))[0];\n        if (existingDebug) {\n            return [];\n        }\n        return [\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.debug.insert({\n                id: event.id\n            }).onConflict(\"id\", \"replace\")\n        ];\n    },\n    // Notebook materializers\n    /** @deprecated */ \"v1.NotebookInitialized\": ({ id, title, ownerId })=>[\n            // Legacy event - convert to metadata format\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.notebookMetadata.insert({\n                key: \"title\",\n                value: title\n            }).onConflict(\"key\", \"replace\"),\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.notebookMetadata.insert({\n                key: \"ownerId\",\n                value: ownerId\n            }).onConflict(\"key\", \"replace\"),\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.debug.insert({\n                id\n            }).onConflict(\"id\", \"replace\")\n        ],\n    \"v1.NotebookTitleChanged\": ({ title })=>_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.notebookMetadata.insert({\n            key: \"title\",\n            value: title\n        }).onConflict(\"key\", \"replace\"),\n    \"v1.NotebookMetadataSet\": ({ key, value })=>_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.notebookMetadata.insert({\n            key,\n            value\n        }).onConflict(\"key\", \"replace\"),\n    // Cell materializers\n    \"v1.CellCreated\": ({ id, cellType, position, createdBy, actorId })=>[\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.insert({\n                id,\n                cellType,\n                // Convert position to deterministic fractional index in base36 format\n                // Position 0 -> \"a0\", Position 1 -> \"a1\", etc.\n                fractionalIndex: \"a\" + Math.floor(position).toString(36),\n                createdBy\n            }).onConflict(\"id\", \"ignore\"),\n            // Update presence table\n            updatePresence(actorId || createdBy, id)\n        ],\n    \"v2.CellCreated\": ({ id, fractionalIndex, cellType, createdBy })=>{\n        // With fractional indexing, we don't need ctx.query!\n        // The order is already calculated client-side\n        const ops = [];\n        ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.insert({\n            id,\n            cellType,\n            fractionalIndex,\n            createdBy\n        }).onConflict(\"id\", \"ignore\"));\n        // Update presence for the creator\n        ops.push(updatePresence(createdBy, id));\n        return ops;\n    },\n    \"v1.CellSourceChanged\": ({ id, source, modifiedBy })=>[\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.update({\n                source\n            }).where({\n                id\n            }),\n            // Update presence based on cell source modification\n            updatePresence(modifiedBy, id)\n        ],\n    \"v1.CellTypeChanged\": ({ id, cellType, actorId })=>{\n        const ops = [];\n        ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.update({\n            cellType\n        }).where({\n            id\n        }));\n        if (actorId) {\n            ops.push(updatePresence(actorId, id));\n        }\n        return ops;\n    },\n    \"v1.CellDeleted\": ({ id, actorId })=>{\n        const ops = [];\n        ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.delete().where({\n            id\n        }));\n        if (actorId) {\n            ops.push(updatePresence(actorId, id));\n        }\n        return ops;\n    },\n    \"v1.CellMoved\": ({ id, newPosition, actorId })=>{\n        const ops = [];\n        // Convert position to deterministic fractional index in base36 format\n        ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.update({\n            fractionalIndex: \"a\" + Math.floor(newPosition).toString(36)\n        }).where({\n            id\n        }));\n        if (actorId) {\n            ops.push(updatePresence(actorId, id));\n        }\n        return ops;\n    },\n    \"v2.CellMoved\": ({ id, fractionalIndex, actorId })=>{\n        const ops = [];\n        ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.update({\n            fractionalIndex\n        }).where({\n            id\n        }));\n        if (actorId) {\n            ops.push(updatePresence(actorId, id));\n        }\n        return ops;\n    },\n    \"v1.CellSourceVisibilityToggled\": ({ id, sourceVisible, actorId })=>{\n        const ops = [];\n        ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.update({\n            sourceVisible\n        }).where({\n            id\n        }));\n        if (actorId) {\n            ops.push(updatePresence(actorId, id));\n        }\n        return ops;\n    },\n    \"v1.CellOutputVisibilityToggled\": ({ id, outputVisible, actorId })=>{\n        const ops = [];\n        ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.update({\n            outputVisible\n        }).where({\n            id\n        }));\n        if (actorId) {\n            ops.push(updatePresence(actorId, id));\n        }\n        return ops;\n    },\n    \"v1.CellAiContextVisibilityToggled\": ({ id, aiContextVisible, actorId })=>{\n        const ops = [];\n        ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.update({\n            aiContextVisible\n        }).where({\n            id\n        }));\n        if (actorId) {\n            ops.push(updatePresence(actorId, id));\n        }\n        return ops;\n    },\n    \"v1.PresenceSet\": ({ userId, cellId })=>updatePresence(userId, cellId),\n    // Runtime lifecycle materializers\n    \"v1.RuntimeSessionStarted\": ({ sessionId, runtimeId, runtimeType, capabilities })=>_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.runtimeSessions.insert({\n            sessionId,\n            runtimeId,\n            runtimeType,\n            status: \"starting\",\n            canExecuteCode: capabilities.canExecuteCode,\n            canExecuteSql: capabilities.canExecuteSql,\n            canExecuteAi: capabilities.canExecuteAi,\n            availableAiModels: capabilities.availableAiModels || null\n        }).onConflict(\"sessionId\", \"replace\"),\n    \"v1.RuntimeSessionStatusChanged\": ({ sessionId, status })=>_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.runtimeSessions.update({\n            status\n        }).where({\n            sessionId\n        }),\n    \"v1.RuntimeSessionTerminated\": ({ sessionId })=>_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.runtimeSessions.update({\n            status: \"terminated\",\n            isActive: false\n        }).where({\n            sessionId\n        }),\n    // Execution queue materializers\n    \"v1.ExecutionRequested\": ({ queueId, cellId, executionCount, requestedBy, actorId })=>[\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.executionQueue.insert({\n                id: queueId,\n                cellId,\n                executionCount,\n                requestedBy,\n                status: \"pending\"\n            }).onConflict(\"id\", \"ignore\"),\n            // Update cell execution state\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.update({\n                executionState: \"queued\",\n                executionCount\n            }).where({\n                id: cellId\n            }),\n            // Update presence table\n            updatePresence(actorId || requestedBy, cellId)\n        ],\n    \"v1.ExecutionAssigned\": ({ queueId, runtimeSessionId })=>_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.executionQueue.update({\n            status: \"assigned\",\n            assignedRuntimeSession: runtimeSessionId\n        }).where({\n            id: queueId\n        }),\n    \"v1.ExecutionStarted\": ({ queueId, cellId, runtimeSessionId, startedAt })=>[\n            // Update execution queue\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.executionQueue.update({\n                status: \"executing\",\n                startedAt: startedAt\n            }).where({\n                id: queueId\n            }),\n            // Update cell execution state\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.update({\n                executionState: \"running\",\n                assignedRuntimeSession: runtimeSessionId\n            }).where({\n                id: cellId\n            })\n        ],\n    \"v1.ExecutionCompleted\": ({ queueId, cellId, status, completedAt, executionDurationMs })=>[\n            // Update execution queue\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.executionQueue.update({\n                status: status === \"success\" ? \"completed\" : \"failed\",\n                completedAt: completedAt,\n                executionDurationMs: executionDurationMs\n            }).where({\n                id: queueId\n            }),\n            // Update cell execution state\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.update({\n                executionState: status === \"success\" ? \"completed\" : \"error\",\n                lastExecutionDurationMs: executionDurationMs\n            }).where({\n                id: cellId\n            })\n        ],\n    \"v1.ExecutionCancelled\": ({ queueId, cellId, cancelledBy, actorId })=>[\n            // Update execution queue\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.executionQueue.update({\n                status: \"cancelled\"\n            }).where({\n                id: queueId\n            }),\n            // Update cell execution state\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.update({\n                executionState: \"idle\"\n            }).where({\n                id: cellId\n            }),\n            // Update presence table\n            updatePresence(actorId || cancelledBy, cellId)\n        ],\n    // Unified output system materializers with pending clear support\n    \"v1.MultimediaDisplayOutputAdded\": ({ id, cellId, position, representations, displayId }, ctx)=>{\n        const ops = [];\n        // Check for pending clears\n        const pendingClear = ctx.query(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.pendingClears.select().where({\n            cellId\n        }).limit(1))[0];\n        if (pendingClear) {\n            ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.delete().where({\n                cellId\n            }));\n            ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.pendingClears.delete().where({\n                cellId\n            }));\n        }\n        // If displayId provided, update all existing displays with same ID first\n        if (displayId) {\n            ops.push(...updateExistingDisplays(displayId, representations, ctx));\n        }\n        // Always create new output (core behavior of \"Added\" event)\n        const primaryRep = selectPrimaryRepresentation(representations);\n        const primaryData = primaryRep ? primaryRep.container.type === \"inline\" ? String(primaryRep.container.data || \"\") : \"\" : \"\";\n        const primaryMimeType = primaryRep ? primaryRep.mimeType : \"text/plain\";\n        ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.insert({\n            id,\n            cellId,\n            outputType: \"multimedia_display\",\n            position,\n            displayId: displayId || null,\n            data: primaryData,\n            artifactId: null,\n            mimeType: primaryMimeType,\n            metadata: null,\n            representations\n        }).onConflict(\"id\", \"replace\"));\n        return ops;\n    },\n    \"v1.MultimediaDisplayOutputUpdated\": ({ displayId, representations }, ctx)=>{\n        // Only update existing displays - no new output creation\n        return updateExistingDisplays(displayId, representations, ctx);\n    },\n    \"v1.MultimediaResultOutputAdded\": ({ id, cellId, position, representations, executionCount }, ctx)=>{\n        const ops = [];\n        // Check for pending clears\n        const pendingClear = ctx.query(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.pendingClears.select().where({\n            cellId\n        }).limit(1))[0];\n        if (pendingClear) {\n            ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.delete().where({\n                cellId\n            }));\n            ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.pendingClears.delete().where({\n                cellId\n            }));\n        }\n        // Choose primary representation\n        const preferenceOrder = [\n            \"text/html\",\n            \"image/png\",\n            \"image/jpeg\",\n            \"image/svg+xml\",\n            \"application/json\",\n            \"text/plain\"\n        ];\n        let primaryData = \"\";\n        let primaryMimeType = \"text/plain\";\n        for (const mimeType of preferenceOrder){\n            if (representations[mimeType]) {\n                const rep = representations[mimeType];\n                primaryData = rep.type === \"inline\" ? String(rep.data || \"\") : \"\";\n                primaryMimeType = mimeType;\n                break;\n            }\n        }\n        ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.insert({\n            id,\n            cellId,\n            outputType: \"multimedia_result\",\n            position,\n            executionCount,\n            data: primaryData,\n            artifactId: null,\n            mimeType: primaryMimeType,\n            metadata: null,\n            representations\n        }).onConflict(\"id\", \"replace\"));\n        return ops;\n    },\n    \"v1.TerminalOutputAdded\": ({ id, cellId, position, content, streamName }, ctx)=>{\n        const ops = [];\n        // Check for pending clears\n        const pendingClear = ctx.query(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.pendingClears.select().where({\n            cellId\n        }).limit(1))[0];\n        if (pendingClear) {\n            ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.delete().where({\n                cellId\n            }));\n            ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.pendingClears.delete().where({\n                cellId\n            }));\n        }\n        ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.insert({\n            id,\n            cellId,\n            outputType: \"terminal\",\n            position,\n            streamName,\n            data: content.type === \"inline\" ? String(content.data) : null,\n            artifactId: content.type === \"artifact\" ? content.artifactId : null,\n            mimeType: \"text/plain\",\n            metadata: content.metadata || null,\n            representations: null\n        }).onConflict(\"id\", \"replace\"));\n        return ops;\n    },\n    \"v1.TerminalOutputAppended\": ({ outputId, content }, ctx)=>{\n        const existingOutput = ctx.query(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.select().where({\n            id: outputId\n        }).limit(1))[0];\n        if (!existingOutput) {\n            return [];\n        }\n        const newContent = content.type === \"inline\" ? String(content.data) : \"\";\n        const concatenatedData = (existingOutput.data || \"\") + newContent;\n        return [\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.update({\n                data: concatenatedData\n            }).where({\n                id: outputId\n            })\n        ];\n    },\n    \"v2.TerminalOutputAppended\": ({ outputId, delta, id, sequenceNumber })=>{\n        return _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputDeltas.insert({\n            id,\n            outputId,\n            delta,\n            sequenceNumber\n        });\n    },\n    \"v1.MarkdownOutputAdded\": ({ id, cellId, position, content }, ctx)=>{\n        const ops = [];\n        // Check for pending clears\n        const pendingClear = ctx.query(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.pendingClears.select().where({\n            cellId\n        }).limit(1))[0];\n        if (pendingClear) {\n            ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.delete().where({\n                cellId\n            }));\n            ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.pendingClears.delete().where({\n                cellId\n            }));\n        }\n        ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.insert({\n            id,\n            cellId,\n            outputType: \"markdown\",\n            position,\n            data: content.type === \"inline\" ? String(content.data) : null,\n            artifactId: content.type === \"artifact\" ? content.artifactId : null,\n            mimeType: \"text/markdown\",\n            metadata: content.metadata || null,\n            representations: null\n        }).onConflict(\"id\", \"replace\"));\n        return ops;\n    },\n    /**@deprecated */ \"v1.MarkdownOutputAppended\": ({ outputId, content }, ctx)=>{\n        const existingOutput = ctx.query(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.select().where({\n            id: outputId\n        }).limit(1))[0];\n        if (!existingOutput) {\n            return [];\n        }\n        const newContent = content.type === \"inline\" ? String(content.data) : \"\";\n        const concatenatedData = (existingOutput.data || \"\") + newContent;\n        return [\n            _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.update({\n                data: concatenatedData\n            }).where({\n                id: outputId\n            })\n        ];\n    },\n    \"v2.MarkdownOutputAppended\": ({ id, outputId, delta, sequenceNumber })=>{\n        return _tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputDeltas.insert({\n            id,\n            outputId,\n            delta,\n            sequenceNumber\n        });\n    },\n    \"v1.ErrorOutputAdded\": ({ id, cellId, position, content }, ctx)=>{\n        const ops = [];\n        // Check for pending clears\n        const pendingClear = ctx.query(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.pendingClears.select().where({\n            cellId\n        }).limit(1))[0];\n        if (pendingClear) {\n            ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.delete().where({\n                cellId\n            }));\n            ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.pendingClears.delete().where({\n                cellId\n            }));\n        }\n        ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.insert({\n            id,\n            cellId,\n            outputType: \"error\",\n            position,\n            data: content.type === \"inline\" ? JSON.stringify(content.data) : null,\n            artifactId: content.type === \"artifact\" ? content.artifactId : null,\n            mimeType: \"application/json\",\n            metadata: content.metadata || null,\n            representations: null\n        }).onConflict(\"id\", \"replace\"));\n        return ops;\n    },\n    \"v1.CellOutputsCleared\": ({ cellId, wait, clearedBy })=>{\n        const ops = [];\n        if (wait) {\n            // Store pending clear for wait=True\n            ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.pendingClears.insert({\n                cellId,\n                clearedBy\n            }).onConflict(\"cellId\", \"replace\"));\n        } else {\n            // Immediate clear for wait=False\n            ops.push(_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.outputs.delete().where({\n                cellId\n            }));\n        }\n        // Add presence update if user is provided\n        if (clearedBy) {\n            ops.push(updatePresence(clearedBy, cellId));\n        }\n        return ops;\n    },\n    // AI materializers\n    \"v1.AiSettingsChanged\": ({ cellId, provider, model, settings })=>_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.update({\n            aiProvider: provider,\n            aiModel: model,\n            aiSettings: settings\n        }).where({\n            id: cellId\n        }),\n    // SQL materializers\n    \"v1.SqlConnectionChanged\": ({ cellId, connectionId })=>_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.update({\n            sqlConnectionId: connectionId ?? null\n        }).where({\n            id: cellId\n        }),\n    \"v1.SqlResultVariableChanged\": ({ cellId, resultVariable })=>_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.cells.update({\n            sqlResultVariable: resultVariable ?? null\n        }).where({\n            id: cellId\n        }),\n    \"v1.ActorProfileSet\": ({ id, type, displayName, avatar })=>_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.actors.insert({\n            id,\n            type,\n            displayName,\n            avatar: avatar ?? null\n        }).onConflict(\"id\", \"replace\"),\n    // Tool approval materializers\n    \"v1.ToolApprovalRequested\": ({ toolCallId, cellId, toolName, arguments: _args, requestedAt })=>_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.toolApprovals.insert({\n            toolCallId,\n            cellId,\n            toolName,\n            status: \"pending\",\n            approvedBy: null,\n            requestedAt,\n            respondedAt: null\n        }).onConflict(\"toolCallId\", \"replace\"),\n    \"v1.ToolApprovalResponded\": ({ toolCallId, status, approvedBy, respondedAt })=>_tables_ts__WEBPACK_IMPORTED_MODULE_1__.tables.toolApprovals.update({\n            status,\n            approvedBy,\n            respondedAt\n        }).where({\n            toolCallId\n        })\n});\n// Type guards for MediaContainer\nfunction isInlineContainer(container) {\n    return container.type === \"inline\";\n}\nfunction isArtifactContainer(container) {\n    return container.type === \"artifact\";\n}\n// Helper function to get notebook metadata with defaults\nfunction getNotebookMetadata(metadataRecords, key, defaultValue = \"\") {\n    const record = metadataRecords.find((r)=>r.key === key);\n    return record?.value ?? defaultValue;\n}\n// Helper to get common notebook metadata values\nfunction getNotebookInfo(metadataRecords) {\n    return {\n        title: getNotebookMetadata(metadataRecords, \"title\", \"Untitled\"),\n        ownerId: getNotebookMetadata(metadataRecords, \"ownerId\", \"anonymous\"),\n        runtimeType: getNotebookMetadata(metadataRecords, \"runtimeType\", \"python3\"),\n        isPublic: getNotebookMetadata(metadataRecords, \"isPublic\", \"false\") === \"true\"\n    };\n}\n// Type guards for output data\nfunction isErrorOutput(data) {\n    return typeof data === \"object\" && data !== null && \"ename\" in data && \"evalue\" in data && typeof data.ename === \"string\" && typeof data.evalue === \"string\";\n}\nfunction isRichOutput(data) {\n    return typeof data === \"object\" && data !== null && !isErrorOutput(data);\n}\n/**\n * Type guard to check if data is an AI tool call\n */ function isAiToolCallData(data) {\n    return typeof data === \"object\" && data !== null && \"tool_call_id\" in data && \"tool_name\" in data && \"arguments\" in data && typeof data.tool_call_id === \"string\" && typeof data.tool_name === \"string\" && typeof data.arguments === \"object\";\n}\n/**\n * Type guard to check if data is an AI tool result\n */ function isAiToolResultData(data) {\n    return typeof data === \"object\" && data !== null && \"tool_call_id\" in data && \"status\" in data && typeof data.tool_call_id === \"string\" && typeof data.status === \"string\" && [\n        \"success\",\n        \"error\"\n    ].includes(data.status);\n}\n/**\n * AI tool call MIME type constant\n */ const AI_TOOL_CALL_MIME_TYPE = \"application/vnd.anode.aitool+json\";\n/**\n * AI tool result MIME type constant\n */ const AI_TOOL_RESULT_MIME_TYPE = \"application/vnd.anode.aitool.result+json\";\n// Export fractional indexing utilities with optional jittering\n/**\n * Binary-collation-safe fractional indexing implementation.\n * Uses only characters 0-9 and a-z which sort correctly in binary/ASCII collation.\n * This avoids the uppercase/lowercase sorting issues with the fractional-indexing library.\n */ const BASE36_DIGITS = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nconst BASE = BASE36_DIGITS.length;\nfunction charToValue(char) {\n    const index = BASE36_DIGITS.indexOf(char);\n    if (index === -1) {\n        throw new Error(`Invalid character: ${char}`);\n    }\n    return index;\n}\nfunction valueToChar(value) {\n    if (value < 0 || value >= BASE) {\n        throw new Error(`Value out of range: ${value}`);\n    }\n    return BASE36_DIGITS[value];\n}\nfunction generateKeyBetween(a, b) {\n    // Handle null/undefined cases\n    if (!a && !b) return \"m\"; // Middle of the range\n    if (!a) return generateKeyBefore(b);\n    if (!b) return generateKeyAfter(a);\n    // Ensure a < b\n    if (a >= b) {\n        throw new Error(`Invalid range: ${a} >= ${b}`);\n    }\n    // Find the first position where they differ\n    let i = 0;\n    while(i < a.length && i < b.length && a[i] === b[i]){\n        i++;\n    }\n    // If a is a prefix of b, we need special handling\n    if (i === a.length) {\n        const nextChar = b[i];\n        if (!nextChar) {\n            throw new Error(`Invalid index ${i} for string ${b}`);\n        }\n        const nextVal = charToValue(nextChar);\n        // If b continues with a character > 0, we can insert a midpoint\n        if (nextVal > 0) {\n            // We can fit something between a and b\n            // For example, between \"a\" and \"a5\", we can use \"a2\"\n            const midVal = Math.floor(nextVal / 2);\n            if (midVal > 0) {\n                return a + valueToChar(midVal);\n            } else {\n                // nextVal is 1, so midVal is 0\n                // Return a + \"0\" which is between a and a + \"1\"\n                return a + \"0\";\n            }\n        } else {\n            // nextVal is 0, meaning b continues with \"0\" after a ends\n            // Check if we can insert something between them\n            if (b.length > i + 1) {\n                // b continues past the initial \"0\"\n                // Count consecutive zeros after position i in b\n                let zeroCount = 0;\n                let j = i;\n                while(j < b.length && b[j] === \"0\"){\n                    zeroCount++;\n                    j++;\n                }\n                // If b is all zeros after the prefix, we can insert a string with fewer zeros\n                // For example: between \"m\" and \"m000\", we can use \"m0\" or \"m00\"\n                if (j === b.length && zeroCount > 1) {\n                    // Use half the zeros (at least 1)\n                    return a + \"0\".repeat(Math.floor(zeroCount / 2));\n                } else if (j < b.length) {\n                    // b has a non-zero character at position j\n                    // We can insert something before that position\n                    const prefix = a + \"0\".repeat(j - i);\n                    const nextChar = b[j];\n                    if (!nextChar) {\n                        throw new Error(`Invalid index ${j} for string ${b}`);\n                    }\n                    const nextVal = charToValue(nextChar);\n                    if (nextVal > 0) {\n                        return prefix + valueToChar(Math.floor(nextVal / 2));\n                    }\n                }\n            }\n            // No space between a and b\n            throw new Error(`No string exists between \"${a}\" and \"${b}\" in base36 encoding`);\n        }\n    }\n    // If b is a prefix of a (shouldn't happen if a < b, but let's be safe)\n    if (i === b.length) {\n        throw new Error(`Invalid case: b \"${b}\" is a prefix of a \"${a}\"`);\n    }\n    // Get the values at position i\n    const aChar = a[i];\n    const bChar = b[i];\n    if (!aChar || !bChar) {\n        throw new Error(`Invalid index ${i} for strings ${a} and ${b}`);\n    }\n    const aVal = charToValue(aChar);\n    const bVal = charToValue(bChar);\n    // If there's room between them, use the midpoint\n    if (bVal - aVal > 1) {\n        const midVal = Math.floor((aVal + bVal) / 2);\n        return a.substring(0, i) + valueToChar(midVal) + a.substring(i + 1);\n    }\n    // Characters are adjacent (diff is 1)\n    // We need to extend the string to find a position\n    // If a has more characters after position i, we can increment within a's range\n    if (i < a.length - 1) {\n        // Try to find space after a[i] but within a's remaining range\n        const prefix = a.substring(0, i + 1);\n        const remaining = a.substring(i + 1);\n        // Find a position between remaining and the next possible string\n        const suffix = generateKeyAfter(remaining);\n        return prefix + suffix;\n    }\n    // a[i] and b[i] are adjacent, and a has no more characters\n    // We need to extend a with something that keeps us less than b\n    // Since b[i] = aVal + 1, we extend a with a midpoint character\n    return a.substring(0, i + 1) + \"h\";\n}\nfunction generateKeyBefore(b) {\n    if (!b || b.length === 0) {\n        return \"m\"; // Middle of range if no upper bound\n    }\n    // Find the first non-zero character\n    let i = 0;\n    while(i < b.length && b[i] === \"0\"){\n        i++;\n    }\n    if (i === b.length) {\n        // All zeros, prepend another zero\n        return \"0\" + b;\n    }\n    // Found a non-zero character\n    const char = b[i];\n    if (!char) {\n        throw new Error(`Invalid index ${i} for string ${b}`);\n    }\n    const val = charToValue(char);\n    if (i === 0 && val > 1) {\n        // Can simply use a smaller first character\n        return valueToChar(Math.floor(val / 2));\n    }\n    // Need to preserve prefix and adjust\n    const prefix = b.substring(0, i);\n    if (val > 1) {\n        return prefix + valueToChar(Math.floor(val / 2));\n    }\n    // val is 1, so we use prefix + \"0\" + midpoint\n    return prefix + \"0h\";\n}\nfunction generateKeyAfter(a) {\n    if (!a || a.length === 0) {\n        return \"m\"; // Middle of range if no lower bound\n    }\n    // Find the last character that isn't 'z'\n    let i = a.length - 1;\n    while(i >= 0 && a[i] === \"z\"){\n        i--;\n    }\n    if (i === -1) {\n        // All 'z's, need to extend\n        return a + \"h\"; // Append midpoint\n    }\n    // Can increment the character at position i\n    const prefix = a.substring(0, i);\n    const char = a[i];\n    if (!char) {\n        throw new Error(`Invalid index ${i} for string ${a}`);\n    }\n    const val = charToValue(char);\n    if (val < BASE - 2) {\n        // Simple increment\n        return prefix + valueToChar(val + 1);\n    }\n    // val is 'y', incrementing gives 'z'\n    // To avoid getting too close to the boundary, extend instead\n    return a + \"h\";\n}\n// Default jitter provider using Math.random\nconst defaultJitterProvider = {\n    random: ()=>Math.random(),\n    randomInt: (max)=>Math.floor(Math.random() * max)\n};\n// Deterministic jitter provider for testing\nconst createTestJitterProvider = (seed = 0)=>{\n    let currentSeed = seed;\n    // Simple linear congruential generator\n    const nextRandom = ()=>{\n        currentSeed = currentSeed * 1103515245 + 12345 & 0x7fffffff;\n        return currentSeed / 0x7fffffff;\n    };\n    return {\n        random: nextRandom,\n        randomInt: (max)=>Math.floor(nextRandom() * max)\n    };\n};\nfunction fractionalIndexBetween(a, b, jitterProvider = defaultJitterProvider) {\n    // Add some jitter to avoid clustering\n    const key = generateKeyBetween(a, b);\n    // For better distribution, sometimes extend the key\n    // But we must ensure the result stays within bounds\n    if (jitterProvider.random() < 0.3 && key.length < 10) {\n        const suffix = valueToChar(jitterProvider.randomInt(BASE));\n        const candidate = key + suffix;\n        // Verify the candidate maintains ordering\n        const isValid = (!a || candidate > a) && (!b || candidate < b);\n        if (isValid) {\n            return candidate;\n        }\n    }\n    return key;\n}\nfunction generateFractionalIndices(a, b, n, jitterProvider = defaultJitterProvider) {\n    if (n <= 0) return [];\n    if (n === 1) return [\n        fractionalIndexBetween(a, b, jitterProvider)\n    ];\n    const keys = [];\n    // Generate n keys by repeatedly subdividing the range\n    let prev = a;\n    for(let i = 0; i < n; i++){\n        // For better distribution, we generate keys sequentially\n        // This avoids clustering that can happen with binary subdivision\n        const key = fractionalIndexBetween(prev, b, jitterProvider);\n        keys.push(key);\n        prev = key;\n    }\n    return keys;\n}\n// Helper to get initial fractional index\nfunction initialFractionalIndex(jitterProvider = defaultJitterProvider) {\n    return fractionalIndexBetween(null, null, jitterProvider);\n}\n/**\n * Determines if a range of cells needs rebalancing due to crowded indices\n */ function needsRebalancing(cells, insertPosition) {\n    if (cells.length < 2) return false;\n    // Sort cells by fractional index\n    const sortedCells = [\n        ...cells\n    ].sort((a, b)=>(a.fractionalIndex || \"\").localeCompare(b.fractionalIndex || \"\"));\n    // Check for adjacent indices that would prevent insertion\n    for(let i = 0; i < sortedCells.length - 1; i++){\n        const current = sortedCells[i]?.fractionalIndex;\n        const next = sortedCells[i + 1]?.fractionalIndex;\n        if (!current || !next) continue;\n        try {\n            // Test if we can insert between these indices\n            fractionalIndexBetween(current, next, {\n                random: ()=>0,\n                randomInt: ()=>0\n            });\n        } catch (error) {\n            if (error instanceof Error && (error.message.includes(\"No string exists between\") || error.message.includes(\"Invalid range\"))) {\n                return true;\n            }\n        }\n    }\n    // If insertPosition is specified, check if we can insert there\n    if (insertPosition !== undefined) {\n        const beforeCell = insertPosition > 0 ? sortedCells[insertPosition - 1] : null;\n        const afterCell = insertPosition < sortedCells.length ? sortedCells[insertPosition] : null;\n        if (beforeCell && afterCell) {\n            try {\n                fractionalIndexBetween(beforeCell.fractionalIndex, afterCell.fractionalIndex, {\n                    random: ()=>0,\n                    randomInt: ()=>0\n                });\n            } catch (error) {\n                if (error instanceof Error && (error.message.includes(\"No string exists between\") || error.message.includes(\"Invalid range\"))) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n/**\n * Rebalances fractional indices for a range of cells to create space for insertions\n */ function rebalanceCellIndices(cells, options = {}) {\n    const { jitterProvider = defaultJitterProvider, actorId = \"system\", bufferCells = 2 } = options;\n    if (cells.length === 0) {\n        return {\n            newIndices: [],\n            events: []\n        };\n    }\n    // Sort cells by current fractional index\n    const sortedCells = [\n        ...cells\n    ].sort((a, b)=>(a.fractionalIndex || \"\").localeCompare(b.fractionalIndex || \"\"));\n    const newIndices = [];\n    const moveEvents = [];\n    // Calculate the range with buffer\n    const totalPositions = cells.length + bufferCells * 2;\n    // Generate evenly distributed indices\n    const indices = generateFractionalIndices(null, null, totalPositions, jitterProvider);\n    // Assign new indices to cells (skipping buffer positions)\n    for(let i = 0; i < sortedCells.length; i++){\n        const cell = sortedCells[i];\n        const newIndex = indices[i + bufferCells]; // Skip buffer positions at start\n        if (!cell || !newIndex) continue;\n        if (cell.fractionalIndex !== newIndex) {\n            newIndices.push({\n                cellId: cell.id,\n                fractionalIndex: newIndex\n            });\n            // Create move event\n            const moveEvent = events.cellMoved2({\n                id: cell.id,\n                fractionalIndex: newIndex,\n                actorId\n            });\n            moveEvents.push(moveEvent);\n        }\n    }\n    return {\n        newIndices,\n        events: moveEvents\n    };\n}\n/**\n * Calculate insertion index after rebalancing has been performed\n */ function calculateInsertionIndexAfterRebalancing(insertPosition, rebalanceResult, jitterProvider) {\n    // Get the new indices after rebalancing\n    const newIndices = rebalanceResult.newIndices.map((item)=>item.fractionalIndex);\n    newIndices.sort();\n    // Calculate where to insert based on the position\n    if (insertPosition === 0) {\n        // Insert at beginning - generate index before first cell\n        const firstIndex = newIndices[0];\n        return fractionalIndexBetween(null, firstIndex, jitterProvider);\n    }\n    if (insertPosition >= newIndices.length) {\n        // Insert at end - generate index after last cell\n        const lastIndex = newIndices[newIndices.length - 1];\n        return fractionalIndexBetween(lastIndex, null, jitterProvider);\n    }\n    // Insert between cells at insertPosition-1 and insertPosition\n    const beforeIndex = newIndices[insertPosition - 1];\n    const afterIndex = newIndices[insertPosition];\n    return fractionalIndexBetween(beforeIndex, afterIndex, jitterProvider);\n}\n/**\n * Enhanced fractional index generation with automatic rebalancing fallback\n */ function fractionalIndexBetweenWithFallback(a, b, context = {}) {\n    const { allCells = [], insertPosition, jitterProvider = defaultJitterProvider } = context;\n    // First, try normal fractional index generation\n    try {\n        const index = fractionalIndexBetween(a, b, jitterProvider);\n        return {\n            index,\n            needsRebalancing: false\n        };\n    } catch (error) {\n        if (error instanceof Error && (error.message.includes(\"No string exists between\") || error.message.includes(\"Invalid range\"))) {\n            // Check if rebalancing is needed and possible\n            if (allCells.length > 0 && needsRebalancing(allCells, insertPosition)) {\n                const rebalanceResult = rebalanceCellIndices(allCells, {\n                    jitterProvider\n                });\n                // Calculate the insertion index after rebalancing\n                const position = insertPosition ?? allCells.length;\n                const insertionIndex = calculateInsertionIndexAfterRebalancing(position, rebalanceResult, jitterProvider);\n                return {\n                    index: insertionIndex,\n                    needsRebalancing: true,\n                    rebalanceResult\n                };\n            }\n        }\n        // Re-throw other errors\n        throw error;\n    }\n}\n/**\n * Safe cell movement with automatic rebalancing\n */ function moveCellWithRebalancing(cell, cellBefore, cellAfter, allCells, options = {}) {\n    const { actorId = \"user\", jitterProvider = defaultJitterProvider } = options;\n    // Try normal move first\n    try {\n        const moveEvent = moveCellBetween(cell, cellBefore, cellAfter, actorId, jitterProvider);\n        if (moveEvent) {\n            return {\n                moveEvent,\n                needsRebalancing: false\n            };\n        }\n    } catch (error) {\n        // Check if it's the \"No string exists between\" error\n        if (error instanceof Error && error.message.includes(\"No string exists between\")) {\n        // This indicates we need rebalancing, so fall through to the rebalancing check\n        } else {\n            // Re-throw other errors\n            throw error;\n        }\n    }\n    // Check if it's because we need rebalancing\n    if (needsRebalancing(allCells)) {\n        const rebalanceResult = rebalanceCellIndices(allCells, {\n            jitterProvider,\n            actorId: `${actorId}-rebalance`\n        });\n        return {\n            needsRebalancing: true,\n            rebalanceResult\n        };\n    }\n    // Cell was already in position or other reason\n    return {\n        needsRebalancing: false\n    };\n}\n// Helper to validate fractional index (basic check)\nfunction isValidFractionalIndex(index) {\n    if (typeof index !== \"string\" || index.length === 0) {\n        return false;\n    }\n    // Check that all characters are valid base36 characters\n    for (const char of index){\n        if (!BASE36_DIGITS.includes(char)) {\n            return false;\n        }\n    }\n    return true;\n}\n// Validate that fractional indices maintain proper binary collation ordering\nfunction validateFractionalIndexOrder(indices) {\n    const validIndices = indices.filter((idx)=>isValidFractionalIndex(idx || \"\"));\n    for(let i = 1; i < validIndices.length; i++){\n        const prev = validIndices[i - 1];\n        const curr = validIndices[i];\n        if (!prev || !curr) {\n            return false;\n        }\n        if (prev >= curr) {\n            console.error(`Fractional index ordering violation: \"${prev}\" >= \"${curr}\"`);\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Helper functions for cell creation and movement with fractional indexing\n *\n * Sorting Strategy:\n * 1. Primary sort: Lexicographic comparison of fractional indices (a < b, not localeCompare)\n * 2. Secondary sort: Cell ID comparison when fractional indices are equal (rare but possible)\n *\n * This ensures stable, deterministic ordering even in the unlikely event of index collisions.\n * We generate 20 candidate indices and pick one randomly to minimize collision probability.\n */ /**\n * Move a cell between two other cells using fractional indices\n *\n * @param cell - The cell to move (must have a valid fractionalIndex)\n * @param cellBefore - The cell that should come before (null for beginning)\n * @param cellAfter - The cell that should come after (null for end)\n * @param actorId - Optional actor ID for tracking who made the change\n *\n * Note: It's the caller's responsibility to provide accurate before/after cells.\n * If both cellBefore and cellAfter are provided, they must be adjacent cells.\n */ function moveCellBetween(cell, cellBefore, cellAfter, actorId, jitterProvider = defaultJitterProvider) {\n    // Cell must have a valid fractional index to be moved\n    if (!cell.fractionalIndex) {\n        return null;\n    }\n    // Determine the fractional indices for before and after\n    const previousKey = cellBefore?.fractionalIndex || null;\n    const nextKey = cellAfter?.fractionalIndex || null;\n    // Check if already in the target position\n    if (cellBefore && cellAfter) {\n        // If between two cells, check if we're already there\n        if (cell.fractionalIndex > previousKey && cell.fractionalIndex < nextKey) {\n            return null;\n        }\n    } else if (!cellBefore && cellAfter) {\n        // Moving to beginning - check if already before cellAfter\n        if (cell.fractionalIndex < nextKey) {\n            return null;\n        }\n    } else if (cellBefore && !cellAfter) {\n        // Moving to end - check if already after cellBefore\n        if (cell.fractionalIndex > previousKey) {\n            return null;\n        }\n    }\n    const fractionalIndex = fractionalIndexBetween(previousKey, nextKey, jitterProvider);\n    return events.cellMoved2({\n        id: cell.id,\n        fractionalIndex,\n        actorId\n    });\n}\n/**\n * Create a cell between two other cells using fractional indices\n *\n * @param cellData - The cell data (id, cellType, createdBy)\n * @param cellBefore - The cell that should come before (null for beginning)\n * @param cellAfter - The cell that should come after (null for end)\n *\n * Note: It's the caller's responsibility to provide accurate before/after cells.\n * If both cellBefore and cellAfter are provided, they must be adjacent cells.\n */ function createCellBetween(cellData, cellBefore, cellAfter, allCells, jitterProvider = defaultJitterProvider) {\n    // Determine the fractional indices for before and after\n    let previousKey = cellBefore?.fractionalIndex || null;\n    let nextKey = cellAfter?.fractionalIndex || null;\n    // Special case: if both are null but we have existing cells, insert at end\n    if (!cellBefore && !cellAfter && allCells.length > 0) {\n        // Sort cells by fractional index to find the last one\n        const sortedCells = [\n            ...allCells\n        ].sort((a, b)=>(a.fractionalIndex || \"\").localeCompare(b.fractionalIndex || \"\"));\n        const lastCell = sortedCells[sortedCells.length - 1];\n        if (lastCell?.fractionalIndex) {\n            previousKey = lastCell.fractionalIndex;\n            nextKey = null; // Insert after the last cell\n        }\n    }\n    // Calculate insertion position for rebalancing context\n    let insertPosition = 0;\n    if (cellBefore && cellAfter) {\n        // Find position between the two cells\n        const beforeIndex = allCells.findIndex((cell)=>cell.id === cellBefore.id);\n        insertPosition = beforeIndex + 1;\n    } else if (cellBefore) {\n        // Insert after cellBefore\n        const beforeIndex = allCells.findIndex((cell)=>cell.id === cellBefore.id);\n        insertPosition = beforeIndex + 1;\n    } else if (cellAfter) {\n        // Insert before cellAfter\n        const afterIndex = allCells.findIndex((cell)=>cell.id === cellAfter.id);\n        insertPosition = afterIndex;\n    } else {\n        // Insert at end\n        insertPosition = allCells.length;\n    }\n    // Use the robust fractional index generation with fallback\n    const result = fractionalIndexBetweenWithFallback(previousKey, nextKey, {\n        allCells,\n        insertPosition,\n        jitterProvider\n    });\n    const resultEvents = [];\n    // Add rebalancing events if needed\n    if (result.needsRebalancing && result.rebalanceResult) {\n        resultEvents.push(...result.rebalanceResult.events);\n    }\n    // Create the new cell with the calculated fractional index\n    const createEvent = events.cellCreated2({\n        ...cellData,\n        fractionalIndex: result.index\n    });\n    resultEvents.push(createEvent);\n    return {\n        events: resultEvents,\n        newCellId: cellData.id,\n        needsRebalancing: result.needsRebalancing,\n        ...result.rebalanceResult && {\n            rebalanceCount: result.rebalanceResult.newIndices.length\n        }\n    };\n}\n/**\n * Move a cell between two other cells with automatic rebalancing\n */ function moveCellBetweenWithRebalancing(cell, cellBefore, cellAfter, allCells, actorId, jitterProvider = defaultJitterProvider) {\n    // Cell must have a valid fractional index to be moved\n    if (!cell.fractionalIndex) {\n        return {\n            events: [],\n            moved: false,\n            needsRebalancing: false\n        };\n    }\n    // Calculate target position\n    let targetPosition = 0;\n    if (cellBefore && cellAfter) {\n        // Find position between the two cells\n        const beforeIndex = allCells.findIndex((c)=>c.id === cellBefore.id);\n        targetPosition = beforeIndex + 1;\n    } else if (cellBefore) {\n        // Move after cellBefore\n        const beforeIndex = allCells.findIndex((c)=>c.id === cellBefore.id);\n        targetPosition = beforeIndex + 1;\n    } else if (cellAfter) {\n        // Move before cellAfter\n        const afterIndex = allCells.findIndex((c)=>c.id === cellAfter.id);\n        targetPosition = afterIndex;\n    } else {\n        // Move to end\n        targetPosition = allCells.length - 1; // Account for the cell being moved\n    }\n    // Check if already in target position\n    const currentPosition = allCells.findIndex((c)=>c.id === cell.id);\n    if (currentPosition === targetPosition) {\n        return {\n            events: [],\n            moved: false,\n            needsRebalancing: false\n        };\n    }\n    // Use the existing moveCellWithRebalancing function\n    const result = moveCellWithRebalancing(cell, cellBefore, cellAfter, allCells, {\n        ...actorId && {\n            actorId\n        },\n        jitterProvider\n    });\n    const resultEvents = [];\n    // Add rebalancing events if needed\n    if (result.needsRebalancing && result.rebalanceResult) {\n        resultEvents.push(...result.rebalanceResult.events);\n        return {\n            events: resultEvents,\n            moved: true,\n            needsRebalancing: true,\n            rebalanceCount: result.rebalanceResult.newIndices.length\n        };\n    }\n    // Add the move event if one was generated\n    if (result.moveEvent) {\n        resultEvents.push(result.moveEvent);\n        return {\n            events: resultEvents,\n            moved: true,\n            needsRebalancing: false\n        };\n    }\n    // No move was needed\n    return {\n        events: [],\n        moved: false,\n        needsRebalancing: false\n    };\n}\n/**\n * Convenience function for simple cell creation with automatic event commitment\n * Returns the new cell ID for immediate use\n */ function createCellBetweenAndCommit(store, cellData, cellBefore, cellAfter, allCells, jitterProvider = defaultJitterProvider) {\n    const result = createCellBetween(cellData, cellBefore, cellAfter, allCells, jitterProvider);\n    // Commit all events\n    result.events.forEach((event)=>store.commit(event));\n    return result.newCellId;\n}\n/**\n * Convenience function for simple cell movement with automatic event commitment\n * Returns whether the cell was actually moved\n */ function moveCellBetweenAndCommit(store, cell, cellBefore, cellAfter, allCells, actorId, jitterProvider = defaultJitterProvider) {\n    const result = moveCellBetweenWithRebalancing(cell, cellBefore, cellAfter, allCells, actorId, jitterProvider);\n    // Commit all events\n    result.events.forEach((event)=>store.commit(event));\n    return result.moved;\n} // Pre 0.7.1 -- these types should get created in clients\n // const state = State.SQLite.makeState({ tables, materializers });\n // export const schema = makeSchema({ events, state });\n // export type Store = LiveStore<typeof schema>;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/schema/mod.ts\n");

/***/ }),

/***/ "(rsc)/./src/schema/queries/cellOrdering.ts":
/*!********************************************!*\
  !*** ./src/schema/queries/cellOrdering.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cellOrdering$: () => (/* binding */ cellOrdering$),\n/* harmony export */   cellPositionInfo: () => (/* binding */ cellPositionInfo),\n/* harmony export */   cellsAfter: () => (/* binding */ cellsAfter),\n/* harmony export */   cellsBefore: () => (/* binding */ cellsBefore),\n/* harmony export */   cellsInRange: () => (/* binding */ cellsInRange),\n/* harmony export */   cellsWithIndices$: () => (/* binding */ cellsWithIndices$),\n/* harmony export */   firstCell$: () => (/* binding */ firstCell$),\n/* harmony export */   getAdjacentCells: () => (/* binding */ getAdjacentCells),\n/* harmony export */   lastCell$: () => (/* binding */ lastCell$),\n/* harmony export */   neighboringCells: () => (/* binding */ neighboringCells)\n/* harmony export */ });\n/* harmony import */ var _tables_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tables.ts */ \"(rsc)/./src/schema/tables.ts\");\n/* harmony import */ var _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @livestore/livestore */ \"(rsc)/./src/node_modules/@livestore/livestore/dist/live-queries/db-query.js\");\n\n\n/**\n * Cell ordering queries using fractional indexing\n * These queries are designed to be fine-grained and reusable\n * to minimize re-renders across the application\n */ // Get all cells with their fractional indices, sorted\nconst cellsWithIndices$ = (0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select(\"id\", \"fractionalIndex\", \"cellType\").orderBy(\"fractionalIndex\", \"asc\"), {\n    label: \"cells.withIndices\"\n});\n// Get just the cell ordering information (minimal fields)\nconst cellOrdering$ = (0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select(\"id\", \"fractionalIndex\").orderBy(\"fractionalIndex\", \"asc\"), {\n    label: \"cells.ordering\"\n});\n// Get the first cell in the notebook\nconst firstCell$ = (0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select(\"id\", \"fractionalIndex\").orderBy(\"fractionalIndex\", \"asc\").first({\n    fallback: ()=>null\n}), {\n    label: \"cells.first\"\n});\n// Get the last cell in the notebook\nconst lastCell$ = (0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select(\"id\", \"fractionalIndex\").orderBy(\"fractionalIndex\", \"desc\").first({\n    fallback: ()=>null\n}), {\n    label: \"cells.last\"\n});\n// Get cells before a specific fractional index\nconst cellsBefore = (fractionalIndex, limit = 1)=>(0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select(\"id\", \"fractionalIndex\").where(\"fractionalIndex\", \"<\", fractionalIndex).orderBy(\"fractionalIndex\", \"desc\").limit(limit), {\n        deps: [\n            fractionalIndex,\n            limit\n        ],\n        label: `cells.before.${fractionalIndex}`\n    });\n// Get cells after a specific fractional index\nconst cellsAfter = (fractionalIndex, limit = 1)=>(0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select(\"id\", \"fractionalIndex\").where(\"fractionalIndex\", \">\", fractionalIndex).orderBy(\"fractionalIndex\", \"asc\").limit(limit), {\n        deps: [\n            fractionalIndex,\n            limit\n        ],\n        label: `cells.after.${fractionalIndex}`\n    });\n// Get neighboring cells (one before and one after)\nconst neighboringCells = (cellId)=>(0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select(\"id\", \"fractionalIndex\").orderBy(\"fractionalIndex\", \"asc\"), {\n        deps: [\n            cellId\n        ],\n        label: `cells.neighbors.${cellId}`\n    });\n// Get the immediate adjacent cells (previous and next) for a specific cell\nconst getAdjacentCells = (cellId, fractionalIndex)=>{\n    const previousCell$ = (0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select(\"id\", \"fractionalIndex\").where(\"fractionalIndex\", \"<\", fractionalIndex).orderBy(\"fractionalIndex\", \"desc\").first({\n        fallback: ()=>null\n    }), {\n        deps: [\n            cellId,\n            fractionalIndex\n        ],\n        label: `cells.previous.${cellId}`\n    });\n    const nextCell$ = (0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select(\"id\", \"fractionalIndex\").where(\"fractionalIndex\", \">\", fractionalIndex).orderBy(\"fractionalIndex\", \"asc\").first({\n        fallback: ()=>null\n    }), {\n        deps: [\n            cellId,\n            fractionalIndex\n        ],\n        label: `cells.next.${cellId}`\n    });\n    return {\n        previousCell$,\n        nextCell$\n    };\n};\n// Get cell position info (useful for UI that needs to know if a cell is first/last)\nconst cellPositionInfo = (cellId)=>(0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select(\"id\", \"fractionalIndex\").where({\n        id: cellId\n    }).first({\n        fallback: ()=>null\n    }), {\n        deps: [\n            cellId\n        ],\n        label: `cells.positionInfo.${cellId}`\n    });\n// Get cells in a range (useful for virtualization)\nconst cellsInRange = (startIndex, endIndex)=>{\n    let query = _tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select(\"id\", \"fractionalIndex\", \"cellType\");\n    if (startIndex && endIndex) {\n        // Both bounds specified\n        query = query.where(\"fractionalIndex\", \">=\", startIndex).where(\"fractionalIndex\", \"<=\", endIndex);\n    } else if (startIndex) {\n        // Only start bound\n        query = query.where(\"fractionalIndex\", \">=\", startIndex);\n    } else if (endIndex) {\n        // Only end bound\n        query = query.where(\"fractionalIndex\", \"<=\", endIndex);\n    }\n    return (0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.queryDb)(query.orderBy(\"fractionalIndex\", \"asc\"), {\n        deps: [\n            startIndex,\n            endIndex\n        ],\n        label: `cells.range.${startIndex}-${endIndex}`\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/schema/queries/cellOrdering.ts\n");

/***/ }),

/***/ "(rsc)/./src/schema/queries/index.ts":
/*!*************************************!*\
  !*** ./src/schema/queries/index.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adjacentCells: () => (/* binding */ adjacentCells),\n/* harmony export */   applyDeltas: () => (/* reexport safe */ _outputDeltas_ts__WEBPACK_IMPORTED_MODULE_1__.applyDeltas),\n/* harmony export */   cellFractionalIndex: () => (/* binding */ cellFractionalIndex),\n/* harmony export */   cellIDs$: () => (/* binding */ cellIDs$),\n/* harmony export */   cellList$: () => (/* binding */ cellList$),\n/* harmony export */   cellOrdering$: () => (/* reexport safe */ _cellOrdering_ts__WEBPACK_IMPORTED_MODULE_2__.cellOrdering$),\n/* harmony export */   cellPositionInfo: () => (/* reexport safe */ _cellOrdering_ts__WEBPACK_IMPORTED_MODULE_2__.cellPositionInfo),\n/* harmony export */   cellQuery: () => (/* binding */ cellQuery),\n/* harmony export */   cellReferences$: () => (/* binding */ cellReferences$),\n/* harmony export */   cells$: () => (/* binding */ cells$),\n/* harmony export */   cellsAfter: () => (/* reexport safe */ _cellOrdering_ts__WEBPACK_IMPORTED_MODULE_2__.cellsAfter),\n/* harmony export */   cellsBefore: () => (/* reexport safe */ _cellOrdering_ts__WEBPACK_IMPORTED_MODULE_2__.cellsBefore),\n/* harmony export */   cellsInRange: () => (/* reexport safe */ _cellOrdering_ts__WEBPACK_IMPORTED_MODULE_2__.cellsInRange),\n/* harmony export */   cellsWithIndices$: () => (/* reexport safe */ _cellOrdering_ts__WEBPACK_IMPORTED_MODULE_2__.cellsWithIndices$),\n/* harmony export */   firstCell$: () => (/* reexport safe */ _cellOrdering_ts__WEBPACK_IMPORTED_MODULE_2__.firstCell$),\n/* harmony export */   getAdjacentCells: () => (/* reexport safe */ _cellOrdering_ts__WEBPACK_IMPORTED_MODULE_2__.getAdjacentCells),\n/* harmony export */   getFinalContent: () => (/* reexport safe */ _outputDeltas_ts__WEBPACK_IMPORTED_MODULE_1__.getFinalContent),\n/* harmony export */   lastCell$: () => (/* reexport safe */ _cellOrdering_ts__WEBPACK_IMPORTED_MODULE_2__.lastCell$),\n/* harmony export */   neighboringCells: () => (/* reexport safe */ _cellOrdering_ts__WEBPACK_IMPORTED_MODULE_2__.neighboringCells),\n/* harmony export */   notebookMetadata$: () => (/* binding */ notebookMetadata$),\n/* harmony export */   outputDeltas$: () => (/* reexport safe */ _outputDeltas_ts__WEBPACK_IMPORTED_MODULE_1__.outputDeltas$),\n/* harmony export */   outputDeltasQuery: () => (/* reexport safe */ _outputDeltas_ts__WEBPACK_IMPORTED_MODULE_1__.outputDeltasQuery),\n/* harmony export */   runtimeSessions$: () => (/* binding */ runtimeSessions$)\n/* harmony export */ });\n/* harmony import */ var _tables_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tables.ts */ \"(rsc)/./src/schema/tables.ts\");\n/* harmony import */ var _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @livestore/livestore */ \"(rsc)/./src/node_modules/@livestore/livestore/dist/live-queries/db-query.js\");\n/* harmony import */ var _outputDeltas_ts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./outputDeltas.ts */ \"(rsc)/./src/schema/queries/outputDeltas.ts\");\n/* harmony import */ var _cellOrdering_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cellOrdering.ts */ \"(rsc)/./src/schema/queries/cellOrdering.ts\");\n\n\n\n\nconst cellIDs$ = (0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select(\"id\").orderBy(\"fractionalIndex\", \"asc\"), {\n    label: \"notebook.cellIds\"\n});\n// Primary query for cell references - returns CellReference objects\nconst cellReferences$ = (0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select(\"id\", \"fractionalIndex\", \"cellType\").orderBy(\"fractionalIndex\", \"asc\"), {\n    label: \"notebook.cellReferences\"\n});\n// @deprecated Use cellReferences$ instead\nconst cellList$ = cellReferences$;\n// Query for getting a specific cell's fractional index\nconst cellFractionalIndex = (cellId)=>(0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select(\"fractionalIndex\").where({\n        id: cellId\n    }).first({\n        fallback: ()=>null\n    }), {\n        deps: [\n            cellId\n        ],\n        label: `cell.fractionalIndex.${cellId}`\n    });\n// @deprecated Use cellReferences$ instead - this returns all cells anyway\nconst adjacentCells = (_cellId)=>cellReferences$;\nconst notebookMetadata$ = (0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.notebookMetadata.select(\"key\", \"value\"));\nconst cellQuery = {\n    byId: (cellId)=>(0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select().where({\n            id: cellId\n        }).first({\n            fallback: ()=>null\n        }), {\n            deps: [\n                cellId\n            ],\n            label: `cell.${cellId}`\n        }),\n    outputs: (cellId)=>(0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.outputs.select().where({\n            cellId\n        }).orderBy(\"position\", \"asc\"), {\n            deps: [\n                cellId\n            ],\n            label: `outputs:${cellId}`\n        }),\n    executionQueue: (cellId)=>(0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.executionQueue.select().where({\n            cellId\n        }).orderBy(\"id\", \"desc\"), {\n            deps: [\n                cellId\n            ],\n            label: `queue:${cellId}`\n        })\n};\nconst runtimeSessions$ = (0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.runtimeSessions.select().orderBy(\"sessionId\", \"desc\"), {\n    label: \"runtime.sessions\"\n});\n/**\n * Full cells query - returns complete cell data including source, metadata, etc.\n *\n * ⚠️  PERFORMANCE WARNING: This loads ALL cell data at once.\n *\n * Use this only when you need:\n * - Full cell properties (source, executionCount, metadata, etc.)\n * - Operations that require all cells (like TUI navigation)\n *\n * For most use cases, prefer:\n * - `cellReferences$` for cell ordering/navigation with minimal data\n * - `cellQuery.byId(cellId)` for individual cell data\n */ const cells$ = (0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.cells.select().orderBy(\"fractionalIndex\", \"asc\"), {\n    label: \"notebook.cells\"\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2NoZW1hL3F1ZXJpZXMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNDO0FBQ1M7QUFFYjtBQUNBO0FBRTNCLE1BQU1FLFdBQVdELDZEQUFPQSxDQUM3QkQsOENBQU1BLENBQUNHLEtBQUssQ0FBQ0MsTUFBTSxDQUFDLE1BQU1DLE9BQU8sQ0FBQyxtQkFBbUIsUUFDckQ7SUFBRUMsT0FBTztBQUFtQixHQUM1QjtBQUVGLG9FQUFvRTtBQUM3RCxNQUFNQyxrQkFBa0JOLDZEQUFPQSxDQUNwQ0QsOENBQU1BLENBQUNHLEtBQUssQ0FDVEMsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLFlBQ2hDQyxPQUFPLENBQUMsbUJBQW1CLFFBQzlCO0lBQUVDLE9BQU87QUFBMEIsR0FDbkM7QUFFRiwwQ0FBMEM7QUFDbkMsTUFBTUUsWUFBWUQsZ0JBQWdCO0FBRXpDLHVEQUF1RDtBQUNoRCxNQUFNRSxzQkFBc0IsQ0FBQ0MsU0FDbENULDZEQUFPQSxDQUNMRCw4Q0FBTUEsQ0FBQ0csS0FBSyxDQUNUQyxNQUFNLENBQUMsbUJBQ1BPLEtBQUssQ0FBQztRQUFFQyxJQUFJRjtJQUFPLEdBQ25CRyxLQUFLLENBQUM7UUFDTEMsVUFBVSxJQUFNO0lBQ2xCLElBQ0Y7UUFDRUMsTUFBTTtZQUFDTDtTQUFPO1FBQ2RKLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRUksT0FBTyxDQUFDO0lBQ3pDLEdBQ0E7QUFFSiwwRUFBMEU7QUFDbkUsTUFBTU0sZ0JBQWdCLENBQUNDLFVBQW9CVixnQkFBZ0I7QUFFM0QsTUFBTVcsb0JBQW9CakIsNkRBQU9BLENBQ3RDRCw4Q0FBTUEsQ0FBQ21CLGdCQUFnQixDQUFDZixNQUFNLENBQUMsT0FBTyxVQUN0QztBQUVLLE1BQU1nQixZQUFZO0lBQ3ZCQyxNQUFNLENBQUNYLFNBQ0xULDZEQUFPQSxDQUNMRCw4Q0FBTUEsQ0FBQ0csS0FBSyxDQUNUQyxNQUFNLEdBQ05PLEtBQUssQ0FBQztZQUFFQyxJQUFJRjtRQUFPLEdBQ25CRyxLQUFLLENBQUM7WUFDTEMsVUFBVSxJQUFNO1FBQ2xCLElBQ0Y7WUFDRUMsTUFBTTtnQkFBQ0w7YUFBTztZQUNkSixPQUFPLENBQUMsS0FBSyxFQUFFSSxPQUFPLENBQUM7UUFDekI7SUFHSlksU0FBUyxDQUFDWixTQUNSVCw2REFBT0EsQ0FDTEQsOENBQU1BLENBQUNzQixPQUFPLENBQUNsQixNQUFNLEdBQUdPLEtBQUssQ0FBQztZQUFFRDtRQUFPLEdBQUdMLE9BQU8sQ0FBQyxZQUFZLFFBQzlEO1lBQUVVLE1BQU07Z0JBQUNMO2FBQU87WUFBRUosT0FBTyxDQUFDLFFBQVEsRUFBRUksT0FBTyxDQUFDO1FBQUM7SUFHakRhLGdCQUFnQixDQUFDYixTQUNmVCw2REFBT0EsQ0FDTEQsOENBQU1BLENBQUN1QixjQUFjLENBQUNuQixNQUFNLEdBQUdPLEtBQUssQ0FBQztZQUFFRDtRQUFPLEdBQUdMLE9BQU8sQ0FBQyxNQUFNLFNBQy9EO1lBQUVVLE1BQU07Z0JBQUNMO2FBQU87WUFBRUosT0FBTyxDQUFDLE1BQU0sRUFBRUksT0FBTyxDQUFDO1FBQUM7QUFFakQsRUFBRTtBQUVLLE1BQU1jLG1CQUFtQnZCLDZEQUFPQSxDQUNyQ0QsOENBQU1BLENBQUN5QixlQUFlLENBQUNyQixNQUFNLEdBQUdDLE9BQU8sQ0FBQyxhQUFhLFNBQ3JEO0lBQUVDLE9BQU87QUFBbUIsR0FDNUI7QUFFRjs7Ozs7Ozs7Ozs7O0NBWUMsR0FDTSxNQUFNb0IsU0FBU3pCLDZEQUFPQSxDQUMzQkQsOENBQU1BLENBQUNHLEtBQUssQ0FBQ0MsTUFBTSxHQUFHQyxPQUFPLENBQUMsbUJBQW1CLFFBQ2pEO0lBQUVDLE9BQU87QUFBaUIsR0FDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmFjb25kYS1hc3Nlc21lbnQtMS8uL3NyYy9zY2hlbWEvcXVlcmllcy9pbmRleC50cz9mNjE0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRhYmxlcyB9IGZyb20gXCIuLi90YWJsZXMudHNcIjtcbmltcG9ydCB7IHF1ZXJ5RGIgfSBmcm9tIFwiQGxpdmVzdG9yZS9saXZlc3RvcmVcIjtcblxuZXhwb3J0ICogZnJvbSBcIi4vb3V0cHV0RGVsdGFzLnRzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jZWxsT3JkZXJpbmcudHNcIjtcblxuZXhwb3J0IGNvbnN0IGNlbGxJRHMkID0gcXVlcnlEYihcbiAgdGFibGVzLmNlbGxzLnNlbGVjdChcImlkXCIpLm9yZGVyQnkoXCJmcmFjdGlvbmFsSW5kZXhcIiwgXCJhc2NcIiksXG4gIHsgbGFiZWw6IFwibm90ZWJvb2suY2VsbElkc1wiIH0sXG4pO1xuXG4vLyBQcmltYXJ5IHF1ZXJ5IGZvciBjZWxsIHJlZmVyZW5jZXMgLSByZXR1cm5zIENlbGxSZWZlcmVuY2Ugb2JqZWN0c1xuZXhwb3J0IGNvbnN0IGNlbGxSZWZlcmVuY2VzJCA9IHF1ZXJ5RGIoXG4gIHRhYmxlcy5jZWxsc1xuICAgIC5zZWxlY3QoXCJpZFwiLCBcImZyYWN0aW9uYWxJbmRleFwiLCBcImNlbGxUeXBlXCIpXG4gICAgLm9yZGVyQnkoXCJmcmFjdGlvbmFsSW5kZXhcIiwgXCJhc2NcIiksXG4gIHsgbGFiZWw6IFwibm90ZWJvb2suY2VsbFJlZmVyZW5jZXNcIiB9LFxuKTtcblxuLy8gQGRlcHJlY2F0ZWQgVXNlIGNlbGxSZWZlcmVuY2VzJCBpbnN0ZWFkXG5leHBvcnQgY29uc3QgY2VsbExpc3QkID0gY2VsbFJlZmVyZW5jZXMkO1xuXG4vLyBRdWVyeSBmb3IgZ2V0dGluZyBhIHNwZWNpZmljIGNlbGwncyBmcmFjdGlvbmFsIGluZGV4XG5leHBvcnQgY29uc3QgY2VsbEZyYWN0aW9uYWxJbmRleCA9IChjZWxsSWQ6IHN0cmluZykgPT5cbiAgcXVlcnlEYihcbiAgICB0YWJsZXMuY2VsbHNcbiAgICAgIC5zZWxlY3QoXCJmcmFjdGlvbmFsSW5kZXhcIilcbiAgICAgIC53aGVyZSh7IGlkOiBjZWxsSWQgfSlcbiAgICAgIC5maXJzdCh7XG4gICAgICAgIGZhbGxiYWNrOiAoKSA9PiBudWxsLFxuICAgICAgfSksXG4gICAge1xuICAgICAgZGVwczogW2NlbGxJZF0sXG4gICAgICBsYWJlbDogYGNlbGwuZnJhY3Rpb25hbEluZGV4LiR7Y2VsbElkfWAsXG4gICAgfSxcbiAgKTtcblxuLy8gQGRlcHJlY2F0ZWQgVXNlIGNlbGxSZWZlcmVuY2VzJCBpbnN0ZWFkIC0gdGhpcyByZXR1cm5zIGFsbCBjZWxscyBhbnl3YXlcbmV4cG9ydCBjb25zdCBhZGphY2VudENlbGxzID0gKF9jZWxsSWQ6IHN0cmluZykgPT4gY2VsbFJlZmVyZW5jZXMkO1xuXG5leHBvcnQgY29uc3Qgbm90ZWJvb2tNZXRhZGF0YSQgPSBxdWVyeURiKFxuICB0YWJsZXMubm90ZWJvb2tNZXRhZGF0YS5zZWxlY3QoXCJrZXlcIiwgXCJ2YWx1ZVwiKSxcbik7XG5cbmV4cG9ydCBjb25zdCBjZWxsUXVlcnkgPSB7XG4gIGJ5SWQ6IChjZWxsSWQ6IHN0cmluZykgPT5cbiAgICBxdWVyeURiKFxuICAgICAgdGFibGVzLmNlbGxzXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAud2hlcmUoeyBpZDogY2VsbElkIH0pXG4gICAgICAgIC5maXJzdCh7XG4gICAgICAgICAgZmFsbGJhY2s6ICgpID0+IG51bGwsXG4gICAgICAgIH0pLFxuICAgICAge1xuICAgICAgICBkZXBzOiBbY2VsbElkXSxcbiAgICAgICAgbGFiZWw6IGBjZWxsLiR7Y2VsbElkfWAsXG4gICAgICB9LFxuICAgICksXG5cbiAgb3V0cHV0czogKGNlbGxJZDogc3RyaW5nKSA9PlxuICAgIHF1ZXJ5RGIoXG4gICAgICB0YWJsZXMub3V0cHV0cy5zZWxlY3QoKS53aGVyZSh7IGNlbGxJZCB9KS5vcmRlckJ5KFwicG9zaXRpb25cIiwgXCJhc2NcIiksXG4gICAgICB7IGRlcHM6IFtjZWxsSWRdLCBsYWJlbDogYG91dHB1dHM6JHtjZWxsSWR9YCB9LFxuICAgICksXG5cbiAgZXhlY3V0aW9uUXVldWU6IChjZWxsSWQ6IHN0cmluZykgPT5cbiAgICBxdWVyeURiKFxuICAgICAgdGFibGVzLmV4ZWN1dGlvblF1ZXVlLnNlbGVjdCgpLndoZXJlKHsgY2VsbElkIH0pLm9yZGVyQnkoXCJpZFwiLCBcImRlc2NcIiksXG4gICAgICB7IGRlcHM6IFtjZWxsSWRdLCBsYWJlbDogYHF1ZXVlOiR7Y2VsbElkfWAgfSxcbiAgICApLFxufTtcblxuZXhwb3J0IGNvbnN0IHJ1bnRpbWVTZXNzaW9ucyQgPSBxdWVyeURiKFxuICB0YWJsZXMucnVudGltZVNlc3Npb25zLnNlbGVjdCgpLm9yZGVyQnkoXCJzZXNzaW9uSWRcIiwgXCJkZXNjXCIpLFxuICB7IGxhYmVsOiBcInJ1bnRpbWUuc2Vzc2lvbnNcIiB9LFxuKTtcblxuLyoqXG4gKiBGdWxsIGNlbGxzIHF1ZXJ5IC0gcmV0dXJucyBjb21wbGV0ZSBjZWxsIGRhdGEgaW5jbHVkaW5nIHNvdXJjZSwgbWV0YWRhdGEsIGV0Yy5cbiAqXG4gKiDimqDvuI8gIFBFUkZPUk1BTkNFIFdBUk5JTkc6IFRoaXMgbG9hZHMgQUxMIGNlbGwgZGF0YSBhdCBvbmNlLlxuICpcbiAqIFVzZSB0aGlzIG9ubHkgd2hlbiB5b3UgbmVlZDpcbiAqIC0gRnVsbCBjZWxsIHByb3BlcnRpZXMgKHNvdXJjZSwgZXhlY3V0aW9uQ291bnQsIG1ldGFkYXRhLCBldGMuKVxuICogLSBPcGVyYXRpb25zIHRoYXQgcmVxdWlyZSBhbGwgY2VsbHMgKGxpa2UgVFVJIG5hdmlnYXRpb24pXG4gKlxuICogRm9yIG1vc3QgdXNlIGNhc2VzLCBwcmVmZXI6XG4gKiAtIGBjZWxsUmVmZXJlbmNlcyRgIGZvciBjZWxsIG9yZGVyaW5nL25hdmlnYXRpb24gd2l0aCBtaW5pbWFsIGRhdGFcbiAqIC0gYGNlbGxRdWVyeS5ieUlkKGNlbGxJZClgIGZvciBpbmRpdmlkdWFsIGNlbGwgZGF0YVxuICovXG5leHBvcnQgY29uc3QgY2VsbHMkID0gcXVlcnlEYihcbiAgdGFibGVzLmNlbGxzLnNlbGVjdCgpLm9yZGVyQnkoXCJmcmFjdGlvbmFsSW5kZXhcIiwgXCJhc2NcIiksXG4gIHsgbGFiZWw6IFwibm90ZWJvb2suY2VsbHNcIiB9LFxuKTtcbiJdLCJuYW1lcyI6WyJ0YWJsZXMiLCJxdWVyeURiIiwiY2VsbElEcyQiLCJjZWxscyIsInNlbGVjdCIsIm9yZGVyQnkiLCJsYWJlbCIsImNlbGxSZWZlcmVuY2VzJCIsImNlbGxMaXN0JCIsImNlbGxGcmFjdGlvbmFsSW5kZXgiLCJjZWxsSWQiLCJ3aGVyZSIsImlkIiwiZmlyc3QiLCJmYWxsYmFjayIsImRlcHMiLCJhZGphY2VudENlbGxzIiwiX2NlbGxJZCIsIm5vdGVib29rTWV0YWRhdGEkIiwibm90ZWJvb2tNZXRhZGF0YSIsImNlbGxRdWVyeSIsImJ5SWQiLCJvdXRwdXRzIiwiZXhlY3V0aW9uUXVldWUiLCJydW50aW1lU2Vzc2lvbnMkIiwicnVudGltZVNlc3Npb25zIiwiY2VsbHMkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/schema/queries/index.ts\n");

/***/ }),

/***/ "(rsc)/./src/schema/queries/outputDeltas.ts":
/*!********************************************!*\
  !*** ./src/schema/queries/outputDeltas.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyDeltas: () => (/* binding */ applyDeltas),\n/* harmony export */   getFinalContent: () => (/* binding */ getFinalContent),\n/* harmony export */   outputDeltas$: () => (/* binding */ outputDeltas$),\n/* harmony export */   outputDeltasQuery: () => (/* binding */ outputDeltasQuery)\n/* harmony export */ });\n/* harmony import */ var _tables_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tables.ts */ \"(rsc)/./src/schema/tables.ts\");\n/* harmony import */ var _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @livestore/livestore */ \"(rsc)/./src/node_modules/@livestore/livestore/dist/live-queries/db-query.js\");\n\n\n/**\n * Query deltas for a given output ID, sorted by sequence number\n */ const outputDeltasQuery = (outputId)=>(0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.outputDeltas.select().where({\n        outputId\n    }).orderBy(\"sequenceNumber\", \"asc\"), {\n        deps: [\n            outputId\n        ],\n        label: \"outputDeltas\"\n    });\n/**\n * Apply deltas to original content in sequence order\n */ const applyDeltas = (originalContent, deltas)=>{\n    if (deltas.length === 0) {\n        return originalContent;\n    }\n    return deltas.reduce((acc, delta)=>{\n        return acc + delta.delta;\n    }, originalContent);\n};\n/**\n * Get final content with deltas applied\n */ const getFinalContent = (originalContent, deltas)=>{\n    const hasDeltas = deltas.length > 0;\n    const content = applyDeltas(originalContent, deltas);\n    return {\n        content,\n        hasDeltas,\n        deltaCount: deltas.length\n    };\n};\n/**\n * Query all output deltas, sorted by sequence number\n */ const outputDeltas$ = (0,_livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.queryDb)(_tables_ts__WEBPACK_IMPORTED_MODULE_0__.tables.outputDeltas.select().orderBy(\"sequenceNumber\", \"asc\"), {\n    label: \"notebook.outputDeltas\"\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2NoZW1hL3F1ZXJpZXMvb3V0cHV0RGVsdGFzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFzQztBQUNTO0FBUy9DOztDQUVDLEdBQ00sTUFBTUUsb0JBQW9CLENBQUNDLFdBQ2hDRiw2REFBT0EsQ0FDTEQsOENBQU1BLENBQUNJLFlBQVksQ0FDaEJDLE1BQU0sR0FDTkMsS0FBSyxDQUFDO1FBQUVIO0lBQVMsR0FDakJJLE9BQU8sQ0FBQyxrQkFBa0IsUUFDN0I7UUFBRUMsTUFBTTtZQUFDTDtTQUFTO1FBQUVNLE9BQU87SUFBZSxHQUMxQztBQUVKOztDQUVDLEdBQ00sTUFBTUMsY0FBYyxDQUN6QkMsaUJBQ0FDO0lBRUEsSUFBSUEsT0FBT0MsTUFBTSxLQUFLLEdBQUc7UUFDdkIsT0FBT0Y7SUFDVDtJQUVBLE9BQU9DLE9BQU9FLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQztRQUN6QixPQUFPRCxNQUFNQyxNQUFNQSxLQUFLO0lBQzFCLEdBQUdMO0FBQ0wsRUFBRTtBQUVGOztDQUVDLEdBQ00sTUFBTU0sa0JBQWtCLENBQzdCTixpQkFDQUM7SUFFQSxNQUFNTSxZQUFZTixPQUFPQyxNQUFNLEdBQUc7SUFDbEMsTUFBTU0sVUFBVVQsWUFBWUMsaUJBQWlCQztJQUU3QyxPQUFPO1FBQ0xPO1FBQ0FEO1FBQ0FFLFlBQVlSLE9BQU9DLE1BQU07SUFDM0I7QUFDRixFQUFFO0FBRUY7O0NBRUMsR0FDTSxNQUFNUSxnQkFBZ0JwQiw2REFBT0EsQ0FDbENELDhDQUFNQSxDQUFDSSxZQUFZLENBQUNDLE1BQU0sR0FBR0UsT0FBTyxDQUFDLGtCQUFrQixRQUN2RDtJQUFFRSxPQUFPO0FBQXdCLEdBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hY29uZGEtYXNzZXNtZW50LTEvLi9zcmMvc2NoZW1hL3F1ZXJpZXMvb3V0cHV0RGVsdGFzLnRzP2EwOGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGFibGVzIH0gZnJvbSBcIi4uL3RhYmxlcy50c1wiO1xuaW1wb3J0IHsgcXVlcnlEYiB9IGZyb20gXCJAbGl2ZXN0b3JlL2xpdmVzdG9yZVwiO1xuXG5pbnRlcmZhY2UgT3V0cHV0RGVsdGEge1xuICBpZDogc3RyaW5nO1xuICBvdXRwdXRJZDogc3RyaW5nO1xuICBkZWx0YTogc3RyaW5nO1xuICBzZXF1ZW5jZU51bWJlcjogbnVtYmVyO1xufVxuXG4vKipcbiAqIFF1ZXJ5IGRlbHRhcyBmb3IgYSBnaXZlbiBvdXRwdXQgSUQsIHNvcnRlZCBieSBzZXF1ZW5jZSBudW1iZXJcbiAqL1xuZXhwb3J0IGNvbnN0IG91dHB1dERlbHRhc1F1ZXJ5ID0gKG91dHB1dElkOiBzdHJpbmcpID0+XG4gIHF1ZXJ5RGIoXG4gICAgdGFibGVzLm91dHB1dERlbHRhc1xuICAgICAgLnNlbGVjdCgpXG4gICAgICAud2hlcmUoeyBvdXRwdXRJZCB9KVxuICAgICAgLm9yZGVyQnkoXCJzZXF1ZW5jZU51bWJlclwiLCBcImFzY1wiKSxcbiAgICB7IGRlcHM6IFtvdXRwdXRJZF0sIGxhYmVsOiBcIm91dHB1dERlbHRhc1wiIH0sXG4gICk7XG5cbi8qKlxuICogQXBwbHkgZGVsdGFzIHRvIG9yaWdpbmFsIGNvbnRlbnQgaW4gc2VxdWVuY2Ugb3JkZXJcbiAqL1xuZXhwb3J0IGNvbnN0IGFwcGx5RGVsdGFzID0gKFxuICBvcmlnaW5hbENvbnRlbnQ6IHN0cmluZyxcbiAgZGVsdGFzOiByZWFkb25seSBPdXRwdXREZWx0YVtdLFxuKTogc3RyaW5nID0+IHtcbiAgaWYgKGRlbHRhcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gb3JpZ2luYWxDb250ZW50O1xuICB9XG5cbiAgcmV0dXJuIGRlbHRhcy5yZWR1Y2UoKGFjYywgZGVsdGEpID0+IHtcbiAgICByZXR1cm4gYWNjICsgZGVsdGEuZGVsdGE7XG4gIH0sIG9yaWdpbmFsQ29udGVudCk7XG59O1xuXG4vKipcbiAqIEdldCBmaW5hbCBjb250ZW50IHdpdGggZGVsdGFzIGFwcGxpZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGdldEZpbmFsQ29udGVudCA9IChcbiAgb3JpZ2luYWxDb250ZW50OiBzdHJpbmcsXG4gIGRlbHRhczogcmVhZG9ubHkgT3V0cHV0RGVsdGFbXSxcbik6IHsgY29udGVudDogc3RyaW5nOyBoYXNEZWx0YXM6IGJvb2xlYW47IGRlbHRhQ291bnQ6IG51bWJlciB9ID0+IHtcbiAgY29uc3QgaGFzRGVsdGFzID0gZGVsdGFzLmxlbmd0aCA+IDA7XG4gIGNvbnN0IGNvbnRlbnQgPSBhcHBseURlbHRhcyhvcmlnaW5hbENvbnRlbnQsIGRlbHRhcyk7XG5cbiAgcmV0dXJuIHtcbiAgICBjb250ZW50LFxuICAgIGhhc0RlbHRhcyxcbiAgICBkZWx0YUNvdW50OiBkZWx0YXMubGVuZ3RoLFxuICB9O1xufTtcblxuLyoqXG4gKiBRdWVyeSBhbGwgb3V0cHV0IGRlbHRhcywgc29ydGVkIGJ5IHNlcXVlbmNlIG51bWJlclxuICovXG5leHBvcnQgY29uc3Qgb3V0cHV0RGVsdGFzJCA9IHF1ZXJ5RGIoXG4gIHRhYmxlcy5vdXRwdXREZWx0YXMuc2VsZWN0KCkub3JkZXJCeShcInNlcXVlbmNlTnVtYmVyXCIsIFwiYXNjXCIpLFxuICB7IGxhYmVsOiBcIm5vdGVib29rLm91dHB1dERlbHRhc1wiIH0sXG4pO1xuIl0sIm5hbWVzIjpbInRhYmxlcyIsInF1ZXJ5RGIiLCJvdXRwdXREZWx0YXNRdWVyeSIsIm91dHB1dElkIiwib3V0cHV0RGVsdGFzIiwic2VsZWN0Iiwid2hlcmUiLCJvcmRlckJ5IiwiZGVwcyIsImxhYmVsIiwiYXBwbHlEZWx0YXMiLCJvcmlnaW5hbENvbnRlbnQiLCJkZWx0YXMiLCJsZW5ndGgiLCJyZWR1Y2UiLCJhY2MiLCJkZWx0YSIsImdldEZpbmFsQ29udGVudCIsImhhc0RlbHRhcyIsImNvbnRlbnQiLCJkZWx0YUNvdW50Iiwib3V0cHV0RGVsdGFzJCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/schema/queries/outputDeltas.ts\n");

/***/ }),

/***/ "(rsc)/./src/schema/tables.ts":
/*!******************************!*\
  !*** ./src/schema/tables.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tables: () => (/* binding */ tables)\n/* harmony export */ });\n/* harmony import */ var _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @livestore/livestore */ \"(rsc)/./src/node_modules/@livestore/common/dist/schema/state/sqlite/table-def.js\");\n/* harmony import */ var _livestore_livestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @livestore/livestore */ \"(rsc)/./src/node_modules/effect/dist/esm/Schema.js\");\n/* harmony import */ var _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @livestore/livestore */ \"(rsc)/./src/node_modules/@livestore/common/dist/schema/state/sqlite/client-document-def.js\");\n/* harmony import */ var _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @livestore/livestore */ \"(rsc)/./src/node_modules/@livestore/common/dist/adapter-types.js\");\n/* harmony import */ var _types_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.ts */ \"(rsc)/./src/schema/types.ts\");\n\n\nconst tables = {\n    debug: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.table({\n        name: \"debug\",\n        columns: {\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                primaryKey: true\n            }),\n            // Update column name or value to test schema changes\n            version: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                default: \"1\"\n            })\n        }\n    }),\n    presence: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.table({\n        name: \"presence\",\n        columns: {\n            userId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                primaryKey: true\n            }),\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                nullable: true\n            })\n        }\n    }),\n    // Notebook metadata (key-value pairs per store)\n    notebookMetadata: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.table({\n        name: \"notebookMetadata\",\n        columns: {\n            key: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                primaryKey: true\n            }),\n            value: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text()\n        }\n    }),\n    cells: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.table({\n        name: \"cells\",\n        columns: {\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                primaryKey: true\n            }),\n            cellType: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                schema: _types_ts__WEBPACK_IMPORTED_MODULE_0__.CellTypeSchema\n            }),\n            source: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                default: \"\"\n            }),\n            fractionalIndex: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                nullable: true\n            }),\n            // Execution state\n            executionCount: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.integer({\n                nullable: true\n            }),\n            executionState: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                default: \"idle\",\n                schema: _types_ts__WEBPACK_IMPORTED_MODULE_0__.ExecutionStateSchema\n            }),\n            assignedRuntimeSession: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                nullable: true\n            }),\n            lastExecutionDurationMs: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.integer({\n                nullable: true\n            }),\n            // SQL-specific fields\n            sqlConnectionId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                nullable: true\n            }),\n            sqlResultVariable: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                nullable: true\n            }),\n            // AI-specific fields\n            aiProvider: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                nullable: true\n            }),\n            aiModel: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                nullable: true\n            }),\n            aiSettings: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.json({\n                nullable: true,\n                schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_2__.Any\n            }),\n            // Display visibility controls\n            sourceVisible: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.boolean({\n                default: true\n            }),\n            outputVisible: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.boolean({\n                default: true\n            }),\n            aiContextVisible: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.boolean({\n                default: true\n            }),\n            createdBy: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text()\n        }\n    }),\n    outputDeltas: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.table({\n        name: \"output_deltas\",\n        columns: {\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                primaryKey: true\n            }),\n            outputId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text(),\n            delta: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                default: \"\"\n            }),\n            sequenceNumber: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.integer()\n        }\n    }),\n    outputs: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.table({\n        name: \"outputs\",\n        columns: {\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                primaryKey: true\n            }),\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text(),\n            outputType: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                schema: _types_ts__WEBPACK_IMPORTED_MODULE_0__.OutputTypeSchema\n            }),\n            position: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.real(),\n            // Type-specific fields\n            streamName: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                nullable: true\n            }),\n            executionCount: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.integer({\n                nullable: true\n            }),\n            displayId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                nullable: true\n            }),\n            // Flattened content for SQL operations\n            data: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                nullable: true\n            }),\n            artifactId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                nullable: true\n            }),\n            mimeType: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                nullable: true\n            }),\n            metadata: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.json({\n                nullable: true,\n                schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_2__.Any\n            }),\n            // Multi-media support\n            representations: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.json({\n                nullable: true,\n                schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_2__.Record({\n                    key: _livestore_livestore__WEBPACK_IMPORTED_MODULE_2__.String,\n                    value: _types_ts__WEBPACK_IMPORTED_MODULE_0__.MediaRepresentationSchema\n                })\n            })\n        }\n    }),\n    // Pending clears table for clear_output(wait=True) support\n    pendingClears: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.table({\n        name: \"pendingClears\",\n        columns: {\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                primaryKey: true\n            }),\n            clearedBy: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text()\n        }\n    }),\n    // Runtime lifecycle management\n    // NOTE: Each notebook should have exactly ONE active runtime at a time\n    // Multiple entries only exist during runtime transitions/handoffs\n    runtimeSessions: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.table({\n        name: \"runtimeSessions\",\n        columns: {\n            sessionId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                primaryKey: true\n            }),\n            runtimeId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text(),\n            runtimeType: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                default: \"python3\"\n            }),\n            status: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                schema: _types_ts__WEBPACK_IMPORTED_MODULE_0__.RuntimeStatusSchema\n            }),\n            isActive: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.boolean({\n                default: true\n            }),\n            // Capability flags\n            canExecuteCode: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.boolean({\n                default: false\n            }),\n            canExecuteSql: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.boolean({\n                default: false\n            }),\n            canExecuteAi: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.boolean({\n                default: false\n            }),\n            availableAiModels: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.json({\n                nullable: true,\n                schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_2__.Any\n            })\n        }\n    }),\n    // Execution queue - tracks work that needs to be done\n    executionQueue: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.table({\n        name: \"executionQueue\",\n        columns: {\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                primaryKey: true\n            }),\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text(),\n            executionCount: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.integer(),\n            requestedBy: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text(),\n            // Queue management\n            status: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                default: \"pending\",\n                schema: _types_ts__WEBPACK_IMPORTED_MODULE_0__.QueueStatusSchema\n            }),\n            assignedRuntimeSession: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                nullable: true\n            }),\n            // Execution timing\n            startedAt: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.datetime({\n                nullable: true\n            }),\n            completedAt: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.datetime({\n                nullable: true\n            }),\n            executionDurationMs: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.integer({\n                nullable: true\n            })\n        }\n    }),\n    // UI state for each user\n    uiState: _livestore_livestore__WEBPACK_IMPORTED_MODULE_3__.clientDocument({\n        name: \"uiState\",\n        schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_2__.Struct({\n            selectedCellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_2__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_2__.String),\n            editingCellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_2__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_2__.String),\n            runtimeStatus: _livestore_livestore__WEBPACK_IMPORTED_MODULE_2__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_2__.String)\n        }),\n        default: {\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_4__.SessionIdSymbol,\n            value: {}\n        }\n    }),\n    // Actors table for tracking who/what performs actions\n    actors: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.table({\n        name: \"actors\",\n        columns: {\n            id: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                primaryKey: true\n            }),\n            type: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text(),\n            displayName: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text(),\n            avatar: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                nullable: true\n            })\n        }\n    }),\n    // Tool approvals for AI tool calls\n    toolApprovals: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.table({\n        name: \"toolApprovals\",\n        columns: {\n            toolCallId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                primaryKey: true\n            }),\n            cellId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text(),\n            toolName: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text(),\n            status: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                schema: _livestore_livestore__WEBPACK_IMPORTED_MODULE_2__.Literal(\"pending\", \"approved_once\", \"approved_always\", \"denied\")\n            }),\n            approvedBy: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.text({\n                nullable: true\n            }),\n            requestedAt: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.datetime(),\n            respondedAt: _livestore_livestore__WEBPACK_IMPORTED_MODULE_1__.datetime({\n                nullable: true\n            })\n        }\n    })\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/schema/tables.ts\n");

/***/ }),

/***/ "(rsc)/./src/schema/types.ts":
/*!*****************************!*\
  !*** ./src/schema/types.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AI_TOOL_MIME_TYPES: () => (/* binding */ AI_TOOL_MIME_TYPES),\n/* harmony export */   APPLICATION_MIME_TYPES: () => (/* binding */ APPLICATION_MIME_TYPES),\n/* harmony export */   ActorTypeSchema: () => (/* binding */ ActorTypeSchema),\n/* harmony export */   CellTypeSchema: () => (/* binding */ CellTypeSchema),\n/* harmony export */   ExecutionStateSchema: () => (/* binding */ ExecutionStateSchema),\n/* harmony export */   IMAGE_MIME_TYPES: () => (/* binding */ IMAGE_MIME_TYPES),\n/* harmony export */   JUPYTER_MIME_TYPES: () => (/* binding */ JUPYTER_MIME_TYPES),\n/* harmony export */   KNOWN_MIME_TYPES: () => (/* binding */ KNOWN_MIME_TYPES),\n/* harmony export */   MediaRepresentationSchema: () => (/* binding */ MediaRepresentationSchema),\n/* harmony export */   OutputTypeSchema: () => (/* binding */ OutputTypeSchema),\n/* harmony export */   QueueStatusSchema: () => (/* binding */ QueueStatusSchema),\n/* harmony export */   RuntimeStatusSchema: () => (/* binding */ RuntimeStatusSchema),\n/* harmony export */   TEXT_MIME_TYPES: () => (/* binding */ TEXT_MIME_TYPES),\n/* harmony export */   isAiToolMimeType: () => (/* binding */ isAiToolMimeType),\n/* harmony export */   isApplicationMimeType: () => (/* binding */ isApplicationMimeType),\n/* harmony export */   isImageMimeType: () => (/* binding */ isImageMimeType),\n/* harmony export */   isJsonMimeType: () => (/* binding */ isJsonMimeType),\n/* harmony export */   isJupyterMimeType: () => (/* binding */ isJupyterMimeType),\n/* harmony export */   isKnownMimeType: () => (/* binding */ isKnownMimeType),\n/* harmony export */   isTextBasedMimeType: () => (/* binding */ isTextBasedMimeType),\n/* harmony export */   isTextMimeType: () => (/* binding */ isTextMimeType)\n/* harmony export */ });\n/* harmony import */ var _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @livestore/livestore */ \"(rsc)/./src/node_modules/effect/dist/esm/Schema.js\");\n\n// Media representation schema for unified output system - defined first for use in events\nconst MediaRepresentationSchema = _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Union(_livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    type: _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Literal(\"inline\"),\n    data: _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Any,\n    metadata: _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Record({\n        key: _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.String,\n        value: _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Any\n    }))\n}), _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    type: _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Literal(\"artifact\"),\n    artifactId: _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.String,\n    metadata: _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.optional(_livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Record({\n        key: _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.String,\n        value: _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Any\n    }))\n}));\n// Schema for cell type validation\nconst CellTypeSchema = _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Literal(\"code\", \"markdown\", \"sql\", \"raw\", \"ai\");\nconst ExecutionStateSchema = _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Literal(\"idle\", \"queued\", \"running\", \"completed\", \"error\");\nconst OutputTypeSchema = _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Literal(\"multimedia_display\", \"multimedia_result\", \"terminal\", \"markdown\", \"error\");\nconst RuntimeStatusSchema = _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Literal(\"starting\", \"ready\", \"busy\", \"restarting\", \"terminated\");\nconst QueueStatusSchema = _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Literal(\"pending\", \"assigned\", \"executing\", \"completed\", \"failed\", \"cancelled\");\nconst ActorTypeSchema = _livestore_livestore__WEBPACK_IMPORTED_MODULE_0__.Literal(\"human\", \"runtime_agent\");\n// MIME type constants - core definitions used across frontend and backend\nconst TEXT_MIME_TYPES = [\n    \"text/plain\",\n    \"text/html\",\n    \"text/markdown\",\n    \"text/latex\"\n];\nconst APPLICATION_MIME_TYPES = [\n    \"application/json\",\n    \"application/javascript\"\n];\nconst AI_TOOL_MIME_TYPES = [\n    \"application/vnd.anode.aitool+json\",\n    \"application/vnd.anode.aitool.result+json\"\n];\nconst IMAGE_MIME_TYPES = [\n    \"image/png\",\n    \"image/jpeg\",\n    \"image/svg+xml\",\n    \"image/gif\"\n];\nconst JUPYTER_MIME_TYPES = [\n    \"application/vnd.jupyter.widget-state+json\",\n    \"application/vnd.jupyter.widget-view+json\",\n    \"application/vnd.plotly.v1+json\",\n    \"application/vnd.dataresource+json\",\n    \"application/vnd.vegalite.v2+json\",\n    \"application/vnd.vegalite.v3+json\",\n    \"application/vnd.vegalite.v4+json\",\n    \"application/vnd.vegalite.v5+json\",\n    \"application/vnd.vegalite.v6+json\",\n    \"application/vnd.vega.v3+json\",\n    \"application/vnd.vega.v4+json\",\n    \"application/vnd.vega.v5+json\",\n    \"application/geo+json\",\n    \"application/vdom.v1+json\"\n];\nconst KNOWN_MIME_TYPES = [\n    ...TEXT_MIME_TYPES,\n    ...APPLICATION_MIME_TYPES,\n    ...IMAGE_MIME_TYPES,\n    ...JUPYTER_MIME_TYPES,\n    ...AI_TOOL_MIME_TYPES\n];\n/**\n * Type guard to check if a MIME type is a known text format\n */ function isTextMimeType(mimeType) {\n    return TEXT_MIME_TYPES.includes(mimeType);\n}\n/**\n * Type guard to check if a MIME type is a known application format\n */ function isApplicationMimeType(mimeType) {\n    return APPLICATION_MIME_TYPES.includes(mimeType);\n}\n/**\n * Type guard to check if a MIME type is a known image format\n */ function isImageMimeType(mimeType) {\n    return IMAGE_MIME_TYPES.includes(mimeType);\n}\n/**\n * Type guard to check if a MIME type is a Jupyter vendor format\n */ function isJupyterMimeType(mimeType) {\n    return JUPYTER_MIME_TYPES.includes(mimeType);\n}\n/**\n * Type guard to check if a MIME type is an AI tool format\n */ function isAiToolMimeType(mimeType) {\n    return AI_TOOL_MIME_TYPES.includes(mimeType);\n}\n/**\n * Type guard to check if a MIME type is any known format\n */ function isKnownMimeType(mimeType) {\n    return KNOWN_MIME_TYPES.includes(mimeType);\n}\n/**\n * Check if a MIME type is a JSON-based format (ends with +json)\n */ function isJsonMimeType(mimeType) {\n    return mimeType.endsWith(\"+json\") || mimeType === \"application/json\";\n}\n/**\n * Check if a MIME type appears to be text-based\n */ function isTextBasedMimeType(mimeType) {\n    return mimeType.startsWith(\"text/\") || mimeType === \"application/javascript\" || mimeType === \"image/svg+xml\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/schema/types.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/effect","vendor-chunks/fast-check","vendor-chunks/@livestore","vendor-chunks/next","vendor-chunks/pure-rand","vendor-chunks/@opentelemetry","vendor-chunks/uuid","vendor-chunks/@effect","vendor-chunks/pretty-bytes"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fimport%2Froute&page=%2Fapi%2Fimport%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimport%2Froute.ts&appDir=%2FUsers%2Fsymbosrisai%2FDocuments%2Fanaconda-assesment-1%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsymbosrisai%2FDocuments%2Fanaconda-assesment-1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();