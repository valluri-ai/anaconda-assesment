"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@opentelemetry";
exports.ids = ["vendor-chunks/@opentelemetry"];
exports.modules = {

/***/ "(rsc)/./src/node_modules/@opentelemetry/core/build/esm/platform/node/sdk-info.js":
/*!**********************************************************************************!*\
  !*** ./src/node_modules/@opentelemetry/core/build/esm/platform/node/sdk-info.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SDK_INFO: () => (/* binding */ SDK_INFO)\n/* harmony export */ });\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../version */ \"(rsc)/./src/node_modules/@opentelemetry/core/build/esm/version.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/./src/node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js\");\n/* harmony import */ var _semconv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../semconv */ \"(rsc)/./src/node_modules/@opentelemetry/core/build/esm/semconv.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/** Constants describing the SDK in use */\nconst SDK_INFO = {\n    [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.ATTR_TELEMETRY_SDK_NAME]: 'opentelemetry',\n    [_semconv__WEBPACK_IMPORTED_MODULE_1__.ATTR_PROCESS_RUNTIME_NAME]: 'node',\n    [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.ATTR_TELEMETRY_SDK_LANGUAGE]: _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS,\n    [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.ATTR_TELEMETRY_SDK_VERSION]: _version__WEBPACK_IMPORTED_MODULE_2__.VERSION,\n};\n//# sourceMappingURL=sdk-info.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3BsYXRmb3JtL25vZGUvc2RrLWluZm8uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3QztBQUNxSTtBQUNuSDtBQUMxRDtBQUNPO0FBQ1AsS0FBSyx3RkFBdUI7QUFDNUIsS0FBSywrREFBeUI7QUFDOUIsS0FBSyw0RkFBMkIsR0FBRyxvR0FBbUM7QUFDdEUsS0FBSywyRkFBMEIsR0FBRyw2Q0FBTztBQUN6QztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hY29uZGEtYXNzZXNtZW50LTEvLi9zcmMvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3BsYXRmb3JtL25vZGUvc2RrLWluZm8uanM/MDRlYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgVkVSU0lPTiB9IGZyb20gJy4uLy4uL3ZlcnNpb24nO1xuaW1wb3J0IHsgQVRUUl9URUxFTUVUUllfU0RLX05BTUUsIEFUVFJfVEVMRU1FVFJZX1NES19MQU5HVUFHRSwgVEVMRU1FVFJZX1NES19MQU5HVUFHRV9WQUxVRV9OT0RFSlMsIEFUVFJfVEVMRU1FVFJZX1NES19WRVJTSU9OLCB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zJztcbmltcG9ydCB7IEFUVFJfUFJPQ0VTU19SVU5USU1FX05BTUUgfSBmcm9tICcuLi8uLi9zZW1jb252Jztcbi8qKiBDb25zdGFudHMgZGVzY3JpYmluZyB0aGUgU0RLIGluIHVzZSAqL1xuZXhwb3J0IGNvbnN0IFNES19JTkZPID0ge1xuICAgIFtBVFRSX1RFTEVNRVRSWV9TREtfTkFNRV06ICdvcGVudGVsZW1ldHJ5JyxcbiAgICBbQVRUUl9QUk9DRVNTX1JVTlRJTUVfTkFNRV06ICdub2RlJyxcbiAgICBbQVRUUl9URUxFTUVUUllfU0RLX0xBTkdVQUdFXTogVEVMRU1FVFJZX1NES19MQU5HVUFHRV9WQUxVRV9OT0RFSlMsXG4gICAgW0FUVFJfVEVMRU1FVFJZX1NES19WRVJTSU9OXTogVkVSU0lPTixcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZGstaW5mby5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/node_modules/@opentelemetry/core/build/esm/platform/node/sdk-info.js\n");

/***/ }),

/***/ "(rsc)/./src/node_modules/@opentelemetry/core/build/esm/semconv.js":
/*!*******************************************************************!*\
  !*** ./src/node_modules/@opentelemetry/core/build/esm/semconv.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ATTR_PROCESS_RUNTIME_NAME: () => (/* binding */ ATTR_PROCESS_RUNTIME_NAME)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n/**\n * The name of the runtime of this process.\n *\n * @example OpenJDK Runtime Environment\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nconst ATTR_PROCESS_RUNTIME_NAME = 'process.runtime.name';\n//# sourceMappingURL=semconv.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3NlbWNvbnYuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmFjb25kYS1hc3Nlc21lbnQtMS8uL3NyYy9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvY29yZS9idWlsZC9lc20vc2VtY29udi5qcz81M2NkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKlxuICogVGhpcyBmaWxlIGNvbnRhaW5zIGEgY29weSBvZiB1bnN0YWJsZSBzZW1hbnRpYyBjb252ZW50aW9uIGRlZmluaXRpb25zXG4gKiB1c2VkIGJ5IHRoaXMgcGFja2FnZS5cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMvdHJlZS9tYWluL3NlbWFudGljLWNvbnZlbnRpb25zI3Vuc3RhYmxlLXNlbWNvbnZcbiAqL1xuLyoqXG4gKiBUaGUgbmFtZSBvZiB0aGUgcnVudGltZSBvZiB0aGlzIHByb2Nlc3MuXG4gKlxuICogQGV4YW1wbGUgT3BlbkpESyBSdW50aW1lIEVudmlyb25tZW50XG4gKlxuICogQGV4cGVyaW1lbnRhbCBUaGlzIGF0dHJpYnV0ZSBpcyBleHBlcmltZW50YWwgYW5kIGlzIHN1YmplY3QgdG8gYnJlYWtpbmcgY2hhbmdlcyBpbiBtaW5vciByZWxlYXNlcyBvZiBgQG9wZW50ZWxlbWV0cnkvc2VtYW50aWMtY29udmVudGlvbnNgLlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9QUk9DRVNTX1JVTlRJTUVfTkFNRSA9ICdwcm9jZXNzLnJ1bnRpbWUubmFtZSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZW1jb252LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/node_modules/@opentelemetry/core/build/esm/semconv.js\n");

/***/ }),

/***/ "(rsc)/./src/node_modules/@opentelemetry/core/build/esm/version.js":
/*!*******************************************************************!*\
  !*** ./src/node_modules/@opentelemetry/core/build/esm/version.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nconst VERSION = '2.0.1';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2NvcmUvYnVpbGQvZXNtL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL2FuYWNvbmRhLWFzc2VzbWVudC0xLy4vc3JjL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9jb3JlL2J1aWxkL2VzbS92ZXJzaW9uLmpzP2M3OGYiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnMi4wLjEnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/node_modules/@opentelemetry/core/build/esm/version.js\n");

/***/ }),

/***/ "(rsc)/./src/node_modules/@opentelemetry/resources/build/esm/ResourceImpl.js":
/*!*****************************************************************************!*\
  !*** ./src/node_modules/@opentelemetry/resources/build/esm/ResourceImpl.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultResource: () => (/* binding */ defaultResource),\n/* harmony export */   emptyResource: () => (/* binding */ emptyResource),\n/* harmony export */   resourceFromAttributes: () => (/* binding */ resourceFromAttributes),\n/* harmony export */   resourceFromDetectedResource: () => (/* binding */ resourceFromDetectedResource)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./src/node_modules/@opentelemetry/core/build/esm/platform/node/sdk-info.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/./src/node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./platform */ \"(rsc)/./src/node_modules/@opentelemetry/resources/build/esm/platform/node/default-service-name.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"(rsc)/./src/node_modules/@opentelemetry/resources/build/esm/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nclass ResourceImpl {\n    _rawAttributes;\n    _asyncAttributesPending = false;\n    _memoizedAttributes;\n    static FromAttributeList(attributes) {\n        const res = new ResourceImpl({});\n        res._rawAttributes = guardedRawAttributes(attributes);\n        res._asyncAttributesPending =\n            attributes.filter(([_, val]) => (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isPromiseLike)(val)).length > 0;\n        return res;\n    }\n    constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    resource) {\n        const attributes = resource.attributes ?? {};\n        this._rawAttributes = Object.entries(attributes).map(([k, v]) => {\n            if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isPromiseLike)(v)) {\n                // side-effect\n                this._asyncAttributesPending = true;\n            }\n            return [k, v];\n        });\n        this._rawAttributes = guardedRawAttributes(this._rawAttributes);\n    }\n    get asyncAttributesPending() {\n        return this._asyncAttributesPending;\n    }\n    async waitForAsyncAttributes() {\n        if (!this.asyncAttributesPending) {\n            return;\n        }\n        for (let i = 0; i < this._rawAttributes.length; i++) {\n            const [k, v] = this._rawAttributes[i];\n            this._rawAttributes[i] = [k, (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isPromiseLike)(v) ? await v : v];\n        }\n        this._asyncAttributesPending = false;\n    }\n    get attributes() {\n        if (this.asyncAttributesPending) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error('Accessing resource attributes before async attributes settled');\n        }\n        if (this._memoizedAttributes) {\n            return this._memoizedAttributes;\n        }\n        const attrs = {};\n        for (const [k, v] of this._rawAttributes) {\n            if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isPromiseLike)(v)) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug(`Unsettled resource attribute ${k} skipped`);\n                continue;\n            }\n            if (v != null) {\n                attrs[k] ??= v;\n            }\n        }\n        // only memoize output if all attributes are settled\n        if (!this._asyncAttributesPending) {\n            this._memoizedAttributes = attrs;\n        }\n        return attrs;\n    }\n    getRawAttributes() {\n        return this._rawAttributes;\n    }\n    merge(resource) {\n        if (resource == null)\n            return this;\n        // Order is important\n        // Spec states incoming attributes override existing attributes\n        return ResourceImpl.FromAttributeList([\n            ...resource.getRawAttributes(),\n            ...this.getRawAttributes(),\n        ]);\n    }\n}\nfunction resourceFromAttributes(attributes) {\n    return ResourceImpl.FromAttributeList(Object.entries(attributes));\n}\nfunction resourceFromDetectedResource(detectedResource) {\n    return new ResourceImpl(detectedResource);\n}\nfunction emptyResource() {\n    return resourceFromAttributes({});\n}\nfunction defaultResource() {\n    return resourceFromAttributes({\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.ATTR_SERVICE_NAME]: (0,_platform__WEBPACK_IMPORTED_MODULE_3__.defaultServiceName)(),\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.ATTR_TELEMETRY_SDK_LANGUAGE]: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.ATTR_TELEMETRY_SDK_LANGUAGE],\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.ATTR_TELEMETRY_SDK_NAME]: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.ATTR_TELEMETRY_SDK_NAME],\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.ATTR_TELEMETRY_SDK_VERSION]: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.ATTR_TELEMETRY_SDK_VERSION],\n    });\n}\nfunction guardedRawAttributes(attributes) {\n    return attributes.map(([k, v]) => {\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isPromiseLike)(v)) {\n            return [\n                k,\n                v.catch(err => {\n                    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug('promise rejection for resource attribute: %s - %s', k, err);\n                    return undefined;\n                }),\n            ];\n        }\n        return [k, v];\n    });\n}\n//# sourceMappingURL=ResourceImpl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/node_modules/@opentelemetry/resources/build/esm/ResourceImpl.js\n");

/***/ }),

/***/ "(rsc)/./src/node_modules/@opentelemetry/resources/build/esm/platform/node/default-service-name.js":
/*!***************************************************************************************************!*\
  !*** ./src/node_modules/@opentelemetry/resources/build/esm/platform/node/default-service-name.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultServiceName: () => (/* binding */ defaultServiceName)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction defaultServiceName() {\n    return `unknown_service:${process.argv0}`;\n}\n//# sourceMappingURL=default-service-name.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vcGxhdGZvcm0vbm9kZS9kZWZhdWx0LXNlcnZpY2UtbmFtZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCw4QkFBOEIsY0FBYztBQUM1QztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hY29uZGEtYXNzZXNtZW50LTEvLi9zcmMvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vcGxhdGZvcm0vbm9kZS9kZWZhdWx0LXNlcnZpY2UtbmFtZS5qcz81YjI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFNlcnZpY2VOYW1lKCkge1xuICAgIHJldHVybiBgdW5rbm93bl9zZXJ2aWNlOiR7cHJvY2Vzcy5hcmd2MH1gO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdC1zZXJ2aWNlLW5hbWUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/node_modules/@opentelemetry/resources/build/esm/platform/node/default-service-name.js\n");

/***/ }),

/***/ "(rsc)/./src/node_modules/@opentelemetry/resources/build/esm/utils.js":
/*!**********************************************************************!*\
  !*** ./src/node_modules/@opentelemetry/resources/build/esm/utils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   isPromiseLike: () => (/* binding */ isPromiseLike)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst isPromiseLike = (val) => {\n    return (val !== null &&\n        typeof val === 'object' &&\n        typeof val.then === 'function');\n};\nfunction identity(_) {\n    return _;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcy9idWlsZC9lc20vdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmFjb25kYS1hc3Nlc21lbnQtMS8uL3NyYy9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvcmVzb3VyY2VzL2J1aWxkL2VzbS91dGlscy5qcz8xYWViIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5leHBvcnQgY29uc3QgaXNQcm9taXNlTGlrZSA9ICh2YWwpID0+IHtcbiAgICByZXR1cm4gKHZhbCAhPT0gbnVsbCAmJlxuICAgICAgICB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJlxuICAgICAgICB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbicpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShfKSB7XG4gICAgcmV0dXJuIF87XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/node_modules/@opentelemetry/resources/build/esm/utils.js\n");

/***/ }),

/***/ "(rsc)/./src/node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js":
/*!******************************************************************************************!*\
  !*** ./src/node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createConstMap: () => (/* binding */ createConstMap)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Creates a const map from the given values\n * @param values - An array of values to be used as keys and values in the map.\n * @returns A populated version of the map with the values and keys derived from the values.\n */\n/*#__NO_SIDE_EFFECTS__*/\nfunction createConstMap(values) {\n    // eslint-disable-next-line prefer-const, @typescript-eslint/no-explicit-any\n    let res = {};\n    const len = values.length;\n    for (let lp = 0; lp < len; lp++) {\n        const val = values[lp];\n        if (val) {\n            res[String(val).toUpperCase().replace(/[-.]/g, '_')] = val;\n        }\n    }\n    return res;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zL2J1aWxkL2VzbS9pbnRlcm5hbC91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsVUFBVTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hY29uZGEtYXNzZXNtZW50LTEvLi9zcmMvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zL2J1aWxkL2VzbS9pbnRlcm5hbC91dGlscy5qcz83Yzc1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIENyZWF0ZXMgYSBjb25zdCBtYXAgZnJvbSB0aGUgZ2l2ZW4gdmFsdWVzXG4gKiBAcGFyYW0gdmFsdWVzIC0gQW4gYXJyYXkgb2YgdmFsdWVzIHRvIGJlIHVzZWQgYXMga2V5cyBhbmQgdmFsdWVzIGluIHRoZSBtYXAuXG4gKiBAcmV0dXJucyBBIHBvcHVsYXRlZCB2ZXJzaW9uIG9mIHRoZSBtYXAgd2l0aCB0aGUgdmFsdWVzIGFuZCBrZXlzIGRlcml2ZWQgZnJvbSB0aGUgdmFsdWVzLlxuICovXG4vKiNfX05PX1NJREVfRUZGRUNUU19fKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25zdE1hcCh2YWx1ZXMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWNvbnN0LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgbGV0IHJlcyA9IHt9O1xuICAgIGNvbnN0IGxlbiA9IHZhbHVlcy5sZW5ndGg7XG4gICAgZm9yIChsZXQgbHAgPSAwOyBscCA8IGxlbjsgbHArKykge1xuICAgICAgICBjb25zdCB2YWwgPSB2YWx1ZXNbbHBdO1xuICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICByZXNbU3RyaW5nKHZhbCkudG9VcHBlckNhc2UoKS5yZXBsYWNlKC9bLS5dL2csICdfJyldID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js\n");

/***/ }),

/***/ "(rsc)/./src/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js":
/*!***************************************************************************************************************!*\
  !*** ./src/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AWSECSLAUNCHTYPEVALUES_EC2: () => (/* binding */ AWSECSLAUNCHTYPEVALUES_EC2),\n/* harmony export */   AWSECSLAUNCHTYPEVALUES_FARGATE: () => (/* binding */ AWSECSLAUNCHTYPEVALUES_FARGATE),\n/* harmony export */   AwsEcsLaunchtypeValues: () => (/* binding */ AwsEcsLaunchtypeValues),\n/* harmony export */   CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS: () => (/* binding */ CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS),\n/* harmony export */   CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC: () => (/* binding */ CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_EC2: () => (/* binding */ CLOUDPLATFORMVALUES_AWS_EC2),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_ECS: () => (/* binding */ CLOUDPLATFORMVALUES_AWS_ECS),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_EKS: () => (/* binding */ CLOUDPLATFORMVALUES_AWS_EKS),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK: () => (/* binding */ CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK),\n/* harmony export */   CLOUDPLATFORMVALUES_AWS_LAMBDA: () => (/* binding */ CLOUDPLATFORMVALUES_AWS_LAMBDA),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_AKS: () => (/* binding */ CLOUDPLATFORMVALUES_AZURE_AKS),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_APP_SERVICE: () => (/* binding */ CLOUDPLATFORMVALUES_AZURE_APP_SERVICE),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES: () => (/* binding */ CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_FUNCTIONS: () => (/* binding */ CLOUDPLATFORMVALUES_AZURE_FUNCTIONS),\n/* harmony export */   CLOUDPLATFORMVALUES_AZURE_VM: () => (/* binding */ CLOUDPLATFORMVALUES_AZURE_VM),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_APP_ENGINE: () => (/* binding */ CLOUDPLATFORMVALUES_GCP_APP_ENGINE),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS: () => (/* binding */ CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_CLOUD_RUN: () => (/* binding */ CLOUDPLATFORMVALUES_GCP_CLOUD_RUN),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE: () => (/* binding */ CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE),\n/* harmony export */   CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE: () => (/* binding */ CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE),\n/* harmony export */   CLOUDPROVIDERVALUES_ALIBABA_CLOUD: () => (/* binding */ CLOUDPROVIDERVALUES_ALIBABA_CLOUD),\n/* harmony export */   CLOUDPROVIDERVALUES_AWS: () => (/* binding */ CLOUDPROVIDERVALUES_AWS),\n/* harmony export */   CLOUDPROVIDERVALUES_AZURE: () => (/* binding */ CLOUDPROVIDERVALUES_AZURE),\n/* harmony export */   CLOUDPROVIDERVALUES_GCP: () => (/* binding */ CLOUDPROVIDERVALUES_GCP),\n/* harmony export */   CloudPlatformValues: () => (/* binding */ CloudPlatformValues),\n/* harmony export */   CloudProviderValues: () => (/* binding */ CloudProviderValues),\n/* harmony export */   HOSTARCHVALUES_AMD64: () => (/* binding */ HOSTARCHVALUES_AMD64),\n/* harmony export */   HOSTARCHVALUES_ARM32: () => (/* binding */ HOSTARCHVALUES_ARM32),\n/* harmony export */   HOSTARCHVALUES_ARM64: () => (/* binding */ HOSTARCHVALUES_ARM64),\n/* harmony export */   HOSTARCHVALUES_IA64: () => (/* binding */ HOSTARCHVALUES_IA64),\n/* harmony export */   HOSTARCHVALUES_PPC32: () => (/* binding */ HOSTARCHVALUES_PPC32),\n/* harmony export */   HOSTARCHVALUES_PPC64: () => (/* binding */ HOSTARCHVALUES_PPC64),\n/* harmony export */   HOSTARCHVALUES_X86: () => (/* binding */ HOSTARCHVALUES_X86),\n/* harmony export */   HostArchValues: () => (/* binding */ HostArchValues),\n/* harmony export */   OSTYPEVALUES_AIX: () => (/* binding */ OSTYPEVALUES_AIX),\n/* harmony export */   OSTYPEVALUES_DARWIN: () => (/* binding */ OSTYPEVALUES_DARWIN),\n/* harmony export */   OSTYPEVALUES_DRAGONFLYBSD: () => (/* binding */ OSTYPEVALUES_DRAGONFLYBSD),\n/* harmony export */   OSTYPEVALUES_FREEBSD: () => (/* binding */ OSTYPEVALUES_FREEBSD),\n/* harmony export */   OSTYPEVALUES_HPUX: () => (/* binding */ OSTYPEVALUES_HPUX),\n/* harmony export */   OSTYPEVALUES_LINUX: () => (/* binding */ OSTYPEVALUES_LINUX),\n/* harmony export */   OSTYPEVALUES_NETBSD: () => (/* binding */ OSTYPEVALUES_NETBSD),\n/* harmony export */   OSTYPEVALUES_OPENBSD: () => (/* binding */ OSTYPEVALUES_OPENBSD),\n/* harmony export */   OSTYPEVALUES_SOLARIS: () => (/* binding */ OSTYPEVALUES_SOLARIS),\n/* harmony export */   OSTYPEVALUES_WINDOWS: () => (/* binding */ OSTYPEVALUES_WINDOWS),\n/* harmony export */   OSTYPEVALUES_Z_OS: () => (/* binding */ OSTYPEVALUES_Z_OS),\n/* harmony export */   OsTypeValues: () => (/* binding */ OsTypeValues),\n/* harmony export */   SEMRESATTRS_AWS_ECS_CLUSTER_ARN: () => (/* binding */ SEMRESATTRS_AWS_ECS_CLUSTER_ARN),\n/* harmony export */   SEMRESATTRS_AWS_ECS_CONTAINER_ARN: () => (/* binding */ SEMRESATTRS_AWS_ECS_CONTAINER_ARN),\n/* harmony export */   SEMRESATTRS_AWS_ECS_LAUNCHTYPE: () => (/* binding */ SEMRESATTRS_AWS_ECS_LAUNCHTYPE),\n/* harmony export */   SEMRESATTRS_AWS_ECS_TASK_ARN: () => (/* binding */ SEMRESATTRS_AWS_ECS_TASK_ARN),\n/* harmony export */   SEMRESATTRS_AWS_ECS_TASK_FAMILY: () => (/* binding */ SEMRESATTRS_AWS_ECS_TASK_FAMILY),\n/* harmony export */   SEMRESATTRS_AWS_ECS_TASK_REVISION: () => (/* binding */ SEMRESATTRS_AWS_ECS_TASK_REVISION),\n/* harmony export */   SEMRESATTRS_AWS_EKS_CLUSTER_ARN: () => (/* binding */ SEMRESATTRS_AWS_EKS_CLUSTER_ARN),\n/* harmony export */   SEMRESATTRS_AWS_LOG_GROUP_ARNS: () => (/* binding */ SEMRESATTRS_AWS_LOG_GROUP_ARNS),\n/* harmony export */   SEMRESATTRS_AWS_LOG_GROUP_NAMES: () => (/* binding */ SEMRESATTRS_AWS_LOG_GROUP_NAMES),\n/* harmony export */   SEMRESATTRS_AWS_LOG_STREAM_ARNS: () => (/* binding */ SEMRESATTRS_AWS_LOG_STREAM_ARNS),\n/* harmony export */   SEMRESATTRS_AWS_LOG_STREAM_NAMES: () => (/* binding */ SEMRESATTRS_AWS_LOG_STREAM_NAMES),\n/* harmony export */   SEMRESATTRS_CLOUD_ACCOUNT_ID: () => (/* binding */ SEMRESATTRS_CLOUD_ACCOUNT_ID),\n/* harmony export */   SEMRESATTRS_CLOUD_AVAILABILITY_ZONE: () => (/* binding */ SEMRESATTRS_CLOUD_AVAILABILITY_ZONE),\n/* harmony export */   SEMRESATTRS_CLOUD_PLATFORM: () => (/* binding */ SEMRESATTRS_CLOUD_PLATFORM),\n/* harmony export */   SEMRESATTRS_CLOUD_PROVIDER: () => (/* binding */ SEMRESATTRS_CLOUD_PROVIDER),\n/* harmony export */   SEMRESATTRS_CLOUD_REGION: () => (/* binding */ SEMRESATTRS_CLOUD_REGION),\n/* harmony export */   SEMRESATTRS_CONTAINER_ID: () => (/* binding */ SEMRESATTRS_CONTAINER_ID),\n/* harmony export */   SEMRESATTRS_CONTAINER_IMAGE_NAME: () => (/* binding */ SEMRESATTRS_CONTAINER_IMAGE_NAME),\n/* harmony export */   SEMRESATTRS_CONTAINER_IMAGE_TAG: () => (/* binding */ SEMRESATTRS_CONTAINER_IMAGE_TAG),\n/* harmony export */   SEMRESATTRS_CONTAINER_NAME: () => (/* binding */ SEMRESATTRS_CONTAINER_NAME),\n/* harmony export */   SEMRESATTRS_CONTAINER_RUNTIME: () => (/* binding */ SEMRESATTRS_CONTAINER_RUNTIME),\n/* harmony export */   SEMRESATTRS_DEPLOYMENT_ENVIRONMENT: () => (/* binding */ SEMRESATTRS_DEPLOYMENT_ENVIRONMENT),\n/* harmony export */   SEMRESATTRS_DEVICE_ID: () => (/* binding */ SEMRESATTRS_DEVICE_ID),\n/* harmony export */   SEMRESATTRS_DEVICE_MODEL_IDENTIFIER: () => (/* binding */ SEMRESATTRS_DEVICE_MODEL_IDENTIFIER),\n/* harmony export */   SEMRESATTRS_DEVICE_MODEL_NAME: () => (/* binding */ SEMRESATTRS_DEVICE_MODEL_NAME),\n/* harmony export */   SEMRESATTRS_FAAS_ID: () => (/* binding */ SEMRESATTRS_FAAS_ID),\n/* harmony export */   SEMRESATTRS_FAAS_INSTANCE: () => (/* binding */ SEMRESATTRS_FAAS_INSTANCE),\n/* harmony export */   SEMRESATTRS_FAAS_MAX_MEMORY: () => (/* binding */ SEMRESATTRS_FAAS_MAX_MEMORY),\n/* harmony export */   SEMRESATTRS_FAAS_NAME: () => (/* binding */ SEMRESATTRS_FAAS_NAME),\n/* harmony export */   SEMRESATTRS_FAAS_VERSION: () => (/* binding */ SEMRESATTRS_FAAS_VERSION),\n/* harmony export */   SEMRESATTRS_HOST_ARCH: () => (/* binding */ SEMRESATTRS_HOST_ARCH),\n/* harmony export */   SEMRESATTRS_HOST_ID: () => (/* binding */ SEMRESATTRS_HOST_ID),\n/* harmony export */   SEMRESATTRS_HOST_IMAGE_ID: () => (/* binding */ SEMRESATTRS_HOST_IMAGE_ID),\n/* harmony export */   SEMRESATTRS_HOST_IMAGE_NAME: () => (/* binding */ SEMRESATTRS_HOST_IMAGE_NAME),\n/* harmony export */   SEMRESATTRS_HOST_IMAGE_VERSION: () => (/* binding */ SEMRESATTRS_HOST_IMAGE_VERSION),\n/* harmony export */   SEMRESATTRS_HOST_NAME: () => (/* binding */ SEMRESATTRS_HOST_NAME),\n/* harmony export */   SEMRESATTRS_HOST_TYPE: () => (/* binding */ SEMRESATTRS_HOST_TYPE),\n/* harmony export */   SEMRESATTRS_K8S_CLUSTER_NAME: () => (/* binding */ SEMRESATTRS_K8S_CLUSTER_NAME),\n/* harmony export */   SEMRESATTRS_K8S_CONTAINER_NAME: () => (/* binding */ SEMRESATTRS_K8S_CONTAINER_NAME),\n/* harmony export */   SEMRESATTRS_K8S_CRONJOB_NAME: () => (/* binding */ SEMRESATTRS_K8S_CRONJOB_NAME),\n/* harmony export */   SEMRESATTRS_K8S_CRONJOB_UID: () => (/* binding */ SEMRESATTRS_K8S_CRONJOB_UID),\n/* harmony export */   SEMRESATTRS_K8S_DAEMONSET_NAME: () => (/* binding */ SEMRESATTRS_K8S_DAEMONSET_NAME),\n/* harmony export */   SEMRESATTRS_K8S_DAEMONSET_UID: () => (/* binding */ SEMRESATTRS_K8S_DAEMONSET_UID),\n/* harmony export */   SEMRESATTRS_K8S_DEPLOYMENT_NAME: () => (/* binding */ SEMRESATTRS_K8S_DEPLOYMENT_NAME),\n/* harmony export */   SEMRESATTRS_K8S_DEPLOYMENT_UID: () => (/* binding */ SEMRESATTRS_K8S_DEPLOYMENT_UID),\n/* harmony export */   SEMRESATTRS_K8S_JOB_NAME: () => (/* binding */ SEMRESATTRS_K8S_JOB_NAME),\n/* harmony export */   SEMRESATTRS_K8S_JOB_UID: () => (/* binding */ SEMRESATTRS_K8S_JOB_UID),\n/* harmony export */   SEMRESATTRS_K8S_NAMESPACE_NAME: () => (/* binding */ SEMRESATTRS_K8S_NAMESPACE_NAME),\n/* harmony export */   SEMRESATTRS_K8S_NODE_NAME: () => (/* binding */ SEMRESATTRS_K8S_NODE_NAME),\n/* harmony export */   SEMRESATTRS_K8S_NODE_UID: () => (/* binding */ SEMRESATTRS_K8S_NODE_UID),\n/* harmony export */   SEMRESATTRS_K8S_POD_NAME: () => (/* binding */ SEMRESATTRS_K8S_POD_NAME),\n/* harmony export */   SEMRESATTRS_K8S_POD_UID: () => (/* binding */ SEMRESATTRS_K8S_POD_UID),\n/* harmony export */   SEMRESATTRS_K8S_REPLICASET_NAME: () => (/* binding */ SEMRESATTRS_K8S_REPLICASET_NAME),\n/* harmony export */   SEMRESATTRS_K8S_REPLICASET_UID: () => (/* binding */ SEMRESATTRS_K8S_REPLICASET_UID),\n/* harmony export */   SEMRESATTRS_K8S_STATEFULSET_NAME: () => (/* binding */ SEMRESATTRS_K8S_STATEFULSET_NAME),\n/* harmony export */   SEMRESATTRS_K8S_STATEFULSET_UID: () => (/* binding */ SEMRESATTRS_K8S_STATEFULSET_UID),\n/* harmony export */   SEMRESATTRS_OS_DESCRIPTION: () => (/* binding */ SEMRESATTRS_OS_DESCRIPTION),\n/* harmony export */   SEMRESATTRS_OS_NAME: () => (/* binding */ SEMRESATTRS_OS_NAME),\n/* harmony export */   SEMRESATTRS_OS_TYPE: () => (/* binding */ SEMRESATTRS_OS_TYPE),\n/* harmony export */   SEMRESATTRS_OS_VERSION: () => (/* binding */ SEMRESATTRS_OS_VERSION),\n/* harmony export */   SEMRESATTRS_PROCESS_COMMAND: () => (/* binding */ SEMRESATTRS_PROCESS_COMMAND),\n/* harmony export */   SEMRESATTRS_PROCESS_COMMAND_ARGS: () => (/* binding */ SEMRESATTRS_PROCESS_COMMAND_ARGS),\n/* harmony export */   SEMRESATTRS_PROCESS_COMMAND_LINE: () => (/* binding */ SEMRESATTRS_PROCESS_COMMAND_LINE),\n/* harmony export */   SEMRESATTRS_PROCESS_EXECUTABLE_NAME: () => (/* binding */ SEMRESATTRS_PROCESS_EXECUTABLE_NAME),\n/* harmony export */   SEMRESATTRS_PROCESS_EXECUTABLE_PATH: () => (/* binding */ SEMRESATTRS_PROCESS_EXECUTABLE_PATH),\n/* harmony export */   SEMRESATTRS_PROCESS_OWNER: () => (/* binding */ SEMRESATTRS_PROCESS_OWNER),\n/* harmony export */   SEMRESATTRS_PROCESS_PID: () => (/* binding */ SEMRESATTRS_PROCESS_PID),\n/* harmony export */   SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION: () => (/* binding */ SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION),\n/* harmony export */   SEMRESATTRS_PROCESS_RUNTIME_NAME: () => (/* binding */ SEMRESATTRS_PROCESS_RUNTIME_NAME),\n/* harmony export */   SEMRESATTRS_PROCESS_RUNTIME_VERSION: () => (/* binding */ SEMRESATTRS_PROCESS_RUNTIME_VERSION),\n/* harmony export */   SEMRESATTRS_SERVICE_INSTANCE_ID: () => (/* binding */ SEMRESATTRS_SERVICE_INSTANCE_ID),\n/* harmony export */   SEMRESATTRS_SERVICE_NAME: () => (/* binding */ SEMRESATTRS_SERVICE_NAME),\n/* harmony export */   SEMRESATTRS_SERVICE_NAMESPACE: () => (/* binding */ SEMRESATTRS_SERVICE_NAMESPACE),\n/* harmony export */   SEMRESATTRS_SERVICE_VERSION: () => (/* binding */ SEMRESATTRS_SERVICE_VERSION),\n/* harmony export */   SEMRESATTRS_TELEMETRY_AUTO_VERSION: () => (/* binding */ SEMRESATTRS_TELEMETRY_AUTO_VERSION),\n/* harmony export */   SEMRESATTRS_TELEMETRY_SDK_LANGUAGE: () => (/* binding */ SEMRESATTRS_TELEMETRY_SDK_LANGUAGE),\n/* harmony export */   SEMRESATTRS_TELEMETRY_SDK_NAME: () => (/* binding */ SEMRESATTRS_TELEMETRY_SDK_NAME),\n/* harmony export */   SEMRESATTRS_TELEMETRY_SDK_VERSION: () => (/* binding */ SEMRESATTRS_TELEMETRY_SDK_VERSION),\n/* harmony export */   SEMRESATTRS_WEBENGINE_DESCRIPTION: () => (/* binding */ SEMRESATTRS_WEBENGINE_DESCRIPTION),\n/* harmony export */   SEMRESATTRS_WEBENGINE_NAME: () => (/* binding */ SEMRESATTRS_WEBENGINE_NAME),\n/* harmony export */   SEMRESATTRS_WEBENGINE_VERSION: () => (/* binding */ SEMRESATTRS_WEBENGINE_VERSION),\n/* harmony export */   SemanticResourceAttributes: () => (/* binding */ SemanticResourceAttributes),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_CPP: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_CPP),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_DOTNET: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_DOTNET),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_ERLANG: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_ERLANG),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_GO: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_GO),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_JAVA: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_JAVA),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_NODEJS: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_NODEJS),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_PHP: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_PHP),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_PYTHON: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_PYTHON),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_RUBY: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_RUBY),\n/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_WEBJS: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_WEBJS),\n/* harmony export */   TelemetrySdkLanguageValues: () => (/* binding */ TelemetrySdkLanguageValues)\n/* harmony export */ });\n/* harmony import */ var _internal_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/utils */ \"(rsc)/./src/node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticResourceAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUD_PROVIDER = 'cloud.provider';\nconst TMP_CLOUD_ACCOUNT_ID = 'cloud.account.id';\nconst TMP_CLOUD_REGION = 'cloud.region';\nconst TMP_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\nconst TMP_CLOUD_PLATFORM = 'cloud.platform';\nconst TMP_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';\nconst TMP_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';\nconst TMP_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';\nconst TMP_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';\nconst TMP_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';\nconst TMP_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';\nconst TMP_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';\nconst TMP_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';\nconst TMP_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';\nconst TMP_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';\nconst TMP_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';\nconst TMP_CONTAINER_NAME = 'container.name';\nconst TMP_CONTAINER_ID = 'container.id';\nconst TMP_CONTAINER_RUNTIME = 'container.runtime';\nconst TMP_CONTAINER_IMAGE_NAME = 'container.image.name';\nconst TMP_CONTAINER_IMAGE_TAG = 'container.image.tag';\nconst TMP_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';\nconst TMP_DEVICE_ID = 'device.id';\nconst TMP_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';\nconst TMP_DEVICE_MODEL_NAME = 'device.model.name';\nconst TMP_FAAS_NAME = 'faas.name';\nconst TMP_FAAS_ID = 'faas.id';\nconst TMP_FAAS_VERSION = 'faas.version';\nconst TMP_FAAS_INSTANCE = 'faas.instance';\nconst TMP_FAAS_MAX_MEMORY = 'faas.max_memory';\nconst TMP_HOST_ID = 'host.id';\nconst TMP_HOST_NAME = 'host.name';\nconst TMP_HOST_TYPE = 'host.type';\nconst TMP_HOST_ARCH = 'host.arch';\nconst TMP_HOST_IMAGE_NAME = 'host.image.name';\nconst TMP_HOST_IMAGE_ID = 'host.image.id';\nconst TMP_HOST_IMAGE_VERSION = 'host.image.version';\nconst TMP_K8S_CLUSTER_NAME = 'k8s.cluster.name';\nconst TMP_K8S_NODE_NAME = 'k8s.node.name';\nconst TMP_K8S_NODE_UID = 'k8s.node.uid';\nconst TMP_K8S_NAMESPACE_NAME = 'k8s.namespace.name';\nconst TMP_K8S_POD_UID = 'k8s.pod.uid';\nconst TMP_K8S_POD_NAME = 'k8s.pod.name';\nconst TMP_K8S_CONTAINER_NAME = 'k8s.container.name';\nconst TMP_K8S_REPLICASET_UID = 'k8s.replicaset.uid';\nconst TMP_K8S_REPLICASET_NAME = 'k8s.replicaset.name';\nconst TMP_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';\nconst TMP_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';\nconst TMP_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';\nconst TMP_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';\nconst TMP_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';\nconst TMP_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';\nconst TMP_K8S_JOB_UID = 'k8s.job.uid';\nconst TMP_K8S_JOB_NAME = 'k8s.job.name';\nconst TMP_K8S_CRONJOB_UID = 'k8s.cronjob.uid';\nconst TMP_K8S_CRONJOB_NAME = 'k8s.cronjob.name';\nconst TMP_OS_TYPE = 'os.type';\nconst TMP_OS_DESCRIPTION = 'os.description';\nconst TMP_OS_NAME = 'os.name';\nconst TMP_OS_VERSION = 'os.version';\nconst TMP_PROCESS_PID = 'process.pid';\nconst TMP_PROCESS_EXECUTABLE_NAME = 'process.executable.name';\nconst TMP_PROCESS_EXECUTABLE_PATH = 'process.executable.path';\nconst TMP_PROCESS_COMMAND = 'process.command';\nconst TMP_PROCESS_COMMAND_LINE = 'process.command_line';\nconst TMP_PROCESS_COMMAND_ARGS = 'process.command_args';\nconst TMP_PROCESS_OWNER = 'process.owner';\nconst TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nconst TMP_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\nconst TMP_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';\nconst TMP_SERVICE_NAME = 'service.name';\nconst TMP_SERVICE_NAMESPACE = 'service.namespace';\nconst TMP_SERVICE_INSTANCE_ID = 'service.instance.id';\nconst TMP_SERVICE_VERSION = 'service.version';\nconst TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nconst TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nconst TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\nconst TMP_TELEMETRY_AUTO_VERSION = 'telemetry.auto.version';\nconst TMP_WEBENGINE_NAME = 'webengine.name';\nconst TMP_WEBENGINE_VERSION = 'webengine.version';\nconst TMP_WEBENGINE_DESCRIPTION = 'webengine.description';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use ATTR_CLOUD_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;\n/**\n * The cloud account ID the resource is assigned to.\n *\n * @deprecated Use ATTR_CLOUD_ACCOUNT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;\n/**\n * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n *\n * @deprecated Use ATTR_CLOUD_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n *\n * @deprecated Use ATTR_CLOUD_AVAILABILITY_ZONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use ATTR_CLOUD_PLATFORM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;\n/**\n * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CONTAINER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;\n/**\n * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use ATTR_AWS_ECS_LAUNCHTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;\n/**\n * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;\n/**\n * The task definition family this task definition is a member of.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_FAMILY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;\n/**\n * The revision for this task definition.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_REVISION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;\n/**\n * The ARN of an EKS cluster.\n *\n * @deprecated Use ATTR_AWS_EKS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;\n/**\n * The name(s) of the AWS log group(s) an application is writing to.\n *\n * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;\n/**\n * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n *\n * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;\n/**\n * The name(s) of the AWS log stream(s) an application is writing to.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;\n/**\n * The ARN(s) of the AWS log stream(s).\n *\n * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;\n/**\n * Container name.\n *\n * @deprecated Use ATTR_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n *\n * @deprecated Use ATTR_CONTAINER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;\n/**\n * The container runtime managing this container.\n *\n * @deprecated Use ATTR_CONTAINER_RUNTIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;\n/**\n * Name of the image the container was built on.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;\n/**\n * Container image tag.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_TAGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;\n/**\n * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n *\n * @deprecated Use ATTR_DEPLOYMENT_ENVIRONMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;\n/**\n * A unique identifier representing the device.\n *\n * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n *\n * @deprecated Use ATTR_DEVICE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;\n/**\n * The model identifier for the device.\n *\n * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_IDENTIFIER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;\n/**\n * The marketing name for the device model.\n *\n * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;\n/**\n * The name of the single function that this runtime instance executes.\n *\n * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n *\n * @deprecated Use ATTR_FAAS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;\n/**\n* The unique ID of the single function that this runtime instance executes.\n*\n* Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n*\n* @deprecated Use ATTR_CLOUD_RESOURCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nconst SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;\n/**\n* The immutable version of the function being executed.\n*\n* Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n*\n* @deprecated Use ATTR_FAAS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nconst SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;\n/**\n * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n *\n * Note: * **AWS Lambda:** Use the (full) log stream name.\n *\n * @deprecated Use ATTR_FAAS_INSTANCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;\n/**\n * The amount of memory available to the serverless function in MiB.\n *\n * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n *\n * @deprecated Use ATTR_FAAS_MAX_MEMORY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n *\n * @deprecated Use ATTR_HOST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_HOST_ID = TMP_HOST_ID;\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n *\n * @deprecated Use ATTR_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;\n/**\n * Type of host. For Cloud, this must be the machine type.\n *\n * @deprecated Use ATTR_HOST_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use ATTR_HOST_ARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;\n/**\n * Name of the VM image or OS install the host was instantiated from.\n *\n * @deprecated Use ATTR_HOST_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;\n/**\n * VM image ID. For Cloud, this value is from the provider.\n *\n * @deprecated Use ATTR_HOST_IMAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;\n/**\n * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n *\n * @deprecated Use ATTR_HOST_IMAGE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;\n/**\n * The name of the cluster.\n *\n * @deprecated Use ATTR_K8S_CLUSTER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;\n/**\n * The name of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;\n/**\n * The UID of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;\n/**\n * The name of the namespace that the pod is running in.\n *\n * @deprecated Use ATTR_K8S_NAMESPACE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;\n/**\n * The UID of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;\n/**\n * The name of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;\n/**\n * The name of the Container in a Pod template.\n *\n * @deprecated Use ATTR_K8S_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;\n/**\n * The UID of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;\n/**\n * The name of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;\n/**\n * The UID of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;\n/**\n * The name of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;\n/**\n * The UID of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;\n/**\n * The name of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;\n/**\n * The UID of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;\n/**\n * The name of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;\n/**\n * The UID of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;\n/**\n * The name of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;\n/**\n * The UID of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;\n/**\n * The name of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;\n/**\n * The operating system type.\n *\n * @deprecated Use ATTR_OS_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;\n/**\n * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n *\n * @deprecated Use ATTR_OS_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;\n/**\n * Human readable operating system name.\n *\n * @deprecated Use ATTR_OS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_OS_NAME = TMP_OS_NAME;\n/**\n * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n *\n * @deprecated Use ATTR_OS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;\n/**\n * Process identifier (PID).\n *\n * @deprecated Use ATTR_PROCESS_PID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;\n/**\n * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;\n/**\n * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_PATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;\n/**\n * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;\n/**\n * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_LINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;\n/**\n * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_ARGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;\n/**\n * The username of the user that owns the process.\n *\n * @deprecated Use ATTR_PROCESS_OWNER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n/**\n * The version of the runtime of this process, as returned by the runtime without modification.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;\n/**\n * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION = TMP_PROCESS_RUNTIME_DESCRIPTION;\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n *\n * @deprecated Use ATTR_SERVICE_NAME.\n */\nconst SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n *\n * @deprecated Use ATTR_SERVICE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n/**\n * The string ID of the service instance.\n *\n * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n *\n * @deprecated Use ATTR_SERVICE_INSTANCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;\n/**\n * The version string of the service API or implementation.\n *\n * @deprecated Use ATTR_SERVICE_VERSION.\n */\nconst SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_NAME.\n */\nconst SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_LANGUAGE.\n */\nconst SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n/**\n * The version string of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_VERSION.\n */\nconst SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\n/**\n * The version string of the auto instrumentation agent, if used.\n *\n * @deprecated Use ATTR_TELEMETRY_DISTRO_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;\n/**\n * The name of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;\n/**\n * The version of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;\n/**\n * Additional description of the web engine (e.g. detailed version and edition information).\n *\n * @deprecated Use ATTR_WEBENGINE_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;\n/**\n * Create exported Value Map for SemanticResourceAttributes values\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification\n */\nconst SemanticResourceAttributes = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_CLOUD_PROVIDER,\n    TMP_CLOUD_ACCOUNT_ID,\n    TMP_CLOUD_REGION,\n    TMP_CLOUD_AVAILABILITY_ZONE,\n    TMP_CLOUD_PLATFORM,\n    TMP_AWS_ECS_CONTAINER_ARN,\n    TMP_AWS_ECS_CLUSTER_ARN,\n    TMP_AWS_ECS_LAUNCHTYPE,\n    TMP_AWS_ECS_TASK_ARN,\n    TMP_AWS_ECS_TASK_FAMILY,\n    TMP_AWS_ECS_TASK_REVISION,\n    TMP_AWS_EKS_CLUSTER_ARN,\n    TMP_AWS_LOG_GROUP_NAMES,\n    TMP_AWS_LOG_GROUP_ARNS,\n    TMP_AWS_LOG_STREAM_NAMES,\n    TMP_AWS_LOG_STREAM_ARNS,\n    TMP_CONTAINER_NAME,\n    TMP_CONTAINER_ID,\n    TMP_CONTAINER_RUNTIME,\n    TMP_CONTAINER_IMAGE_NAME,\n    TMP_CONTAINER_IMAGE_TAG,\n    TMP_DEPLOYMENT_ENVIRONMENT,\n    TMP_DEVICE_ID,\n    TMP_DEVICE_MODEL_IDENTIFIER,\n    TMP_DEVICE_MODEL_NAME,\n    TMP_FAAS_NAME,\n    TMP_FAAS_ID,\n    TMP_FAAS_VERSION,\n    TMP_FAAS_INSTANCE,\n    TMP_FAAS_MAX_MEMORY,\n    TMP_HOST_ID,\n    TMP_HOST_NAME,\n    TMP_HOST_TYPE,\n    TMP_HOST_ARCH,\n    TMP_HOST_IMAGE_NAME,\n    TMP_HOST_IMAGE_ID,\n    TMP_HOST_IMAGE_VERSION,\n    TMP_K8S_CLUSTER_NAME,\n    TMP_K8S_NODE_NAME,\n    TMP_K8S_NODE_UID,\n    TMP_K8S_NAMESPACE_NAME,\n    TMP_K8S_POD_UID,\n    TMP_K8S_POD_NAME,\n    TMP_K8S_CONTAINER_NAME,\n    TMP_K8S_REPLICASET_UID,\n    TMP_K8S_REPLICASET_NAME,\n    TMP_K8S_DEPLOYMENT_UID,\n    TMP_K8S_DEPLOYMENT_NAME,\n    TMP_K8S_STATEFULSET_UID,\n    TMP_K8S_STATEFULSET_NAME,\n    TMP_K8S_DAEMONSET_UID,\n    TMP_K8S_DAEMONSET_NAME,\n    TMP_K8S_JOB_UID,\n    TMP_K8S_JOB_NAME,\n    TMP_K8S_CRONJOB_UID,\n    TMP_K8S_CRONJOB_NAME,\n    TMP_OS_TYPE,\n    TMP_OS_DESCRIPTION,\n    TMP_OS_NAME,\n    TMP_OS_VERSION,\n    TMP_PROCESS_PID,\n    TMP_PROCESS_EXECUTABLE_NAME,\n    TMP_PROCESS_EXECUTABLE_PATH,\n    TMP_PROCESS_COMMAND,\n    TMP_PROCESS_COMMAND_LINE,\n    TMP_PROCESS_COMMAND_ARGS,\n    TMP_PROCESS_OWNER,\n    TMP_PROCESS_RUNTIME_NAME,\n    TMP_PROCESS_RUNTIME_VERSION,\n    TMP_PROCESS_RUNTIME_DESCRIPTION,\n    TMP_SERVICE_NAME,\n    TMP_SERVICE_NAMESPACE,\n    TMP_SERVICE_INSTANCE_ID,\n    TMP_SERVICE_VERSION,\n    TMP_TELEMETRY_SDK_NAME,\n    TMP_TELEMETRY_SDK_LANGUAGE,\n    TMP_TELEMETRY_SDK_VERSION,\n    TMP_TELEMETRY_AUTO_VERSION,\n    TMP_WEBENGINE_NAME,\n    TMP_WEBENGINE_VERSION,\n    TMP_WEBENGINE_DESCRIPTION,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_CLOUDPROVIDERVALUES_AWS = 'aws';\nconst TMP_CLOUDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_CLOUDPROVIDERVALUES_GCP = 'gcp';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPROVIDERVALUES_ALIBABA_CLOUD = TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for CloudProviderValues.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nconst CloudProviderValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_CLOUDPROVIDERVALUES_AWS,\n    TMP_CLOUDPROVIDERVALUES_AZURE,\n    TMP_CLOUDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = 'alibaba_cloud_ecs';\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = 'alibaba_cloud_fc';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EC2 = 'aws_ec2';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ECS = 'aws_ecs';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EKS = 'aws_eks';\nconst TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = 'aws_lambda';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_VM = 'azure_vm';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = 'azure_container_instances';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_AKS = 'azure_aks';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = 'azure_functions';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = 'azure_app_service';\nconst TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = 'gcp_compute_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = 'gcp_cloud_run';\nconst TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = 'gcp_kubernetes_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = 'gcp_cloud_functions';\nconst TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = 'gcp_app_engine';\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_FC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_LAMBDA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AWS_LAMBDA = TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_VM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_INSTANCES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_AKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_APP_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_COMPUTE_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_RUN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_KUBERNETES_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_APP_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst CLOUDPLATFORMVALUES_GCP_APP_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;\n/**\n * The constant map of values for CloudPlatformValues.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nconst CloudPlatformValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n    TMP_CLOUDPLATFORMVALUES_AWS_EC2,\n    TMP_CLOUDPLATFORMVALUES_AWS_ECS,\n    TMP_CLOUDPLATFORMVALUES_AWS_EKS,\n    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,\n    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n    TMP_CLOUDPLATFORMVALUES_AZURE_VM,\n    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n    TMP_CLOUDPLATFORMVALUES_AZURE_AKS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_AWSECSLAUNCHTYPEVALUES_EC2 = 'ec2';\nconst TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = 'fargate';\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_FARGATE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst AWSECSLAUNCHTYPEVALUES_FARGATE = TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;\n/**\n * The constant map of values for AwsEcsLaunchtypeValues.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nconst AwsEcsLaunchtypeValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_AWSECSLAUNCHTYPEVALUES_EC2,\n    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_HOSTARCHVALUES_AMD64 = 'amd64';\nconst TMP_HOSTARCHVALUES_ARM32 = 'arm32';\nconst TMP_HOSTARCHVALUES_ARM64 = 'arm64';\nconst TMP_HOSTARCHVALUES_IA64 = 'ia64';\nconst TMP_HOSTARCHVALUES_PPC32 = 'ppc32';\nconst TMP_HOSTARCHVALUES_PPC64 = 'ppc64';\nconst TMP_HOSTARCHVALUES_X86 = 'x86';\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_AMD64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_IA64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_X86 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;\n/**\n * The constant map of values for HostArchValues.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nconst HostArchValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_HOSTARCHVALUES_AMD64,\n    TMP_HOSTARCHVALUES_ARM32,\n    TMP_HOSTARCHVALUES_ARM64,\n    TMP_HOSTARCHVALUES_IA64,\n    TMP_HOSTARCHVALUES_PPC32,\n    TMP_HOSTARCHVALUES_PPC64,\n    TMP_HOSTARCHVALUES_X86,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for OsTypeValues enum definition\n *\n * The operating system type.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_OSTYPEVALUES_WINDOWS = 'windows';\nconst TMP_OSTYPEVALUES_LINUX = 'linux';\nconst TMP_OSTYPEVALUES_DARWIN = 'darwin';\nconst TMP_OSTYPEVALUES_FREEBSD = 'freebsd';\nconst TMP_OSTYPEVALUES_NETBSD = 'netbsd';\nconst TMP_OSTYPEVALUES_OPENBSD = 'openbsd';\nconst TMP_OSTYPEVALUES_DRAGONFLYBSD = 'dragonflybsd';\nconst TMP_OSTYPEVALUES_HPUX = 'hpux';\nconst TMP_OSTYPEVALUES_AIX = 'aix';\nconst TMP_OSTYPEVALUES_SOLARIS = 'solaris';\nconst TMP_OSTYPEVALUES_Z_OS = 'z_os';\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_WINDOWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_LINUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DARWIN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_FREEBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_NETBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_OPENBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DRAGONFLYBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_HPUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_AIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_SOLARIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_Z_OS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;\n/**\n * The constant map of values for OsTypeValues.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nconst OsTypeValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_OSTYPEVALUES_WINDOWS,\n    TMP_OSTYPEVALUES_LINUX,\n    TMP_OSTYPEVALUES_DARWIN,\n    TMP_OSTYPEVALUES_FREEBSD,\n    TMP_OSTYPEVALUES_NETBSD,\n    TMP_OSTYPEVALUES_OPENBSD,\n    TMP_OSTYPEVALUES_DRAGONFLYBSD,\n    TMP_OSTYPEVALUES_HPUX,\n    TMP_OSTYPEVALUES_AIX,\n    TMP_OSTYPEVALUES_SOLARIS,\n    TMP_OSTYPEVALUES_Z_OS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = 'cpp';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = 'dotnet';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = 'erlang';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_GO = 'go';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = 'java';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = 'php';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = 'python';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = 'ruby';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = 'webjs';\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_CPP.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_CPP = TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_DOTNET = TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_ERLANG = TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_GO.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_JAVA.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_JAVA = TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_NODEJS = TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PHP.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_PHP = TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_PYTHON = TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_RUBY.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_RUBY = TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS.\n */\nconst TELEMETRYSDKLANGUAGEVALUES_WEBJS = TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;\n/**\n * The constant map of values for TelemetrySdkLanguageValues.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nconst TelemetrySdkLanguageValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_GO,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n]);\n//# sourceMappingURL=SemanticResourceAttributes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js\n");

/***/ }),

/***/ "(rsc)/./src/node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js":
/*!*********************************************************************************************!*\
  !*** ./src/node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED: () => (/* binding */ ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED),\n/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED: () => (/* binding */ ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED),\n/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED: () => (/* binding */ ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED),\n/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED: () => (/* binding */ ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED),\n/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED: () => (/* binding */ ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED),\n/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER: () => (/* binding */ ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER),\n/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER: () => (/* binding */ ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER),\n/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED: () => (/* binding */ ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED),\n/* harmony export */   ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE: () => (/* binding */ ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE),\n/* harmony export */   ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS: () => (/* binding */ ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS),\n/* harmony export */   ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT: () => (/* binding */ ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT),\n/* harmony export */   ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE: () => (/* binding */ ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE),\n/* harmony export */   ATTR_ASPNETCORE_RATE_LIMITING_POLICY: () => (/* binding */ ATTR_ASPNETCORE_RATE_LIMITING_POLICY),\n/* harmony export */   ATTR_ASPNETCORE_RATE_LIMITING_RESULT: () => (/* binding */ ATTR_ASPNETCORE_RATE_LIMITING_RESULT),\n/* harmony export */   ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED: () => (/* binding */ ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED),\n/* harmony export */   ATTR_ASPNETCORE_ROUTING_IS_FALLBACK: () => (/* binding */ ATTR_ASPNETCORE_ROUTING_IS_FALLBACK),\n/* harmony export */   ATTR_ASPNETCORE_ROUTING_MATCH_STATUS: () => (/* binding */ ATTR_ASPNETCORE_ROUTING_MATCH_STATUS),\n/* harmony export */   ATTR_CLIENT_ADDRESS: () => (/* binding */ ATTR_CLIENT_ADDRESS),\n/* harmony export */   ATTR_CLIENT_PORT: () => (/* binding */ ATTR_CLIENT_PORT),\n/* harmony export */   ATTR_CODE_COLUMN_NUMBER: () => (/* binding */ ATTR_CODE_COLUMN_NUMBER),\n/* harmony export */   ATTR_CODE_FILE_PATH: () => (/* binding */ ATTR_CODE_FILE_PATH),\n/* harmony export */   ATTR_CODE_FUNCTION_NAME: () => (/* binding */ ATTR_CODE_FUNCTION_NAME),\n/* harmony export */   ATTR_CODE_LINE_NUMBER: () => (/* binding */ ATTR_CODE_LINE_NUMBER),\n/* harmony export */   ATTR_CODE_STACKTRACE: () => (/* binding */ ATTR_CODE_STACKTRACE),\n/* harmony export */   ATTR_DB_COLLECTION_NAME: () => (/* binding */ ATTR_DB_COLLECTION_NAME),\n/* harmony export */   ATTR_DB_NAMESPACE: () => (/* binding */ ATTR_DB_NAMESPACE),\n/* harmony export */   ATTR_DB_OPERATION_BATCH_SIZE: () => (/* binding */ ATTR_DB_OPERATION_BATCH_SIZE),\n/* harmony export */   ATTR_DB_OPERATION_NAME: () => (/* binding */ ATTR_DB_OPERATION_NAME),\n/* harmony export */   ATTR_DB_QUERY_SUMMARY: () => (/* binding */ ATTR_DB_QUERY_SUMMARY),\n/* harmony export */   ATTR_DB_QUERY_TEXT: () => (/* binding */ ATTR_DB_QUERY_TEXT),\n/* harmony export */   ATTR_DB_RESPONSE_STATUS_CODE: () => (/* binding */ ATTR_DB_RESPONSE_STATUS_CODE),\n/* harmony export */   ATTR_DB_STORED_PROCEDURE_NAME: () => (/* binding */ ATTR_DB_STORED_PROCEDURE_NAME),\n/* harmony export */   ATTR_DB_SYSTEM_NAME: () => (/* binding */ ATTR_DB_SYSTEM_NAME),\n/* harmony export */   ATTR_DOTNET_GC_HEAP_GENERATION: () => (/* binding */ ATTR_DOTNET_GC_HEAP_GENERATION),\n/* harmony export */   ATTR_ERROR_TYPE: () => (/* binding */ ATTR_ERROR_TYPE),\n/* harmony export */   ATTR_EXCEPTION_ESCAPED: () => (/* binding */ ATTR_EXCEPTION_ESCAPED),\n/* harmony export */   ATTR_EXCEPTION_MESSAGE: () => (/* binding */ ATTR_EXCEPTION_MESSAGE),\n/* harmony export */   ATTR_EXCEPTION_STACKTRACE: () => (/* binding */ ATTR_EXCEPTION_STACKTRACE),\n/* harmony export */   ATTR_EXCEPTION_TYPE: () => (/* binding */ ATTR_EXCEPTION_TYPE),\n/* harmony export */   ATTR_HTTP_REQUEST_HEADER: () => (/* binding */ ATTR_HTTP_REQUEST_HEADER),\n/* harmony export */   ATTR_HTTP_REQUEST_METHOD: () => (/* binding */ ATTR_HTTP_REQUEST_METHOD),\n/* harmony export */   ATTR_HTTP_REQUEST_METHOD_ORIGINAL: () => (/* binding */ ATTR_HTTP_REQUEST_METHOD_ORIGINAL),\n/* harmony export */   ATTR_HTTP_REQUEST_RESEND_COUNT: () => (/* binding */ ATTR_HTTP_REQUEST_RESEND_COUNT),\n/* harmony export */   ATTR_HTTP_RESPONSE_HEADER: () => (/* binding */ ATTR_HTTP_RESPONSE_HEADER),\n/* harmony export */   ATTR_HTTP_RESPONSE_STATUS_CODE: () => (/* binding */ ATTR_HTTP_RESPONSE_STATUS_CODE),\n/* harmony export */   ATTR_HTTP_ROUTE: () => (/* binding */ ATTR_HTTP_ROUTE),\n/* harmony export */   ATTR_JVM_GC_ACTION: () => (/* binding */ ATTR_JVM_GC_ACTION),\n/* harmony export */   ATTR_JVM_GC_NAME: () => (/* binding */ ATTR_JVM_GC_NAME),\n/* harmony export */   ATTR_JVM_MEMORY_POOL_NAME: () => (/* binding */ ATTR_JVM_MEMORY_POOL_NAME),\n/* harmony export */   ATTR_JVM_MEMORY_TYPE: () => (/* binding */ ATTR_JVM_MEMORY_TYPE),\n/* harmony export */   ATTR_JVM_THREAD_DAEMON: () => (/* binding */ ATTR_JVM_THREAD_DAEMON),\n/* harmony export */   ATTR_JVM_THREAD_STATE: () => (/* binding */ ATTR_JVM_THREAD_STATE),\n/* harmony export */   ATTR_NETWORK_LOCAL_ADDRESS: () => (/* binding */ ATTR_NETWORK_LOCAL_ADDRESS),\n/* harmony export */   ATTR_NETWORK_LOCAL_PORT: () => (/* binding */ ATTR_NETWORK_LOCAL_PORT),\n/* harmony export */   ATTR_NETWORK_PEER_ADDRESS: () => (/* binding */ ATTR_NETWORK_PEER_ADDRESS),\n/* harmony export */   ATTR_NETWORK_PEER_PORT: () => (/* binding */ ATTR_NETWORK_PEER_PORT),\n/* harmony export */   ATTR_NETWORK_PROTOCOL_NAME: () => (/* binding */ ATTR_NETWORK_PROTOCOL_NAME),\n/* harmony export */   ATTR_NETWORK_PROTOCOL_VERSION: () => (/* binding */ ATTR_NETWORK_PROTOCOL_VERSION),\n/* harmony export */   ATTR_NETWORK_TRANSPORT: () => (/* binding */ ATTR_NETWORK_TRANSPORT),\n/* harmony export */   ATTR_NETWORK_TYPE: () => (/* binding */ ATTR_NETWORK_TYPE),\n/* harmony export */   ATTR_OTEL_SCOPE_NAME: () => (/* binding */ ATTR_OTEL_SCOPE_NAME),\n/* harmony export */   ATTR_OTEL_SCOPE_VERSION: () => (/* binding */ ATTR_OTEL_SCOPE_VERSION),\n/* harmony export */   ATTR_OTEL_STATUS_CODE: () => (/* binding */ ATTR_OTEL_STATUS_CODE),\n/* harmony export */   ATTR_OTEL_STATUS_DESCRIPTION: () => (/* binding */ ATTR_OTEL_STATUS_DESCRIPTION),\n/* harmony export */   ATTR_SERVER_ADDRESS: () => (/* binding */ ATTR_SERVER_ADDRESS),\n/* harmony export */   ATTR_SERVER_PORT: () => (/* binding */ ATTR_SERVER_PORT),\n/* harmony export */   ATTR_SERVICE_NAME: () => (/* binding */ ATTR_SERVICE_NAME),\n/* harmony export */   ATTR_SERVICE_VERSION: () => (/* binding */ ATTR_SERVICE_VERSION),\n/* harmony export */   ATTR_SIGNALR_CONNECTION_STATUS: () => (/* binding */ ATTR_SIGNALR_CONNECTION_STATUS),\n/* harmony export */   ATTR_SIGNALR_TRANSPORT: () => (/* binding */ ATTR_SIGNALR_TRANSPORT),\n/* harmony export */   ATTR_TELEMETRY_SDK_LANGUAGE: () => (/* binding */ ATTR_TELEMETRY_SDK_LANGUAGE),\n/* harmony export */   ATTR_TELEMETRY_SDK_NAME: () => (/* binding */ ATTR_TELEMETRY_SDK_NAME),\n/* harmony export */   ATTR_TELEMETRY_SDK_VERSION: () => (/* binding */ ATTR_TELEMETRY_SDK_VERSION),\n/* harmony export */   ATTR_URL_FRAGMENT: () => (/* binding */ ATTR_URL_FRAGMENT),\n/* harmony export */   ATTR_URL_FULL: () => (/* binding */ ATTR_URL_FULL),\n/* harmony export */   ATTR_URL_PATH: () => (/* binding */ ATTR_URL_PATH),\n/* harmony export */   ATTR_URL_QUERY: () => (/* binding */ ATTR_URL_QUERY),\n/* harmony export */   ATTR_URL_SCHEME: () => (/* binding */ ATTR_URL_SCHEME),\n/* harmony export */   ATTR_USER_AGENT_ORIGINAL: () => (/* binding */ ATTR_USER_AGENT_ORIGINAL),\n/* harmony export */   DB_SYSTEM_NAME_VALUE_MARIADB: () => (/* binding */ DB_SYSTEM_NAME_VALUE_MARIADB),\n/* harmony export */   DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER: () => (/* binding */ DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER),\n/* harmony export */   DB_SYSTEM_NAME_VALUE_MYSQL: () => (/* binding */ DB_SYSTEM_NAME_VALUE_MYSQL),\n/* harmony export */   DB_SYSTEM_NAME_VALUE_POSTGRESQL: () => (/* binding */ DB_SYSTEM_NAME_VALUE_POSTGRESQL),\n/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_GEN0: () => (/* binding */ DOTNET_GC_HEAP_GENERATION_VALUE_GEN0),\n/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_GEN1: () => (/* binding */ DOTNET_GC_HEAP_GENERATION_VALUE_GEN1),\n/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_GEN2: () => (/* binding */ DOTNET_GC_HEAP_GENERATION_VALUE_GEN2),\n/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_LOH: () => (/* binding */ DOTNET_GC_HEAP_GENERATION_VALUE_LOH),\n/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_POH: () => (/* binding */ DOTNET_GC_HEAP_GENERATION_VALUE_POH),\n/* harmony export */   ERROR_TYPE_VALUE_OTHER: () => (/* binding */ ERROR_TYPE_VALUE_OTHER),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_CONNECT: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_CONNECT),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_DELETE: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_DELETE),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_GET: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_GET),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_HEAD: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_HEAD),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_OPTIONS: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_OPTIONS),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_OTHER: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_OTHER),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_PATCH: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_PATCH),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_POST: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_POST),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_PUT: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_PUT),\n/* harmony export */   HTTP_REQUEST_METHOD_VALUE_TRACE: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_TRACE),\n/* harmony export */   JVM_MEMORY_TYPE_VALUE_HEAP: () => (/* binding */ JVM_MEMORY_TYPE_VALUE_HEAP),\n/* harmony export */   JVM_MEMORY_TYPE_VALUE_NON_HEAP: () => (/* binding */ JVM_MEMORY_TYPE_VALUE_NON_HEAP),\n/* harmony export */   JVM_THREAD_STATE_VALUE_BLOCKED: () => (/* binding */ JVM_THREAD_STATE_VALUE_BLOCKED),\n/* harmony export */   JVM_THREAD_STATE_VALUE_NEW: () => (/* binding */ JVM_THREAD_STATE_VALUE_NEW),\n/* harmony export */   JVM_THREAD_STATE_VALUE_RUNNABLE: () => (/* binding */ JVM_THREAD_STATE_VALUE_RUNNABLE),\n/* harmony export */   JVM_THREAD_STATE_VALUE_TERMINATED: () => (/* binding */ JVM_THREAD_STATE_VALUE_TERMINATED),\n/* harmony export */   JVM_THREAD_STATE_VALUE_TIMED_WAITING: () => (/* binding */ JVM_THREAD_STATE_VALUE_TIMED_WAITING),\n/* harmony export */   JVM_THREAD_STATE_VALUE_WAITING: () => (/* binding */ JVM_THREAD_STATE_VALUE_WAITING),\n/* harmony export */   NETWORK_TRANSPORT_VALUE_PIPE: () => (/* binding */ NETWORK_TRANSPORT_VALUE_PIPE),\n/* harmony export */   NETWORK_TRANSPORT_VALUE_QUIC: () => (/* binding */ NETWORK_TRANSPORT_VALUE_QUIC),\n/* harmony export */   NETWORK_TRANSPORT_VALUE_TCP: () => (/* binding */ NETWORK_TRANSPORT_VALUE_TCP),\n/* harmony export */   NETWORK_TRANSPORT_VALUE_UDP: () => (/* binding */ NETWORK_TRANSPORT_VALUE_UDP),\n/* harmony export */   NETWORK_TRANSPORT_VALUE_UNIX: () => (/* binding */ NETWORK_TRANSPORT_VALUE_UNIX),\n/* harmony export */   NETWORK_TYPE_VALUE_IPV4: () => (/* binding */ NETWORK_TYPE_VALUE_IPV4),\n/* harmony export */   NETWORK_TYPE_VALUE_IPV6: () => (/* binding */ NETWORK_TYPE_VALUE_IPV6),\n/* harmony export */   OTEL_STATUS_CODE_VALUE_ERROR: () => (/* binding */ OTEL_STATUS_CODE_VALUE_ERROR),\n/* harmony export */   OTEL_STATUS_CODE_VALUE_OK: () => (/* binding */ OTEL_STATUS_CODE_VALUE_OK),\n/* harmony export */   SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN: () => (/* binding */ SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN),\n/* harmony export */   SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE: () => (/* binding */ SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE),\n/* harmony export */   SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT: () => (/* binding */ SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT),\n/* harmony export */   SIGNALR_TRANSPORT_VALUE_LONG_POLLING: () => (/* binding */ SIGNALR_TRANSPORT_VALUE_LONG_POLLING),\n/* harmony export */   SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS: () => (/* binding */ SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS),\n/* harmony export */   SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS: () => (/* binding */ SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_CPP: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_CPP),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_GO: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_GO),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_JAVA: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_JAVA),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_PHP: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_PHP),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_RUBY: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_RUBY),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_RUST: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_RUST),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT),\n/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/registry/stable/attributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n/**\n * ASP.NET Core exception middleware handling result\n *\n * @example handled\n * @example unhandled\n */\nconst ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT = 'aspnetcore.diagnostics.exception.result';\n/**\n * Enum value \"aborted\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception handling didn't run because the request was aborted.\n */\nconst ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED = \"aborted\";\n/**\n * Enum value \"handled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception was handled by the exception handling middleware.\n */\nconst ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED = \"handled\";\n/**\n * Enum value \"skipped\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception handling was skipped because the response had started.\n */\nconst ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED = \"skipped\";\n/**\n * Enum value \"unhandled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception was not handled by the exception handling middleware.\n */\nconst ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED = \"unhandled\";\n/**\n * Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.\n *\n * @example Contoso.MyHandler\n */\nconst ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE = 'aspnetcore.diagnostics.handler.type';\n/**\n * Rate limiting policy name.\n *\n * @example fixed\n * @example sliding\n * @example token\n */\nconst ATTR_ASPNETCORE_RATE_LIMITING_POLICY = 'aspnetcore.rate_limiting.policy';\n/**\n * Rate-limiting result, shows whether the lease was acquired or contains a rejection reason\n *\n * @example acquired\n * @example request_canceled\n */\nconst ATTR_ASPNETCORE_RATE_LIMITING_RESULT = 'aspnetcore.rate_limiting.result';\n/**\n * Enum value \"acquired\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease was acquired\n */\nconst ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED = \"acquired\";\n/**\n * Enum value \"endpoint_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease request was rejected by the endpoint limiter\n */\nconst ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER = \"endpoint_limiter\";\n/**\n * Enum value \"global_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease request was rejected by the global limiter\n */\nconst ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER = \"global_limiter\";\n/**\n * Enum value \"request_canceled\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease request was canceled\n */\nconst ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED = \"request_canceled\";\n/**\n * Flag indicating if request was handled by the application pipeline.\n *\n * @example true\n */\nconst ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED = 'aspnetcore.request.is_unhandled';\n/**\n * A value that indicates whether the matched route is a fallback route.\n *\n * @example true\n */\nconst ATTR_ASPNETCORE_ROUTING_IS_FALLBACK = 'aspnetcore.routing.is_fallback';\n/**\n * Match result - success or failure\n *\n * @example success\n * @example failure\n */\nconst ATTR_ASPNETCORE_ROUTING_MATCH_STATUS = 'aspnetcore.routing.match_status';\n/**\n * Enum value \"failure\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n *\n * Match failed\n */\nconst ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE = \"failure\";\n/**\n * Enum value \"success\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n *\n * Match succeeded\n */\nconst ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS = \"success\";\n/**\n * Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example client.example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.address` **SHOULD** represent the client address behind any intermediaries,  for example proxies, if it's available.\n */\nconst ATTR_CLIENT_ADDRESS = 'client.address';\n/**\n * Client port number.\n *\n * @example 65123\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.port` **SHOULD** represent the client port behind any intermediaries,  for example proxies, if it's available.\n */\nconst ATTR_CLIENT_PORT = 'client.port';\n/**\n * The column number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example 16\n */\nconst ATTR_CODE_COLUMN_NUMBER = 'code.column.number';\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path). This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example \"/usr/local/MyApplication/content_root/app/index.php\"\n */\nconst ATTR_CODE_FILE_PATH = 'code.file.path';\n/**\n * The method or function fully-qualified name without arguments. The value should fit the natural representation of the language runtime, which is also likely the same used within `code.stacktrace` attribute value. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example com.example.MyHttpService.serveRequest\n * @example GuzzleHttp\\\\Client::transfer\n * @example fopen\n *\n * @note Values and format depends on each language runtime, thus it is impossible to provide an exhaustive list of examples.\n * The values are usually the same (or prefixes of) the ones found in native stack trace representation stored in\n * `code.stacktrace` without information on arguments.\n *\n * Examples:\n *\n *   - Java method: `com.example.MyHttpService.serveRequest`\n *   - Java anonymous class method: `com.mycompany.Main$1.myMethod`\n *   - Java lambda method: `com.mycompany.Main$$Lambda/0x0000748ae4149c00.myMethod`\n *   - PHP function: `GuzzleHttp\\Client::transfer`\n *   - Go function: `github.com/my/repo/pkg.foo.func5`\n *   - Elixir: `OpenTelemetry.Ctx.new`\n *   - Erlang: `opentelemetry_ctx:new`\n *   - Rust: `playground::my_module::my_cool_func`\n *   - C function: `fopen`\n */\nconst ATTR_CODE_FUNCTION_NAME = 'code.function.name';\n/**\n * The line number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example 42\n */\nconst ATTR_CODE_LINE_NUMBER = 'code.line.number';\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is identical to [`exception.stacktrace`](/docs/exceptions/exceptions-spans.md#stacktrace-representation). This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Location'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example \"at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\\\n\"\n */\nconst ATTR_CODE_STACKTRACE = 'code.stacktrace';\n/**\n * The name of a collection (table, container) within the database.\n *\n * @example public.users\n * @example customers\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * The collection name **SHOULD NOT** be extracted from `db.query.text`,\n * when the database system supports query text with multiple collections\n * in non-batch operations.\n *\n * For batch operations, if the individual operations are known to have the same\n * collection name then that collection name **SHOULD** be used.\n */\nconst ATTR_DB_COLLECTION_NAME = 'db.collection.name';\n/**\n * The name of the database, fully qualified within the server address and port.\n *\n * @example customers\n * @example test.users\n *\n * @note If a database system has multiple namespace components, they **SHOULD** be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) **SHOULD** be omitted.\n * Semantic conventions for individual database systems **SHOULD** document what `db.namespace` means in the context of that system.\n * It is **RECOMMENDED** to capture the value as provided by the application without attempting to do any case normalization.\n */\nconst ATTR_DB_NAMESPACE = 'db.namespace';\n/**\n * The number of queries included in a batch operation.\n *\n * @example 2\n * @example 3\n * @example 4\n *\n * @note Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` **SHOULD** never be `1`.\n */\nconst ATTR_DB_OPERATION_BATCH_SIZE = 'db.operation.batch.size';\n/**\n * The name of the operation or command being executed.\n *\n * @example findAndModify\n * @example HMSET\n * @example SELECT\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * The operation name **SHOULD NOT** be extracted from `db.query.text`,\n * when the database system supports query text with multiple operations\n * in non-batch operations.\n *\n * If spaces can occur in the operation name, multiple consecutive spaces\n * **SHOULD** be normalized to a single space.\n *\n * For batch operations, if the individual operations are known to have the same operation name\n * then that operation name **SHOULD** be used prepended by `BATCH `,\n * otherwise `db.operation.name` **SHOULD** be `BATCH` or some other database\n * system specific term if more applicable.\n */\nconst ATTR_DB_OPERATION_NAME = 'db.operation.name';\n/**\n * Low cardinality summary of a database query.\n *\n * @example SELECT wuser_table\n * @example INSERT shipping_details SELECT orders\n * @example get user by id\n *\n * @note The query summary describes a class of database queries and is useful\n * as a grouping key, especially when analyzing telemetry for database\n * calls involving complex queries.\n *\n * Summary may be available to the instrumentation through\n * instrumentation hooks or other means. If it is not available, instrumentations\n * that support query parsing **SHOULD** generate a summary following\n * [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\n * section.\n */\nconst ATTR_DB_QUERY_SUMMARY = 'db.query.summary';\n/**\n * The database query being executed.\n *\n * @example SELECT * FROM wuser_table where username = ?\n * @example SET mykey ?\n *\n * @note For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\n * For batch operations, if the individual operations are known to have the same query text then that query text **SHOULD** be used, otherwise all of the individual query texts **SHOULD** be concatenated with separator `; ` or some other database system specific separator if more applicable.\n * Parameterized query text **SHOULD NOT** be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n */\nconst ATTR_DB_QUERY_TEXT = 'db.query.text';\n/**\n * Database response status code.\n *\n * @example 102\n * @example ORA-17002\n * @example 08P01\n * @example 404\n *\n * @note The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\n * Semantic conventions for individual database systems **SHOULD** document what `db.response.status_code` means in the context of that system.\n */\nconst ATTR_DB_RESPONSE_STATUS_CODE = 'db.response.status_code';\n/**\n * The name of a stored procedure within the database.\n *\n * @example GetCustomer\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * For batch operations, if the individual operations are known to have the same\n * stored procedure name then that stored procedure name **SHOULD** be used.\n */\nconst ATTR_DB_STORED_PROCEDURE_NAME = 'db.stored_procedure.name';\n/**\n * The database management system (DBMS) product as identified by the client instrumentation.\n *\n * @note The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.\n */\nconst ATTR_DB_SYSTEM_NAME = 'db.system.name';\n/**\n * Enum value \"mariadb\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [MariaDB](https://mariadb.org/)\n */\nconst DB_SYSTEM_NAME_VALUE_MARIADB = \"mariadb\";\n/**\n * Enum value \"microsoft.sql_server\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [Microsoft SQL Server](https://www.microsoft.com/sql-server)\n */\nconst DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER = \"microsoft.sql_server\";\n/**\n * Enum value \"mysql\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [MySQL](https://www.mysql.com/)\n */\nconst DB_SYSTEM_NAME_VALUE_MYSQL = \"mysql\";\n/**\n * Enum value \"postgresql\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [PostgreSQL](https://www.postgresql.org/)\n */\nconst DB_SYSTEM_NAME_VALUE_POSTGRESQL = \"postgresql\";\n/**\n * Name of the garbage collector managed heap generation.\n *\n * @example gen0\n * @example gen1\n * @example gen2\n */\nconst ATTR_DOTNET_GC_HEAP_GENERATION = 'dotnet.gc.heap.generation';\n/**\n * Enum value \"gen0\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Generation 0\n */\nconst DOTNET_GC_HEAP_GENERATION_VALUE_GEN0 = \"gen0\";\n/**\n * Enum value \"gen1\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Generation 1\n */\nconst DOTNET_GC_HEAP_GENERATION_VALUE_GEN1 = \"gen1\";\n/**\n * Enum value \"gen2\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Generation 2\n */\nconst DOTNET_GC_HEAP_GENERATION_VALUE_GEN2 = \"gen2\";\n/**\n * Enum value \"loh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Large Object Heap\n */\nconst DOTNET_GC_HEAP_GENERATION_VALUE_LOH = \"loh\";\n/**\n * Enum value \"poh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Pinned Object Heap\n */\nconst DOTNET_GC_HEAP_GENERATION_VALUE_POH = \"poh\";\n/**\n * Describes a class of error the operation ended with.\n *\n * @example timeout\n * @example java.net.UnknownHostException\n * @example server_certificate_invalid\n * @example 500\n *\n * @note The `error.type` **SHOULD** be predictable, and **SHOULD** have low cardinality.\n *\n * When `error.type` is set to a type (e.g., an exception type), its\n * canonical class name identifying the type within the artifact **SHOULD** be used.\n *\n * Instrumentations **SHOULD** document the list of errors they report.\n *\n * The cardinality of `error.type` within one instrumentation library **SHOULD** be low.\n * Telemetry consumers that aggregate data from multiple instrumentation libraries and applications\n * should be prepared for `error.type` to have high cardinality at query time when no\n * additional filters are applied.\n *\n * If the operation has completed successfully, instrumentations **SHOULD NOT** set `error.type`.\n *\n * If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\n * it's **RECOMMENDED** to:\n *\n *   - Use a domain-specific attribute\n *   - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n */\nconst ATTR_ERROR_TYPE = 'error.type';\n/**\n * Enum value \"_OTHER\" for attribute {@link ATTR_ERROR_TYPE}.\n *\n * A fallback error value to be used when the instrumentation doesn't define a custom value.\n */\nconst ERROR_TYPE_VALUE_OTHER = \"_OTHER\";\n/**\n * Indicates that the exception is escaping the scope of the span.\n *\n * @deprecated It's no longer recommended to record exceptions that are handled and do not escape the scope of a span.\n */\nconst ATTR_EXCEPTION_ESCAPED = 'exception.escaped';\n/**\n * The exception message.\n *\n * @example Division by zero\n * @example Can't convert 'int' object to str implicitly\n */\nconst ATTR_EXCEPTION_MESSAGE = 'exception.message';\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @example \"Exception in thread \"main\" java.lang.RuntimeException: Test exception\\\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\\\n\"\n */\nconst ATTR_EXCEPTION_STACKTRACE = 'exception.stacktrace';\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @example java.net.ConnectException\n * @example OSError\n */\nconst ATTR_EXCEPTION_TYPE = 'exception.type';\n/**\n * HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example [\"application/json\"]\n * @example [\"1.2.3.4\", \"1.2.3.5\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured.\n * Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n *\n * The `User-Agent` header is already captured in the `user_agent.original` attribute.\n * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n *\n * The attribute value **MUST** consist of either multiple header values as an array of strings\n * or a single-item array containing a possibly comma-concatenated string, depending on the way\n * the HTTP library provides access to headers.\n *\n * Examples:\n *\n *   - A header `Content-Type: application/json` **SHOULD** be recorded as the `http.request.header.content-type`\n *     attribute with value `[\"application/json\"]`.\n *   - A header `X-Forwarded-For: 1.2.3.4, 1.2.3.5` **SHOULD** be recorded as the `http.request.header.x-forwarded-for`\n *     attribute with value `[\"1.2.3.4\", \"1.2.3.5\"]` or `[\"1.2.3.4, 1.2.3.5\"]` depending on the HTTP library.\n */\nconst ATTR_HTTP_REQUEST_HEADER = (key) => `http.request.header.${key}`;\n/**\n * HTTP request method.\n *\n * @example GET\n * @example POST\n * @example HEAD\n *\n * @note HTTP request method value **SHOULD** be \"known\" to the instrumentation.\n * By default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\n * and the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n *\n * If the HTTP request method is not known to instrumentation, it **MUST** set the `http.request.method` attribute to `_OTHER`.\n *\n * If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it **MUST** provide a way to override\n * the list of known HTTP methods. If this override is done via environment variable, then the environment variable **MUST** be named\n * OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n * (this list **MUST** be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n *\n * HTTP method names are case-sensitive and `http.request.method` attribute value **MUST** match a known HTTP method name exactly.\n * Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, **SHOULD** populate a canonical equivalent.\n * Tracing instrumentations that do so, **MUST** also set `http.request.method_original` to the original value.\n */\nconst ATTR_HTTP_REQUEST_METHOD = 'http.request.method';\n/**\n * Enum value \"_OTHER\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * Any HTTP method that the instrumentation has no prior knowledge of.\n */\nconst HTTP_REQUEST_METHOD_VALUE_OTHER = \"_OTHER\";\n/**\n * Enum value \"CONNECT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * CONNECT method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_CONNECT = \"CONNECT\";\n/**\n * Enum value \"DELETE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * DELETE method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_DELETE = \"DELETE\";\n/**\n * Enum value \"GET\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * GET method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_GET = \"GET\";\n/**\n * Enum value \"HEAD\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * HEAD method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_HEAD = \"HEAD\";\n/**\n * Enum value \"OPTIONS\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * OPTIONS method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_OPTIONS = \"OPTIONS\";\n/**\n * Enum value \"PATCH\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * PATCH method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_PATCH = \"PATCH\";\n/**\n * Enum value \"POST\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * POST method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_POST = \"POST\";\n/**\n * Enum value \"PUT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * PUT method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_PUT = \"PUT\";\n/**\n * Enum value \"TRACE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * TRACE method.\n */\nconst HTTP_REQUEST_METHOD_VALUE_TRACE = \"TRACE\";\n/**\n * Original HTTP method sent by the client in the request line.\n *\n * @example GeT\n * @example ACL\n * @example foo\n */\nconst ATTR_HTTP_REQUEST_METHOD_ORIGINAL = 'http.request.method_original';\n/**\n * The ordinal number of request resending attempt (for any reason, including redirects).\n *\n * @example 3\n *\n * @note The resend count **SHOULD** be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n */\nconst ATTR_HTTP_REQUEST_RESEND_COUNT = 'http.request.resend_count';\n/**\n * HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example [\"application/json\"]\n * @example [\"abc\", \"def\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured.\n * Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n *\n * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n *\n * The attribute value **MUST** consist of either multiple header values as an array of strings\n * or a single-item array containing a possibly comma-concatenated string, depending on the way\n * the HTTP library provides access to headers.\n *\n * Examples:\n *\n *   - A header `Content-Type: application/json` header **SHOULD** be recorded as the `http.request.response.content-type`\n *     attribute with value `[\"application/json\"]`.\n *   - A header `My-custom-header: abc, def` header **SHOULD** be recorded as the `http.response.header.my-custom-header`\n *     attribute with value `[\"abc\", \"def\"]` or `[\"abc, def\"]` depending on the HTTP library.\n */\nconst ATTR_HTTP_RESPONSE_HEADER = (key) => `http.response.header.${key}`;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @example 200\n */\nconst ATTR_HTTP_RESPONSE_STATUS_CODE = 'http.response.status_code';\n/**\n * The matched route, that is, the path template in the format used by the respective server framework.\n *\n * @example /users/:userID?\n * @example {controller}/{action}/{id?}\n *\n * @note **MUST NOT** be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\n * **SHOULD** include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n */\nconst ATTR_HTTP_ROUTE = 'http.route';\n/**\n * Name of the garbage collector action.\n *\n * @example end of minor GC\n * @example end of major GC\n *\n * @note Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).\n */\nconst ATTR_JVM_GC_ACTION = 'jvm.gc.action';\n/**\n * Name of the garbage collector.\n *\n * @example G1 Young Generation\n * @example G1 Old Generation\n *\n * @note Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).\n */\nconst ATTR_JVM_GC_NAME = 'jvm.gc.name';\n/**\n * Name of the memory pool.\n *\n * @example G1 Old Gen\n * @example G1 Eden space\n * @example G1 Survivor Space\n *\n * @note Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n */\nconst ATTR_JVM_MEMORY_POOL_NAME = 'jvm.memory.pool.name';\n/**\n * The type of memory.\n *\n * @example heap\n * @example non_heap\n */\nconst ATTR_JVM_MEMORY_TYPE = 'jvm.memory.type';\n/**\n * Enum value \"heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n *\n * Heap memory.\n */\nconst JVM_MEMORY_TYPE_VALUE_HEAP = \"heap\";\n/**\n * Enum value \"non_heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n *\n * Non-heap memory\n */\nconst JVM_MEMORY_TYPE_VALUE_NON_HEAP = \"non_heap\";\n/**\n * Whether the thread is daemon or not.\n */\nconst ATTR_JVM_THREAD_DAEMON = 'jvm.thread.daemon';\n/**\n * State of the thread.\n *\n * @example runnable\n * @example blocked\n */\nconst ATTR_JVM_THREAD_STATE = 'jvm.thread.state';\n/**\n * Enum value \"blocked\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that is blocked waiting for a monitor lock is in this state.\n */\nconst JVM_THREAD_STATE_VALUE_BLOCKED = \"blocked\";\n/**\n * Enum value \"new\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that has not yet started is in this state.\n */\nconst JVM_THREAD_STATE_VALUE_NEW = \"new\";\n/**\n * Enum value \"runnable\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread executing in the Java virtual machine is in this state.\n */\nconst JVM_THREAD_STATE_VALUE_RUNNABLE = \"runnable\";\n/**\n * Enum value \"terminated\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that has exited is in this state.\n */\nconst JVM_THREAD_STATE_VALUE_TERMINATED = \"terminated\";\n/**\n * Enum value \"timed_waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.\n */\nconst JVM_THREAD_STATE_VALUE_TIMED_WAITING = \"timed_waiting\";\n/**\n * Enum value \"waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that is waiting indefinitely for another thread to perform a particular action is in this state.\n */\nconst JVM_THREAD_STATE_VALUE_WAITING = \"waiting\";\n/**\n * Local address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nconst ATTR_NETWORK_LOCAL_ADDRESS = 'network.local.address';\n/**\n * Local port number of the network connection.\n *\n * @example 65123\n */\nconst ATTR_NETWORK_LOCAL_PORT = 'network.local.port';\n/**\n * Peer address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nconst ATTR_NETWORK_PEER_ADDRESS = 'network.peer.address';\n/**\n * Peer port number of the network connection.\n *\n * @example 65123\n */\nconst ATTR_NETWORK_PEER_PORT = 'network.peer.port';\n/**\n * [OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.\n *\n * @example amqp\n * @example http\n * @example mqtt\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nconst ATTR_NETWORK_PROTOCOL_NAME = 'network.protocol.name';\n/**\n * The actual version of the protocol used for network communication.\n *\n * @example 1.1\n * @example 2\n *\n * @note If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute **SHOULD** be set to the negotiated version. If the actual protocol version is not known, this attribute **SHOULD NOT** be set.\n */\nconst ATTR_NETWORK_PROTOCOL_VERSION = 'network.protocol.version';\n/**\n * [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n *\n * @example tcp\n * @example udp\n *\n * @note The value **SHOULD** be normalized to lowercase.\n *\n * Consider always setting the transport when setting a port number, since\n * a port number is ambiguous without knowing the transport. For example\n * different processes could be listening on TCP port 12345 and UDP port 12345.\n */\nconst ATTR_NETWORK_TRANSPORT = 'network.transport';\n/**\n * Enum value \"pipe\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * Named or anonymous pipe.\n */\nconst NETWORK_TRANSPORT_VALUE_PIPE = \"pipe\";\n/**\n * Enum value \"quic\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * QUIC\n */\nconst NETWORK_TRANSPORT_VALUE_QUIC = \"quic\";\n/**\n * Enum value \"tcp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * TCP\n */\nconst NETWORK_TRANSPORT_VALUE_TCP = \"tcp\";\n/**\n * Enum value \"udp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * UDP\n */\nconst NETWORK_TRANSPORT_VALUE_UDP = \"udp\";\n/**\n * Enum value \"unix\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * Unix domain socket\n */\nconst NETWORK_TRANSPORT_VALUE_UNIX = \"unix\";\n/**\n * [OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.\n *\n * @example ipv4\n * @example ipv6\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nconst ATTR_NETWORK_TYPE = 'network.type';\n/**\n * Enum value \"ipv4\" for attribute {@link ATTR_NETWORK_TYPE}.\n *\n * IPv4\n */\nconst NETWORK_TYPE_VALUE_IPV4 = \"ipv4\";\n/**\n * Enum value \"ipv6\" for attribute {@link ATTR_NETWORK_TYPE}.\n *\n * IPv6\n */\nconst NETWORK_TYPE_VALUE_IPV6 = \"ipv6\";\n/**\n * The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).\n *\n * @example io.opentelemetry.contrib.mongodb\n */\nconst ATTR_OTEL_SCOPE_NAME = 'otel.scope.name';\n/**\n * The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).\n *\n * @example 1.0.0\n */\nconst ATTR_OTEL_SCOPE_VERSION = 'otel.scope.version';\n/**\n * Name of the code, either \"OK\" or \"ERROR\". **MUST NOT** be set if the status code is UNSET.\n */\nconst ATTR_OTEL_STATUS_CODE = 'otel.status_code';\n/**\n * Enum value \"ERROR\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n *\n * The operation contains an error.\n */\nconst OTEL_STATUS_CODE_VALUE_ERROR = \"ERROR\";\n/**\n * Enum value \"OK\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n *\n * The operation has been validated by an Application developer or Operator to have completed successfully.\n */\nconst OTEL_STATUS_CODE_VALUE_OK = \"OK\";\n/**\n * Description of the Status if it has a value, otherwise not set.\n *\n * @example resource not found\n */\nconst ATTR_OTEL_STATUS_DESCRIPTION = 'otel.status_description';\n/**\n * Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.address` **SHOULD** represent the server address behind any intermediaries, for example proxies, if it's available.\n */\nconst ATTR_SERVER_ADDRESS = 'server.address';\n/**\n * Server port number.\n *\n * @example 80\n * @example 8080\n * @example 443\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.port` **SHOULD** represent the server port behind any intermediaries, for example proxies, if it's available.\n */\nconst ATTR_SERVER_PORT = 'server.port';\n/**\n * Logical name of the service.\n *\n * @example shoppingcart\n *\n * @note **MUST** be the same for all instances of horizontally scaled services. If the value was not specified, SDKs **MUST** fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value **MUST** be set to `unknown_service`.\n */\nconst ATTR_SERVICE_NAME = 'service.name';\n/**\n * The version string of the service API or implementation. The format is not defined by these conventions.\n *\n * @example 2.0.0\n * @example a01dbef8a\n */\nconst ATTR_SERVICE_VERSION = 'service.version';\n/**\n * SignalR HTTP connection closure status.\n *\n * @example app_shutdown\n * @example timeout\n */\nconst ATTR_SIGNALR_CONNECTION_STATUS = 'signalr.connection.status';\n/**\n * Enum value \"app_shutdown\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n *\n * The connection was closed because the app is shutting down.\n */\nconst SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN = \"app_shutdown\";\n/**\n * Enum value \"normal_closure\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n *\n * The connection was closed normally.\n */\nconst SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE = \"normal_closure\";\n/**\n * Enum value \"timeout\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n *\n * The connection was closed due to a timeout.\n */\nconst SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT = \"timeout\";\n/**\n * [SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)\n *\n * @example web_sockets\n * @example long_polling\n */\nconst ATTR_SIGNALR_TRANSPORT = 'signalr.transport';\n/**\n * Enum value \"long_polling\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n *\n * LongPolling protocol\n */\nconst SIGNALR_TRANSPORT_VALUE_LONG_POLLING = \"long_polling\";\n/**\n * Enum value \"server_sent_events\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n *\n * ServerSentEvents protocol\n */\nconst SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS = \"server_sent_events\";\n/**\n * Enum value \"web_sockets\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n *\n * WebSockets protocol\n */\nconst SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS = \"web_sockets\";\n/**\n * The language of the telemetry SDK.\n */\nconst ATTR_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\n/**\n * Enum value \"cpp\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_CPP = \"cpp\";\n/**\n * Enum value \"dotnet\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET = \"dotnet\";\n/**\n * Enum value \"erlang\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG = \"erlang\";\n/**\n * Enum value \"go\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_GO = \"go\";\n/**\n * Enum value \"java\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_JAVA = \"java\";\n/**\n * Enum value \"nodejs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS = \"nodejs\";\n/**\n * Enum value \"php\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_PHP = \"php\";\n/**\n * Enum value \"python\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON = \"python\";\n/**\n * Enum value \"ruby\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_RUBY = \"ruby\";\n/**\n * Enum value \"rust\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_RUST = \"rust\";\n/**\n * Enum value \"swift\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT = \"swift\";\n/**\n * Enum value \"webjs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nconst TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS = \"webjs\";\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @example opentelemetry\n *\n * @note The OpenTelemetry SDK **MUST** set the `telemetry.sdk.name` attribute to `opentelemetry`.\n * If another SDK, like a fork or a vendor-provided implementation, is used, this SDK **MUST** set the\n * `telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point\n * or another suitable identifier depending on the language.\n * The identifier `opentelemetry` is reserved and **MUST NOT** be used in this case.\n * All custom identifiers **SHOULD** be stable across different versions of an implementation.\n */\nconst ATTR_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\n/**\n * The version string of the telemetry SDK.\n *\n * @example 1.2.3\n */\nconst ATTR_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\n/**\n * The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component\n *\n * @example SemConv\n */\nconst ATTR_URL_FRAGMENT = 'url.fragment';\n/**\n * Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)\n *\n * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv\n * @example //localhost\n *\n * @note For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\n * is not transmitted over HTTP, but if it is known, it **SHOULD** be included nevertheless.\n *\n * `url.full` **MUST NOT** contain credentials passed via URL in form of `https://username:password@www.example.com/`.\n * In such case username and password **SHOULD** be redacted and attribute's value **SHOULD** be `https://REDACTED:REDACTED@www.example.com/`.\n *\n * `url.full` **SHOULD** capture the absolute URL when it is available (or can be reconstructed).\n *\n * Sensitive content provided in `url.full` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the\n * value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `https://www.example.com/path?color=blue&sig=REDACTED`.\n */\nconst ATTR_URL_FULL = 'url.full';\n/**\n * The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n *\n * @example /search\n *\n * @note Sensitive content provided in `url.path` **SHOULD** be scrubbed when instrumentations can identify it.\n */\nconst ATTR_URL_PATH = 'url.path';\n/**\n * The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n *\n * @example q=OpenTelemetry\n *\n * @note Sensitive content provided in `url.query` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `q=OpenTelemetry&sig=REDACTED`.\n */\nconst ATTR_URL_QUERY = 'url.query';\n/**\n * The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n *\n * @example https\n * @example ftp\n * @example telnet\n */\nconst ATTR_URL_SCHEME = 'url.scheme';\n/**\n * Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n *\n * @example CERN-LineMode/2.15 libwww/2.17b3\n * @example Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1\n * @example YourApp/1.0.0 grpc-java-okhttp/1.27.2\n */\nconst ATTR_USER_AGENT_ORIGINAL = 'user_agent.original';\n//# sourceMappingURL=stable_attributes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zL2J1aWxkL2VzbS9zdGFibGVfYXR0cmlidXRlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx1Q0FBdUMsbURBQW1EO0FBQzFGO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx1Q0FBdUMsbURBQW1EO0FBQzFGO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx1Q0FBdUMsbURBQW1EO0FBQzFGO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx5Q0FBeUMsbURBQW1EO0FBQzVGO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx3Q0FBd0MsMkNBQTJDO0FBQ25GO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxnREFBZ0QsMkNBQTJDO0FBQzNGO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSw4Q0FBOEMsMkNBQTJDO0FBQ3pGO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxnREFBZ0QsMkNBQTJDO0FBQzNGO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHVDQUF1QywyQ0FBMkM7QUFDbEY7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHVDQUF1QywyQ0FBMkM7QUFDbEY7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHlFQUF5RTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4TkFBOE47QUFDOU47QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx1Q0FBdUMsMEJBQTBCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxvREFBb0QsMEJBQTBCO0FBQzlFO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxxQ0FBcUMsMEJBQTBCO0FBQy9EO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSwwQ0FBMEMsMEJBQTBCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esb0NBQW9DLHFDQUFxQztBQUN6RTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esb0NBQW9DLHFDQUFxQztBQUN6RTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esb0NBQW9DLHFDQUFxQztBQUN6RTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsbUNBQW1DLHFDQUFxQztBQUN4RTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsbUNBQW1DLHFDQUFxQztBQUN4RTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHNDQUFzQyxzQkFBc0I7QUFDNUQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLGlFQUFpRSxJQUFJO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHNDQUFzQywrQkFBK0I7QUFDckU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHVDQUF1QywrQkFBK0I7QUFDdEU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHNDQUFzQywrQkFBK0I7QUFDckU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG1DQUFtQywrQkFBK0I7QUFDbEU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG9DQUFvQywrQkFBK0I7QUFDbkU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHVDQUF1QywrQkFBK0I7QUFDdEU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHFDQUFxQywrQkFBK0I7QUFDcEU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG9DQUFvQywrQkFBK0I7QUFDbkU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG1DQUFtQywrQkFBK0I7QUFDbEU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHFDQUFxQywrQkFBK0I7QUFDcEU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sbUVBQW1FLElBQUk7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFdBQVcsRUFBRSxPQUFPLEVBQUU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG9DQUFvQywyQkFBMkI7QUFDL0Q7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHdDQUF3QywyQkFBMkI7QUFDbkU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx1Q0FBdUMsNEJBQTRCO0FBQ25FO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxtQ0FBbUMsNEJBQTRCO0FBQy9EO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx3Q0FBd0MsNEJBQTRCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSw2Q0FBNkMsNEJBQTRCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx1Q0FBdUMsNEJBQTRCO0FBQ25FO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG9DQUFvQyw2QkFBNkI7QUFDakU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG9DQUFvQyw2QkFBNkI7QUFDakU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG1DQUFtQyw2QkFBNkI7QUFDaEU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG1DQUFtQyw2QkFBNkI7QUFDaEU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG9DQUFvQyw2QkFBNkI7QUFDakU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG9DQUFvQyx3QkFBd0I7QUFDNUQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG9DQUFvQyx3QkFBd0I7QUFDNUQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EscUNBQXFDLDRCQUE0QjtBQUNqRTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esa0NBQWtDLDRCQUE0QjtBQUM5RDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsK0RBQStEO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSw0Q0FBNEMscUNBQXFDO0FBQ2pGO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSw4Q0FBOEMscUNBQXFDO0FBQ25GO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx1Q0FBdUMscUNBQXFDO0FBQzVFO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDRDQUE0Qyw2QkFBNkI7QUFDekU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGtEQUFrRCw2QkFBNkI7QUFDL0U7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDJDQUEyQyw2QkFBNkI7QUFDeEU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsbUNBQW1DLGtDQUFrQztBQUNyRTtBQUNPO0FBQ1A7QUFDQSxzQ0FBc0Msa0NBQWtDO0FBQ3hFO0FBQ087QUFDUDtBQUNBLHNDQUFzQyxrQ0FBa0M7QUFDeEU7QUFDTztBQUNQO0FBQ0Esa0NBQWtDLGtDQUFrQztBQUNwRTtBQUNPO0FBQ1A7QUFDQSxvQ0FBb0Msa0NBQWtDO0FBQ3RFO0FBQ087QUFDUDtBQUNBLHNDQUFzQyxrQ0FBa0M7QUFDeEU7QUFDTztBQUNQO0FBQ0EsbUNBQW1DLGtDQUFrQztBQUNyRTtBQUNPO0FBQ1A7QUFDQSxzQ0FBc0Msa0NBQWtDO0FBQ3hFO0FBQ087QUFDUDtBQUNBLG9DQUFvQyxrQ0FBa0M7QUFDdEU7QUFDTztBQUNQO0FBQ0Esb0NBQW9DLGtDQUFrQztBQUN0RTtBQUNPO0FBQ1A7QUFDQSxxQ0FBcUMsa0NBQWtDO0FBQ3ZFO0FBQ087QUFDUDtBQUNBLHFDQUFxQyxrQ0FBa0M7QUFDdkU7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hY29uZGEtYXNzZXNtZW50LTEvLi9zcmMvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zL2J1aWxkL2VzbS9zdGFibGVfYXR0cmlidXRlcy5qcz8yNjM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIERPIE5PVCBFRElULCB0aGlzIGlzIGFuIEF1dG8tZ2VuZXJhdGVkIGZpbGUgZnJvbSBzY3JpcHRzL3NlbWNvbnYvdGVtcGxhdGVzL3JlZ2lzdHJ5L3N0YWJsZS9hdHRyaWJ1dGVzLnRzLmoyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8qKlxuICogQVNQLk5FVCBDb3JlIGV4Y2VwdGlvbiBtaWRkbGV3YXJlIGhhbmRsaW5nIHJlc3VsdFxuICpcbiAqIEBleGFtcGxlIGhhbmRsZWRcbiAqIEBleGFtcGxlIHVuaGFuZGxlZFxuICovXG5leHBvcnQgY29uc3QgQVRUUl9BU1BORVRDT1JFX0RJQUdOT1NUSUNTX0VYQ0VQVElPTl9SRVNVTFQgPSAnYXNwbmV0Y29yZS5kaWFnbm9zdGljcy5leGNlcHRpb24ucmVzdWx0Jztcbi8qKlxuICogRW51bSB2YWx1ZSBcImFib3J0ZWRcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX0FTUE5FVENPUkVfRElBR05PU1RJQ1NfRVhDRVBUSU9OX1JFU1VMVH0uXG4gKlxuICogRXhjZXB0aW9uIGhhbmRsaW5nIGRpZG4ndCBydW4gYmVjYXVzZSB0aGUgcmVxdWVzdCB3YXMgYWJvcnRlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IEFTUE5FVENPUkVfRElBR05PU1RJQ1NfRVhDRVBUSU9OX1JFU1VMVF9WQUxVRV9BQk9SVEVEID0gXCJhYm9ydGVkXCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJoYW5kbGVkXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9BU1BORVRDT1JFX0RJQUdOT1NUSUNTX0VYQ0VQVElPTl9SRVNVTFR9LlxuICpcbiAqIEV4Y2VwdGlvbiB3YXMgaGFuZGxlZCBieSB0aGUgZXhjZXB0aW9uIGhhbmRsaW5nIG1pZGRsZXdhcmUuXG4gKi9cbmV4cG9ydCBjb25zdCBBU1BORVRDT1JFX0RJQUdOT1NUSUNTX0VYQ0VQVElPTl9SRVNVTFRfVkFMVUVfSEFORExFRCA9IFwiaGFuZGxlZFwiO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwic2tpcHBlZFwiIGZvciBhdHRyaWJ1dGUge0BsaW5rIEFUVFJfQVNQTkVUQ09SRV9ESUFHTk9TVElDU19FWENFUFRJT05fUkVTVUxUfS5cbiAqXG4gKiBFeGNlcHRpb24gaGFuZGxpbmcgd2FzIHNraXBwZWQgYmVjYXVzZSB0aGUgcmVzcG9uc2UgaGFkIHN0YXJ0ZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBBU1BORVRDT1JFX0RJQUdOT1NUSUNTX0VYQ0VQVElPTl9SRVNVTFRfVkFMVUVfU0tJUFBFRCA9IFwic2tpcHBlZFwiO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwidW5oYW5kbGVkXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9BU1BORVRDT1JFX0RJQUdOT1NUSUNTX0VYQ0VQVElPTl9SRVNVTFR9LlxuICpcbiAqIEV4Y2VwdGlvbiB3YXMgbm90IGhhbmRsZWQgYnkgdGhlIGV4Y2VwdGlvbiBoYW5kbGluZyBtaWRkbGV3YXJlLlxuICovXG5leHBvcnQgY29uc3QgQVNQTkVUQ09SRV9ESUFHTk9TVElDU19FWENFUFRJT05fUkVTVUxUX1ZBTFVFX1VOSEFORExFRCA9IFwidW5oYW5kbGVkXCI7XG4vKipcbiAqIEZ1bGwgdHlwZSBuYW1lIG9mIHRoZSBbYElFeGNlcHRpb25IYW5kbGVyYF0oaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2RvdG5ldC9hcGkvbWljcm9zb2Z0LmFzcG5ldGNvcmUuZGlhZ25vc3RpY3MuaWV4Y2VwdGlvbmhhbmRsZXIpIGltcGxlbWVudGF0aW9uIHRoYXQgaGFuZGxlZCB0aGUgZXhjZXB0aW9uLlxuICpcbiAqIEBleGFtcGxlIENvbnRvc28uTXlIYW5kbGVyXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX0FTUE5FVENPUkVfRElBR05PU1RJQ1NfSEFORExFUl9UWVBFID0gJ2FzcG5ldGNvcmUuZGlhZ25vc3RpY3MuaGFuZGxlci50eXBlJztcbi8qKlxuICogUmF0ZSBsaW1pdGluZyBwb2xpY3kgbmFtZS5cbiAqXG4gKiBAZXhhbXBsZSBmaXhlZFxuICogQGV4YW1wbGUgc2xpZGluZ1xuICogQGV4YW1wbGUgdG9rZW5cbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfQVNQTkVUQ09SRV9SQVRFX0xJTUlUSU5HX1BPTElDWSA9ICdhc3BuZXRjb3JlLnJhdGVfbGltaXRpbmcucG9saWN5Jztcbi8qKlxuICogUmF0ZS1saW1pdGluZyByZXN1bHQsIHNob3dzIHdoZXRoZXIgdGhlIGxlYXNlIHdhcyBhY3F1aXJlZCBvciBjb250YWlucyBhIHJlamVjdGlvbiByZWFzb25cbiAqXG4gKiBAZXhhbXBsZSBhY3F1aXJlZFxuICogQGV4YW1wbGUgcmVxdWVzdF9jYW5jZWxlZFxuICovXG5leHBvcnQgY29uc3QgQVRUUl9BU1BORVRDT1JFX1JBVEVfTElNSVRJTkdfUkVTVUxUID0gJ2FzcG5ldGNvcmUucmF0ZV9saW1pdGluZy5yZXN1bHQnO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwiYWNxdWlyZWRcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX0FTUE5FVENPUkVfUkFURV9MSU1JVElOR19SRVNVTFR9LlxuICpcbiAqIExlYXNlIHdhcyBhY3F1aXJlZFxuICovXG5leHBvcnQgY29uc3QgQVNQTkVUQ09SRV9SQVRFX0xJTUlUSU5HX1JFU1VMVF9WQUxVRV9BQ1FVSVJFRCA9IFwiYWNxdWlyZWRcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcImVuZHBvaW50X2xpbWl0ZXJcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX0FTUE5FVENPUkVfUkFURV9MSU1JVElOR19SRVNVTFR9LlxuICpcbiAqIExlYXNlIHJlcXVlc3Qgd2FzIHJlamVjdGVkIGJ5IHRoZSBlbmRwb2ludCBsaW1pdGVyXG4gKi9cbmV4cG9ydCBjb25zdCBBU1BORVRDT1JFX1JBVEVfTElNSVRJTkdfUkVTVUxUX1ZBTFVFX0VORFBPSU5UX0xJTUlURVIgPSBcImVuZHBvaW50X2xpbWl0ZXJcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcImdsb2JhbF9saW1pdGVyXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9BU1BORVRDT1JFX1JBVEVfTElNSVRJTkdfUkVTVUxUfS5cbiAqXG4gKiBMZWFzZSByZXF1ZXN0IHdhcyByZWplY3RlZCBieSB0aGUgZ2xvYmFsIGxpbWl0ZXJcbiAqL1xuZXhwb3J0IGNvbnN0IEFTUE5FVENPUkVfUkFURV9MSU1JVElOR19SRVNVTFRfVkFMVUVfR0xPQkFMX0xJTUlURVIgPSBcImdsb2JhbF9saW1pdGVyXCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJyZXF1ZXN0X2NhbmNlbGVkXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9BU1BORVRDT1JFX1JBVEVfTElNSVRJTkdfUkVTVUxUfS5cbiAqXG4gKiBMZWFzZSByZXF1ZXN0IHdhcyBjYW5jZWxlZFxuICovXG5leHBvcnQgY29uc3QgQVNQTkVUQ09SRV9SQVRFX0xJTUlUSU5HX1JFU1VMVF9WQUxVRV9SRVFVRVNUX0NBTkNFTEVEID0gXCJyZXF1ZXN0X2NhbmNlbGVkXCI7XG4vKipcbiAqIEZsYWcgaW5kaWNhdGluZyBpZiByZXF1ZXN0IHdhcyBoYW5kbGVkIGJ5IHRoZSBhcHBsaWNhdGlvbiBwaXBlbGluZS5cbiAqXG4gKiBAZXhhbXBsZSB0cnVlXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX0FTUE5FVENPUkVfUkVRVUVTVF9JU19VTkhBTkRMRUQgPSAnYXNwbmV0Y29yZS5yZXF1ZXN0LmlzX3VuaGFuZGxlZCc7XG4vKipcbiAqIEEgdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgbWF0Y2hlZCByb3V0ZSBpcyBhIGZhbGxiYWNrIHJvdXRlLlxuICpcbiAqIEBleGFtcGxlIHRydWVcbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfQVNQTkVUQ09SRV9ST1VUSU5HX0lTX0ZBTExCQUNLID0gJ2FzcG5ldGNvcmUucm91dGluZy5pc19mYWxsYmFjayc7XG4vKipcbiAqIE1hdGNoIHJlc3VsdCAtIHN1Y2Nlc3Mgb3IgZmFpbHVyZVxuICpcbiAqIEBleGFtcGxlIHN1Y2Nlc3NcbiAqIEBleGFtcGxlIGZhaWx1cmVcbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfQVNQTkVUQ09SRV9ST1VUSU5HX01BVENIX1NUQVRVUyA9ICdhc3BuZXRjb3JlLnJvdXRpbmcubWF0Y2hfc3RhdHVzJztcbi8qKlxuICogRW51bSB2YWx1ZSBcImZhaWx1cmVcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX0FTUE5FVENPUkVfUk9VVElOR19NQVRDSF9TVEFUVVN9LlxuICpcbiAqIE1hdGNoIGZhaWxlZFxuICovXG5leHBvcnQgY29uc3QgQVNQTkVUQ09SRV9ST1VUSU5HX01BVENIX1NUQVRVU19WQUxVRV9GQUlMVVJFID0gXCJmYWlsdXJlXCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJzdWNjZXNzXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9BU1BORVRDT1JFX1JPVVRJTkdfTUFUQ0hfU1RBVFVTfS5cbiAqXG4gKiBNYXRjaCBzdWNjZWVkZWRcbiAqL1xuZXhwb3J0IGNvbnN0IEFTUE5FVENPUkVfUk9VVElOR19NQVRDSF9TVEFUVVNfVkFMVUVfU1VDQ0VTUyA9IFwic3VjY2Vzc1wiO1xuLyoqXG4gKiBDbGllbnQgYWRkcmVzcyAtIGRvbWFpbiBuYW1lIGlmIGF2YWlsYWJsZSB3aXRob3V0IHJldmVyc2UgRE5TIGxvb2t1cDsgb3RoZXJ3aXNlLCBJUCBhZGRyZXNzIG9yIFVuaXggZG9tYWluIHNvY2tldCBuYW1lLlxuICpcbiAqIEBleGFtcGxlIGNsaWVudC5leGFtcGxlLmNvbVxuICogQGV4YW1wbGUgMTAuMS4yLjgwXG4gKiBAZXhhbXBsZSAvdG1wL215LnNvY2tcbiAqXG4gKiBAbm90ZSBXaGVuIG9ic2VydmVkIGZyb20gdGhlIHNlcnZlciBzaWRlLCBhbmQgd2hlbiBjb21tdW5pY2F0aW5nIHRocm91Z2ggYW4gaW50ZXJtZWRpYXJ5LCBgY2xpZW50LmFkZHJlc3NgICoqU0hPVUxEKiogcmVwcmVzZW50IHRoZSBjbGllbnQgYWRkcmVzcyBiZWhpbmQgYW55IGludGVybWVkaWFyaWVzLCAgZm9yIGV4YW1wbGUgcHJveGllcywgaWYgaXQncyBhdmFpbGFibGUuXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX0NMSUVOVF9BRERSRVNTID0gJ2NsaWVudC5hZGRyZXNzJztcbi8qKlxuICogQ2xpZW50IHBvcnQgbnVtYmVyLlxuICpcbiAqIEBleGFtcGxlIDY1MTIzXG4gKlxuICogQG5vdGUgV2hlbiBvYnNlcnZlZCBmcm9tIHRoZSBzZXJ2ZXIgc2lkZSwgYW5kIHdoZW4gY29tbXVuaWNhdGluZyB0aHJvdWdoIGFuIGludGVybWVkaWFyeSwgYGNsaWVudC5wb3J0YCAqKlNIT1VMRCoqIHJlcHJlc2VudCB0aGUgY2xpZW50IHBvcnQgYmVoaW5kIGFueSBpbnRlcm1lZGlhcmllcywgIGZvciBleGFtcGxlIHByb3hpZXMsIGlmIGl0J3MgYXZhaWxhYmxlLlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9DTElFTlRfUE9SVCA9ICdjbGllbnQucG9ydCc7XG4vKipcbiAqIFRoZSBjb2x1bW4gbnVtYmVyIGluIGBjb2RlLmZpbGUucGF0aGAgYmVzdCByZXByZXNlbnRpbmcgdGhlIG9wZXJhdGlvbi4gSXQgKipTSE9VTEQqKiBwb2ludCB3aXRoaW4gdGhlIGNvZGUgdW5pdCBuYW1lZCBpbiBgY29kZS5mdW5jdGlvbi5uYW1lYC4gVGhpcyBhdHRyaWJ1dGUgKipNVVNUIE5PVCoqIGJlIHVzZWQgb24gdGhlIFByb2ZpbGUgc2lnbmFsIHNpbmNlIHRoZSBkYXRhIGlzIGFscmVhZHkgY2FwdHVyZWQgaW4gJ21lc3NhZ2UgTGluZScuIFRoaXMgY29uc3RyYWludCBpcyBpbXBvc2VkIHRvIHByZXZlbnQgcmVkdW5kYW5jeSBhbmQgbWFpbnRhaW4gZGF0YSBpbnRlZ3JpdHkuXG4gKlxuICogQGV4YW1wbGUgMTZcbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfQ09ERV9DT0xVTU5fTlVNQkVSID0gJ2NvZGUuY29sdW1uLm51bWJlcic7XG4vKipcbiAqIFRoZSBzb3VyY2UgY29kZSBmaWxlIG5hbWUgdGhhdCBpZGVudGlmaWVzIHRoZSBjb2RlIHVuaXQgYXMgdW5pcXVlbHkgYXMgcG9zc2libGUgKHByZWZlcmFibHkgYW4gYWJzb2x1dGUgZmlsZSBwYXRoKS4gVGhpcyBhdHRyaWJ1dGUgKipNVVNUIE5PVCoqIGJlIHVzZWQgb24gdGhlIFByb2ZpbGUgc2lnbmFsIHNpbmNlIHRoZSBkYXRhIGlzIGFscmVhZHkgY2FwdHVyZWQgaW4gJ21lc3NhZ2UgRnVuY3Rpb24nLiBUaGlzIGNvbnN0cmFpbnQgaXMgaW1wb3NlZCB0byBwcmV2ZW50IHJlZHVuZGFuY3kgYW5kIG1haW50YWluIGRhdGEgaW50ZWdyaXR5LlxuICpcbiAqIEBleGFtcGxlIFwiL3Vzci9sb2NhbC9NeUFwcGxpY2F0aW9uL2NvbnRlbnRfcm9vdC9hcHAvaW5kZXgucGhwXCJcbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfQ09ERV9GSUxFX1BBVEggPSAnY29kZS5maWxlLnBhdGgnO1xuLyoqXG4gKiBUaGUgbWV0aG9kIG9yIGZ1bmN0aW9uIGZ1bGx5LXF1YWxpZmllZCBuYW1lIHdpdGhvdXQgYXJndW1lbnRzLiBUaGUgdmFsdWUgc2hvdWxkIGZpdCB0aGUgbmF0dXJhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgbGFuZ3VhZ2UgcnVudGltZSwgd2hpY2ggaXMgYWxzbyBsaWtlbHkgdGhlIHNhbWUgdXNlZCB3aXRoaW4gYGNvZGUuc3RhY2t0cmFjZWAgYXR0cmlidXRlIHZhbHVlLiBUaGlzIGF0dHJpYnV0ZSAqKk1VU1QgTk9UKiogYmUgdXNlZCBvbiB0aGUgUHJvZmlsZSBzaWduYWwgc2luY2UgdGhlIGRhdGEgaXMgYWxyZWFkeSBjYXB0dXJlZCBpbiAnbWVzc2FnZSBGdW5jdGlvbicuIFRoaXMgY29uc3RyYWludCBpcyBpbXBvc2VkIHRvIHByZXZlbnQgcmVkdW5kYW5jeSBhbmQgbWFpbnRhaW4gZGF0YSBpbnRlZ3JpdHkuXG4gKlxuICogQGV4YW1wbGUgY29tLmV4YW1wbGUuTXlIdHRwU2VydmljZS5zZXJ2ZVJlcXVlc3RcbiAqIEBleGFtcGxlIEd1enpsZUh0dHBcXFxcQ2xpZW50Ojp0cmFuc2ZlclxuICogQGV4YW1wbGUgZm9wZW5cbiAqXG4gKiBAbm90ZSBWYWx1ZXMgYW5kIGZvcm1hdCBkZXBlbmRzIG9uIGVhY2ggbGFuZ3VhZ2UgcnVudGltZSwgdGh1cyBpdCBpcyBpbXBvc3NpYmxlIHRvIHByb3ZpZGUgYW4gZXhoYXVzdGl2ZSBsaXN0IG9mIGV4YW1wbGVzLlxuICogVGhlIHZhbHVlcyBhcmUgdXN1YWxseSB0aGUgc2FtZSAob3IgcHJlZml4ZXMgb2YpIHRoZSBvbmVzIGZvdW5kIGluIG5hdGl2ZSBzdGFjayB0cmFjZSByZXByZXNlbnRhdGlvbiBzdG9yZWQgaW5cbiAqIGBjb2RlLnN0YWNrdHJhY2VgIHdpdGhvdXQgaW5mb3JtYXRpb24gb24gYXJndW1lbnRzLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgLSBKYXZhIG1ldGhvZDogYGNvbS5leGFtcGxlLk15SHR0cFNlcnZpY2Uuc2VydmVSZXF1ZXN0YFxuICogICAtIEphdmEgYW5vbnltb3VzIGNsYXNzIG1ldGhvZDogYGNvbS5teWNvbXBhbnkuTWFpbiQxLm15TWV0aG9kYFxuICogICAtIEphdmEgbGFtYmRhIG1ldGhvZDogYGNvbS5teWNvbXBhbnkuTWFpbiQkTGFtYmRhLzB4MDAwMDc0OGFlNDE0OWMwMC5teU1ldGhvZGBcbiAqICAgLSBQSFAgZnVuY3Rpb246IGBHdXp6bGVIdHRwXFxDbGllbnQ6OnRyYW5zZmVyYFxuICogICAtIEdvIGZ1bmN0aW9uOiBgZ2l0aHViLmNvbS9teS9yZXBvL3BrZy5mb28uZnVuYzVgXG4gKiAgIC0gRWxpeGlyOiBgT3BlblRlbGVtZXRyeS5DdHgubmV3YFxuICogICAtIEVybGFuZzogYG9wZW50ZWxlbWV0cnlfY3R4Om5ld2BcbiAqICAgLSBSdXN0OiBgcGxheWdyb3VuZDo6bXlfbW9kdWxlOjpteV9jb29sX2Z1bmNgXG4gKiAgIC0gQyBmdW5jdGlvbjogYGZvcGVuYFxuICovXG5leHBvcnQgY29uc3QgQVRUUl9DT0RFX0ZVTkNUSU9OX05BTUUgPSAnY29kZS5mdW5jdGlvbi5uYW1lJztcbi8qKlxuICogVGhlIGxpbmUgbnVtYmVyIGluIGBjb2RlLmZpbGUucGF0aGAgYmVzdCByZXByZXNlbnRpbmcgdGhlIG9wZXJhdGlvbi4gSXQgKipTSE9VTEQqKiBwb2ludCB3aXRoaW4gdGhlIGNvZGUgdW5pdCBuYW1lZCBpbiBgY29kZS5mdW5jdGlvbi5uYW1lYC4gVGhpcyBhdHRyaWJ1dGUgKipNVVNUIE5PVCoqIGJlIHVzZWQgb24gdGhlIFByb2ZpbGUgc2lnbmFsIHNpbmNlIHRoZSBkYXRhIGlzIGFscmVhZHkgY2FwdHVyZWQgaW4gJ21lc3NhZ2UgTGluZScuIFRoaXMgY29uc3RyYWludCBpcyBpbXBvc2VkIHRvIHByZXZlbnQgcmVkdW5kYW5jeSBhbmQgbWFpbnRhaW4gZGF0YSBpbnRlZ3JpdHkuXG4gKlxuICogQGV4YW1wbGUgNDJcbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfQ09ERV9MSU5FX05VTUJFUiA9ICdjb2RlLmxpbmUubnVtYmVyJztcbi8qKlxuICogQSBzdGFja3RyYWNlIGFzIGEgc3RyaW5nIGluIHRoZSBuYXR1cmFsIHJlcHJlc2VudGF0aW9uIGZvciB0aGUgbGFuZ3VhZ2UgcnVudGltZS4gVGhlIHJlcHJlc2VudGF0aW9uIGlzIGlkZW50aWNhbCB0byBbYGV4Y2VwdGlvbi5zdGFja3RyYWNlYF0oL2RvY3MvZXhjZXB0aW9ucy9leGNlcHRpb25zLXNwYW5zLm1kI3N0YWNrdHJhY2UtcmVwcmVzZW50YXRpb24pLiBUaGlzIGF0dHJpYnV0ZSAqKk1VU1QgTk9UKiogYmUgdXNlZCBvbiB0aGUgUHJvZmlsZSBzaWduYWwgc2luY2UgdGhlIGRhdGEgaXMgYWxyZWFkeSBjYXB0dXJlZCBpbiAnbWVzc2FnZSBMb2NhdGlvbicuIFRoaXMgY29uc3RyYWludCBpcyBpbXBvc2VkIHRvIHByZXZlbnQgcmVkdW5kYW5jeSBhbmQgbWFpbnRhaW4gZGF0YSBpbnRlZ3JpdHkuXG4gKlxuICogQGV4YW1wbGUgXCJhdCBjb20uZXhhbXBsZS5HZW5lcmF0ZVRyYWNlLm1ldGhvZEIoR2VuZXJhdGVUcmFjZS5qYXZhOjEzKVxcXFxuIGF0IGNvbS5leGFtcGxlLkdlbmVyYXRlVHJhY2UubWV0aG9kQShHZW5lcmF0ZVRyYWNlLmphdmE6OSlcXFxcbiBhdCBjb20uZXhhbXBsZS5HZW5lcmF0ZVRyYWNlLm1haW4oR2VuZXJhdGVUcmFjZS5qYXZhOjUpXFxcXG5cIlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9DT0RFX1NUQUNLVFJBQ0UgPSAnY29kZS5zdGFja3RyYWNlJztcbi8qKlxuICogVGhlIG5hbWUgb2YgYSBjb2xsZWN0aW9uICh0YWJsZSwgY29udGFpbmVyKSB3aXRoaW4gdGhlIGRhdGFiYXNlLlxuICpcbiAqIEBleGFtcGxlIHB1YmxpYy51c2Vyc1xuICogQGV4YW1wbGUgY3VzdG9tZXJzXG4gKlxuICogQG5vdGUgSXQgaXMgKipSRUNPTU1FTkRFRCoqIHRvIGNhcHR1cmUgdGhlIHZhbHVlIGFzIHByb3ZpZGVkIGJ5IHRoZSBhcHBsaWNhdGlvblxuICogd2l0aG91dCBhdHRlbXB0aW5nIHRvIGRvIGFueSBjYXNlIG5vcm1hbGl6YXRpb24uXG4gKlxuICogVGhlIGNvbGxlY3Rpb24gbmFtZSAqKlNIT1VMRCBOT1QqKiBiZSBleHRyYWN0ZWQgZnJvbSBgZGIucXVlcnkudGV4dGAsXG4gKiB3aGVuIHRoZSBkYXRhYmFzZSBzeXN0ZW0gc3VwcG9ydHMgcXVlcnkgdGV4dCB3aXRoIG11bHRpcGxlIGNvbGxlY3Rpb25zXG4gKiBpbiBub24tYmF0Y2ggb3BlcmF0aW9ucy5cbiAqXG4gKiBGb3IgYmF0Y2ggb3BlcmF0aW9ucywgaWYgdGhlIGluZGl2aWR1YWwgb3BlcmF0aW9ucyBhcmUga25vd24gdG8gaGF2ZSB0aGUgc2FtZVxuICogY29sbGVjdGlvbiBuYW1lIHRoZW4gdGhhdCBjb2xsZWN0aW9uIG5hbWUgKipTSE9VTEQqKiBiZSB1c2VkLlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9EQl9DT0xMRUNUSU9OX05BTUUgPSAnZGIuY29sbGVjdGlvbi5uYW1lJztcbi8qKlxuICogVGhlIG5hbWUgb2YgdGhlIGRhdGFiYXNlLCBmdWxseSBxdWFsaWZpZWQgd2l0aGluIHRoZSBzZXJ2ZXIgYWRkcmVzcyBhbmQgcG9ydC5cbiAqXG4gKiBAZXhhbXBsZSBjdXN0b21lcnNcbiAqIEBleGFtcGxlIHRlc3QudXNlcnNcbiAqXG4gKiBAbm90ZSBJZiBhIGRhdGFiYXNlIHN5c3RlbSBoYXMgbXVsdGlwbGUgbmFtZXNwYWNlIGNvbXBvbmVudHMsIHRoZXkgKipTSE9VTEQqKiBiZSBjb25jYXRlbmF0ZWQgZnJvbSB0aGUgbW9zdCBnZW5lcmFsIHRvIHRoZSBtb3N0IHNwZWNpZmljIG5hbWVzcGFjZSBjb21wb25lbnQsIHVzaW5nIGB8YCBhcyBhIHNlcGFyYXRvciBiZXR3ZWVuIHRoZSBjb21wb25lbnRzLiBBbnkgbWlzc2luZyBjb21wb25lbnRzIChhbmQgdGhlaXIgYXNzb2NpYXRlZCBzZXBhcmF0b3JzKSAqKlNIT1VMRCoqIGJlIG9taXR0ZWQuXG4gKiBTZW1hbnRpYyBjb252ZW50aW9ucyBmb3IgaW5kaXZpZHVhbCBkYXRhYmFzZSBzeXN0ZW1zICoqU0hPVUxEKiogZG9jdW1lbnQgd2hhdCBgZGIubmFtZXNwYWNlYCBtZWFucyBpbiB0aGUgY29udGV4dCBvZiB0aGF0IHN5c3RlbS5cbiAqIEl0IGlzICoqUkVDT01NRU5ERUQqKiB0byBjYXB0dXJlIHRoZSB2YWx1ZSBhcyBwcm92aWRlZCBieSB0aGUgYXBwbGljYXRpb24gd2l0aG91dCBhdHRlbXB0aW5nIHRvIGRvIGFueSBjYXNlIG5vcm1hbGl6YXRpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX0RCX05BTUVTUEFDRSA9ICdkYi5uYW1lc3BhY2UnO1xuLyoqXG4gKiBUaGUgbnVtYmVyIG9mIHF1ZXJpZXMgaW5jbHVkZWQgaW4gYSBiYXRjaCBvcGVyYXRpb24uXG4gKlxuICogQGV4YW1wbGUgMlxuICogQGV4YW1wbGUgM1xuICogQGV4YW1wbGUgNFxuICpcbiAqIEBub3RlIE9wZXJhdGlvbnMgYXJlIG9ubHkgY29uc2lkZXJlZCBiYXRjaGVzIHdoZW4gdGhleSBjb250YWluIHR3byBvciBtb3JlIG9wZXJhdGlvbnMsIGFuZCBzbyBgZGIub3BlcmF0aW9uLmJhdGNoLnNpemVgICoqU0hPVUxEKiogbmV2ZXIgYmUgYDFgLlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9EQl9PUEVSQVRJT05fQkFUQ0hfU0laRSA9ICdkYi5vcGVyYXRpb24uYmF0Y2guc2l6ZSc7XG4vKipcbiAqIFRoZSBuYW1lIG9mIHRoZSBvcGVyYXRpb24gb3IgY29tbWFuZCBiZWluZyBleGVjdXRlZC5cbiAqXG4gKiBAZXhhbXBsZSBmaW5kQW5kTW9kaWZ5XG4gKiBAZXhhbXBsZSBITVNFVFxuICogQGV4YW1wbGUgU0VMRUNUXG4gKlxuICogQG5vdGUgSXQgaXMgKipSRUNPTU1FTkRFRCoqIHRvIGNhcHR1cmUgdGhlIHZhbHVlIGFzIHByb3ZpZGVkIGJ5IHRoZSBhcHBsaWNhdGlvblxuICogd2l0aG91dCBhdHRlbXB0aW5nIHRvIGRvIGFueSBjYXNlIG5vcm1hbGl6YXRpb24uXG4gKlxuICogVGhlIG9wZXJhdGlvbiBuYW1lICoqU0hPVUxEIE5PVCoqIGJlIGV4dHJhY3RlZCBmcm9tIGBkYi5xdWVyeS50ZXh0YCxcbiAqIHdoZW4gdGhlIGRhdGFiYXNlIHN5c3RlbSBzdXBwb3J0cyBxdWVyeSB0ZXh0IHdpdGggbXVsdGlwbGUgb3BlcmF0aW9uc1xuICogaW4gbm9uLWJhdGNoIG9wZXJhdGlvbnMuXG4gKlxuICogSWYgc3BhY2VzIGNhbiBvY2N1ciBpbiB0aGUgb3BlcmF0aW9uIG5hbWUsIG11bHRpcGxlIGNvbnNlY3V0aXZlIHNwYWNlc1xuICogKipTSE9VTEQqKiBiZSBub3JtYWxpemVkIHRvIGEgc2luZ2xlIHNwYWNlLlxuICpcbiAqIEZvciBiYXRjaCBvcGVyYXRpb25zLCBpZiB0aGUgaW5kaXZpZHVhbCBvcGVyYXRpb25zIGFyZSBrbm93biB0byBoYXZlIHRoZSBzYW1lIG9wZXJhdGlvbiBuYW1lXG4gKiB0aGVuIHRoYXQgb3BlcmF0aW9uIG5hbWUgKipTSE9VTEQqKiBiZSB1c2VkIHByZXBlbmRlZCBieSBgQkFUQ0ggYCxcbiAqIG90aGVyd2lzZSBgZGIub3BlcmF0aW9uLm5hbWVgICoqU0hPVUxEKiogYmUgYEJBVENIYCBvciBzb21lIG90aGVyIGRhdGFiYXNlXG4gKiBzeXN0ZW0gc3BlY2lmaWMgdGVybSBpZiBtb3JlIGFwcGxpY2FibGUuXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX0RCX09QRVJBVElPTl9OQU1FID0gJ2RiLm9wZXJhdGlvbi5uYW1lJztcbi8qKlxuICogTG93IGNhcmRpbmFsaXR5IHN1bW1hcnkgb2YgYSBkYXRhYmFzZSBxdWVyeS5cbiAqXG4gKiBAZXhhbXBsZSBTRUxFQ1Qgd3VzZXJfdGFibGVcbiAqIEBleGFtcGxlIElOU0VSVCBzaGlwcGluZ19kZXRhaWxzIFNFTEVDVCBvcmRlcnNcbiAqIEBleGFtcGxlIGdldCB1c2VyIGJ5IGlkXG4gKlxuICogQG5vdGUgVGhlIHF1ZXJ5IHN1bW1hcnkgZGVzY3JpYmVzIGEgY2xhc3Mgb2YgZGF0YWJhc2UgcXVlcmllcyBhbmQgaXMgdXNlZnVsXG4gKiBhcyBhIGdyb3VwaW5nIGtleSwgZXNwZWNpYWxseSB3aGVuIGFuYWx5emluZyB0ZWxlbWV0cnkgZm9yIGRhdGFiYXNlXG4gKiBjYWxscyBpbnZvbHZpbmcgY29tcGxleCBxdWVyaWVzLlxuICpcbiAqIFN1bW1hcnkgbWF5IGJlIGF2YWlsYWJsZSB0byB0aGUgaW5zdHJ1bWVudGF0aW9uIHRocm91Z2hcbiAqIGluc3RydW1lbnRhdGlvbiBob29rcyBvciBvdGhlciBtZWFucy4gSWYgaXQgaXMgbm90IGF2YWlsYWJsZSwgaW5zdHJ1bWVudGF0aW9uc1xuICogdGhhdCBzdXBwb3J0IHF1ZXJ5IHBhcnNpbmcgKipTSE9VTEQqKiBnZW5lcmF0ZSBhIHN1bW1hcnkgZm9sbG93aW5nXG4gKiBbR2VuZXJhdGluZyBxdWVyeSBzdW1tYXJ5XSgvZG9jcy9kYXRhYmFzZS9kYXRhYmFzZS1zcGFucy5tZCNnZW5lcmF0aW5nLWEtc3VtbWFyeS1vZi10aGUtcXVlcnkpXG4gKiBzZWN0aW9uLlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9EQl9RVUVSWV9TVU1NQVJZID0gJ2RiLnF1ZXJ5LnN1bW1hcnknO1xuLyoqXG4gKiBUaGUgZGF0YWJhc2UgcXVlcnkgYmVpbmcgZXhlY3V0ZWQuXG4gKlxuICogQGV4YW1wbGUgU0VMRUNUICogRlJPTSB3dXNlcl90YWJsZSB3aGVyZSB1c2VybmFtZSA9ID9cbiAqIEBleGFtcGxlIFNFVCBteWtleSA/XG4gKlxuICogQG5vdGUgRm9yIHNhbml0aXphdGlvbiBzZWUgW1Nhbml0aXphdGlvbiBvZiBgZGIucXVlcnkudGV4dGBdKC9kb2NzL2RhdGFiYXNlL2RhdGFiYXNlLXNwYW5zLm1kI3Nhbml0aXphdGlvbi1vZi1kYnF1ZXJ5dGV4dCkuXG4gKiBGb3IgYmF0Y2ggb3BlcmF0aW9ucywgaWYgdGhlIGluZGl2aWR1YWwgb3BlcmF0aW9ucyBhcmUga25vd24gdG8gaGF2ZSB0aGUgc2FtZSBxdWVyeSB0ZXh0IHRoZW4gdGhhdCBxdWVyeSB0ZXh0ICoqU0hPVUxEKiogYmUgdXNlZCwgb3RoZXJ3aXNlIGFsbCBvZiB0aGUgaW5kaXZpZHVhbCBxdWVyeSB0ZXh0cyAqKlNIT1VMRCoqIGJlIGNvbmNhdGVuYXRlZCB3aXRoIHNlcGFyYXRvciBgOyBgIG9yIHNvbWUgb3RoZXIgZGF0YWJhc2Ugc3lzdGVtIHNwZWNpZmljIHNlcGFyYXRvciBpZiBtb3JlIGFwcGxpY2FibGUuXG4gKiBQYXJhbWV0ZXJpemVkIHF1ZXJ5IHRleHQgKipTSE9VTEQgTk9UKiogYmUgc2FuaXRpemVkLiBFdmVuIHRob3VnaCBwYXJhbWV0ZXJpemVkIHF1ZXJ5IHRleHQgY2FuIHBvdGVudGlhbGx5IGhhdmUgc2Vuc2l0aXZlIGRhdGEsIGJ5IHVzaW5nIGEgcGFyYW1ldGVyaXplZCBxdWVyeSB0aGUgdXNlciBpcyBnaXZpbmcgYSBzdHJvbmcgc2lnbmFsIHRoYXQgYW55IHNlbnNpdGl2ZSBkYXRhIHdpbGwgYmUgcGFzc2VkIGFzIHBhcmFtZXRlciB2YWx1ZXMsIGFuZCB0aGUgYmVuZWZpdCB0byBvYnNlcnZhYmlsaXR5IG9mIGNhcHR1cmluZyB0aGUgc3RhdGljIHBhcnQgb2YgdGhlIHF1ZXJ5IHRleHQgYnkgZGVmYXVsdCBvdXR3ZWlnaHMgdGhlIHJpc2suXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX0RCX1FVRVJZX1RFWFQgPSAnZGIucXVlcnkudGV4dCc7XG4vKipcbiAqIERhdGFiYXNlIHJlc3BvbnNlIHN0YXR1cyBjb2RlLlxuICpcbiAqIEBleGFtcGxlIDEwMlxuICogQGV4YW1wbGUgT1JBLTE3MDAyXG4gKiBAZXhhbXBsZSAwOFAwMVxuICogQGV4YW1wbGUgNDA0XG4gKlxuICogQG5vdGUgVGhlIHN0YXR1cyBjb2RlIHJldHVybmVkIGJ5IHRoZSBkYXRhYmFzZS4gVXN1YWxseSBpdCByZXByZXNlbnRzIGFuIGVycm9yIGNvZGUsIGJ1dCBtYXkgYWxzbyByZXByZXNlbnQgcGFydGlhbCBzdWNjZXNzLCB3YXJuaW5nLCBvciBkaWZmZXJlbnRpYXRlIGJldHdlZW4gdmFyaW91cyB0eXBlcyBvZiBzdWNjZXNzZnVsIG91dGNvbWVzLlxuICogU2VtYW50aWMgY29udmVudGlvbnMgZm9yIGluZGl2aWR1YWwgZGF0YWJhc2Ugc3lzdGVtcyAqKlNIT1VMRCoqIGRvY3VtZW50IHdoYXQgYGRiLnJlc3BvbnNlLnN0YXR1c19jb2RlYCBtZWFucyBpbiB0aGUgY29udGV4dCBvZiB0aGF0IHN5c3RlbS5cbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfREJfUkVTUE9OU0VfU1RBVFVTX0NPREUgPSAnZGIucmVzcG9uc2Uuc3RhdHVzX2NvZGUnO1xuLyoqXG4gKiBUaGUgbmFtZSBvZiBhIHN0b3JlZCBwcm9jZWR1cmUgd2l0aGluIHRoZSBkYXRhYmFzZS5cbiAqXG4gKiBAZXhhbXBsZSBHZXRDdXN0b21lclxuICpcbiAqIEBub3RlIEl0IGlzICoqUkVDT01NRU5ERUQqKiB0byBjYXB0dXJlIHRoZSB2YWx1ZSBhcyBwcm92aWRlZCBieSB0aGUgYXBwbGljYXRpb25cbiAqIHdpdGhvdXQgYXR0ZW1wdGluZyB0byBkbyBhbnkgY2FzZSBub3JtYWxpemF0aW9uLlxuICpcbiAqIEZvciBiYXRjaCBvcGVyYXRpb25zLCBpZiB0aGUgaW5kaXZpZHVhbCBvcGVyYXRpb25zIGFyZSBrbm93biB0byBoYXZlIHRoZSBzYW1lXG4gKiBzdG9yZWQgcHJvY2VkdXJlIG5hbWUgdGhlbiB0aGF0IHN0b3JlZCBwcm9jZWR1cmUgbmFtZSAqKlNIT1VMRCoqIGJlIHVzZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX0RCX1NUT1JFRF9QUk9DRURVUkVfTkFNRSA9ICdkYi5zdG9yZWRfcHJvY2VkdXJlLm5hbWUnO1xuLyoqXG4gKiBUaGUgZGF0YWJhc2UgbWFuYWdlbWVudCBzeXN0ZW0gKERCTVMpIHByb2R1Y3QgYXMgaWRlbnRpZmllZCBieSB0aGUgY2xpZW50IGluc3RydW1lbnRhdGlvbi5cbiAqXG4gKiBAbm90ZSBUaGUgYWN0dWFsIERCTVMgbWF5IGRpZmZlciBmcm9tIHRoZSBvbmUgaWRlbnRpZmllZCBieSB0aGUgY2xpZW50LiBGb3IgZXhhbXBsZSwgd2hlbiB1c2luZyBQb3N0Z3JlU1FMIGNsaWVudCBsaWJyYXJpZXMgdG8gY29ubmVjdCB0byBhIENvY2tyb2FjaERCLCB0aGUgYGRiLnN5c3RlbS5uYW1lYCBpcyBzZXQgdG8gYHBvc3RncmVzcWxgIGJhc2VkIG9uIHRoZSBpbnN0cnVtZW50YXRpb24ncyBiZXN0IGtub3dsZWRnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfREJfU1lTVEVNX05BTUUgPSAnZGIuc3lzdGVtLm5hbWUnO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwibWFyaWFkYlwiIGZvciBhdHRyaWJ1dGUge0BsaW5rIEFUVFJfREJfU1lTVEVNX05BTUV9LlxuICpcbiAqIFtNYXJpYURCXShodHRwczovL21hcmlhZGIub3JnLylcbiAqL1xuZXhwb3J0IGNvbnN0IERCX1NZU1RFTV9OQU1FX1ZBTFVFX01BUklBREIgPSBcIm1hcmlhZGJcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcIm1pY3Jvc29mdC5zcWxfc2VydmVyXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9EQl9TWVNURU1fTkFNRX0uXG4gKlxuICogW01pY3Jvc29mdCBTUUwgU2VydmVyXShodHRwczovL3d3dy5taWNyb3NvZnQuY29tL3NxbC1zZXJ2ZXIpXG4gKi9cbmV4cG9ydCBjb25zdCBEQl9TWVNURU1fTkFNRV9WQUxVRV9NSUNST1NPRlRfU1FMX1NFUlZFUiA9IFwibWljcm9zb2Z0LnNxbF9zZXJ2ZXJcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcIm15c3FsXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9EQl9TWVNURU1fTkFNRX0uXG4gKlxuICogW015U1FMXShodHRwczovL3d3dy5teXNxbC5jb20vKVxuICovXG5leHBvcnQgY29uc3QgREJfU1lTVEVNX05BTUVfVkFMVUVfTVlTUUwgPSBcIm15c3FsXCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJwb3N0Z3Jlc3FsXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9EQl9TWVNURU1fTkFNRX0uXG4gKlxuICogW1Bvc3RncmVTUUxdKGh0dHBzOi8vd3d3LnBvc3RncmVzcWwub3JnLylcbiAqL1xuZXhwb3J0IGNvbnN0IERCX1NZU1RFTV9OQU1FX1ZBTFVFX1BPU1RHUkVTUUwgPSBcInBvc3RncmVzcWxcIjtcbi8qKlxuICogTmFtZSBvZiB0aGUgZ2FyYmFnZSBjb2xsZWN0b3IgbWFuYWdlZCBoZWFwIGdlbmVyYXRpb24uXG4gKlxuICogQGV4YW1wbGUgZ2VuMFxuICogQGV4YW1wbGUgZ2VuMVxuICogQGV4YW1wbGUgZ2VuMlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9ET1RORVRfR0NfSEVBUF9HRU5FUkFUSU9OID0gJ2RvdG5ldC5nYy5oZWFwLmdlbmVyYXRpb24nO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwiZ2VuMFwiIGZvciBhdHRyaWJ1dGUge0BsaW5rIEFUVFJfRE9UTkVUX0dDX0hFQVBfR0VORVJBVElPTn0uXG4gKlxuICogR2VuZXJhdGlvbiAwXG4gKi9cbmV4cG9ydCBjb25zdCBET1RORVRfR0NfSEVBUF9HRU5FUkFUSU9OX1ZBTFVFX0dFTjAgPSBcImdlbjBcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcImdlbjFcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX0RPVE5FVF9HQ19IRUFQX0dFTkVSQVRJT059LlxuICpcbiAqIEdlbmVyYXRpb24gMVxuICovXG5leHBvcnQgY29uc3QgRE9UTkVUX0dDX0hFQVBfR0VORVJBVElPTl9WQUxVRV9HRU4xID0gXCJnZW4xXCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJnZW4yXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9ET1RORVRfR0NfSEVBUF9HRU5FUkFUSU9OfS5cbiAqXG4gKiBHZW5lcmF0aW9uIDJcbiAqL1xuZXhwb3J0IGNvbnN0IERPVE5FVF9HQ19IRUFQX0dFTkVSQVRJT05fVkFMVUVfR0VOMiA9IFwiZ2VuMlwiO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwibG9oXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9ET1RORVRfR0NfSEVBUF9HRU5FUkFUSU9OfS5cbiAqXG4gKiBMYXJnZSBPYmplY3QgSGVhcFxuICovXG5leHBvcnQgY29uc3QgRE9UTkVUX0dDX0hFQVBfR0VORVJBVElPTl9WQUxVRV9MT0ggPSBcImxvaFwiO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwicG9oXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9ET1RORVRfR0NfSEVBUF9HRU5FUkFUSU9OfS5cbiAqXG4gKiBQaW5uZWQgT2JqZWN0IEhlYXBcbiAqL1xuZXhwb3J0IGNvbnN0IERPVE5FVF9HQ19IRUFQX0dFTkVSQVRJT05fVkFMVUVfUE9IID0gXCJwb2hcIjtcbi8qKlxuICogRGVzY3JpYmVzIGEgY2xhc3Mgb2YgZXJyb3IgdGhlIG9wZXJhdGlvbiBlbmRlZCB3aXRoLlxuICpcbiAqIEBleGFtcGxlIHRpbWVvdXRcbiAqIEBleGFtcGxlIGphdmEubmV0LlVua25vd25Ib3N0RXhjZXB0aW9uXG4gKiBAZXhhbXBsZSBzZXJ2ZXJfY2VydGlmaWNhdGVfaW52YWxpZFxuICogQGV4YW1wbGUgNTAwXG4gKlxuICogQG5vdGUgVGhlIGBlcnJvci50eXBlYCAqKlNIT1VMRCoqIGJlIHByZWRpY3RhYmxlLCBhbmQgKipTSE9VTEQqKiBoYXZlIGxvdyBjYXJkaW5hbGl0eS5cbiAqXG4gKiBXaGVuIGBlcnJvci50eXBlYCBpcyBzZXQgdG8gYSB0eXBlIChlLmcuLCBhbiBleGNlcHRpb24gdHlwZSksIGl0c1xuICogY2Fub25pY2FsIGNsYXNzIG5hbWUgaWRlbnRpZnlpbmcgdGhlIHR5cGUgd2l0aGluIHRoZSBhcnRpZmFjdCAqKlNIT1VMRCoqIGJlIHVzZWQuXG4gKlxuICogSW5zdHJ1bWVudGF0aW9ucyAqKlNIT1VMRCoqIGRvY3VtZW50IHRoZSBsaXN0IG9mIGVycm9ycyB0aGV5IHJlcG9ydC5cbiAqXG4gKiBUaGUgY2FyZGluYWxpdHkgb2YgYGVycm9yLnR5cGVgIHdpdGhpbiBvbmUgaW5zdHJ1bWVudGF0aW9uIGxpYnJhcnkgKipTSE9VTEQqKiBiZSBsb3cuXG4gKiBUZWxlbWV0cnkgY29uc3VtZXJzIHRoYXQgYWdncmVnYXRlIGRhdGEgZnJvbSBtdWx0aXBsZSBpbnN0cnVtZW50YXRpb24gbGlicmFyaWVzIGFuZCBhcHBsaWNhdGlvbnNcbiAqIHNob3VsZCBiZSBwcmVwYXJlZCBmb3IgYGVycm9yLnR5cGVgIHRvIGhhdmUgaGlnaCBjYXJkaW5hbGl0eSBhdCBxdWVyeSB0aW1lIHdoZW4gbm9cbiAqIGFkZGl0aW9uYWwgZmlsdGVycyBhcmUgYXBwbGllZC5cbiAqXG4gKiBJZiB0aGUgb3BlcmF0aW9uIGhhcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LCBpbnN0cnVtZW50YXRpb25zICoqU0hPVUxEIE5PVCoqIHNldCBgZXJyb3IudHlwZWAuXG4gKlxuICogSWYgYSBzcGVjaWZpYyBkb21haW4gZGVmaW5lcyBpdHMgb3duIHNldCBvZiBlcnJvciBpZGVudGlmaWVycyAoc3VjaCBhcyBIVFRQIG9yIGdSUEMgc3RhdHVzIGNvZGVzKSxcbiAqIGl0J3MgKipSRUNPTU1FTkRFRCoqIHRvOlxuICpcbiAqICAgLSBVc2UgYSBkb21haW4tc3BlY2lmaWMgYXR0cmlidXRlXG4gKiAgIC0gU2V0IGBlcnJvci50eXBlYCB0byBjYXB0dXJlIGFsbCBlcnJvcnMsIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGV5IGFyZSBkZWZpbmVkIHdpdGhpbiB0aGUgZG9tYWluLXNwZWNpZmljIHNldCBvciBub3QuXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX0VSUk9SX1RZUEUgPSAnZXJyb3IudHlwZSc7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJfT1RIRVJcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX0VSUk9SX1RZUEV9LlxuICpcbiAqIEEgZmFsbGJhY2sgZXJyb3IgdmFsdWUgdG8gYmUgdXNlZCB3aGVuIHRoZSBpbnN0cnVtZW50YXRpb24gZG9lc24ndCBkZWZpbmUgYSBjdXN0b20gdmFsdWUuXG4gKi9cbmV4cG9ydCBjb25zdCBFUlJPUl9UWVBFX1ZBTFVFX09USEVSID0gXCJfT1RIRVJcIjtcbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgdGhlIGV4Y2VwdGlvbiBpcyBlc2NhcGluZyB0aGUgc2NvcGUgb2YgdGhlIHNwYW4uXG4gKlxuICogQGRlcHJlY2F0ZWQgSXQncyBubyBsb25nZXIgcmVjb21tZW5kZWQgdG8gcmVjb3JkIGV4Y2VwdGlvbnMgdGhhdCBhcmUgaGFuZGxlZCBhbmQgZG8gbm90IGVzY2FwZSB0aGUgc2NvcGUgb2YgYSBzcGFuLlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9FWENFUFRJT05fRVNDQVBFRCA9ICdleGNlcHRpb24uZXNjYXBlZCc7XG4vKipcbiAqIFRoZSBleGNlcHRpb24gbWVzc2FnZS5cbiAqXG4gKiBAZXhhbXBsZSBEaXZpc2lvbiBieSB6ZXJvXG4gKiBAZXhhbXBsZSBDYW4ndCBjb252ZXJ0ICdpbnQnIG9iamVjdCB0byBzdHIgaW1wbGljaXRseVxuICovXG5leHBvcnQgY29uc3QgQVRUUl9FWENFUFRJT05fTUVTU0FHRSA9ICdleGNlcHRpb24ubWVzc2FnZSc7XG4vKipcbiAqIEEgc3RhY2t0cmFjZSBhcyBhIHN0cmluZyBpbiB0aGUgbmF0dXJhbCByZXByZXNlbnRhdGlvbiBmb3IgdGhlIGxhbmd1YWdlIHJ1bnRpbWUuIFRoZSByZXByZXNlbnRhdGlvbiBpcyB0byBiZSBkZXRlcm1pbmVkIGFuZCBkb2N1bWVudGVkIGJ5IGVhY2ggbGFuZ3VhZ2UgU0lHLlxuICpcbiAqIEBleGFtcGxlIFwiRXhjZXB0aW9uIGluIHRocmVhZCBcIm1haW5cIiBqYXZhLmxhbmcuUnVudGltZUV4Y2VwdGlvbjogVGVzdCBleGNlcHRpb25cXFxcbiBhdCBjb20uZXhhbXBsZS5HZW5lcmF0ZVRyYWNlLm1ldGhvZEIoR2VuZXJhdGVUcmFjZS5qYXZhOjEzKVxcXFxuIGF0IGNvbS5leGFtcGxlLkdlbmVyYXRlVHJhY2UubWV0aG9kQShHZW5lcmF0ZVRyYWNlLmphdmE6OSlcXFxcbiBhdCBjb20uZXhhbXBsZS5HZW5lcmF0ZVRyYWNlLm1haW4oR2VuZXJhdGVUcmFjZS5qYXZhOjUpXFxcXG5cIlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9FWENFUFRJT05fU1RBQ0tUUkFDRSA9ICdleGNlcHRpb24uc3RhY2t0cmFjZSc7XG4vKipcbiAqIFRoZSB0eXBlIG9mIHRoZSBleGNlcHRpb24gKGl0cyBmdWxseS1xdWFsaWZpZWQgY2xhc3MgbmFtZSwgaWYgYXBwbGljYWJsZSkuIFRoZSBkeW5hbWljIHR5cGUgb2YgdGhlIGV4Y2VwdGlvbiBzaG91bGQgYmUgcHJlZmVycmVkIG92ZXIgdGhlIHN0YXRpYyB0eXBlIGluIGxhbmd1YWdlcyB0aGF0IHN1cHBvcnQgaXQuXG4gKlxuICogQGV4YW1wbGUgamF2YS5uZXQuQ29ubmVjdEV4Y2VwdGlvblxuICogQGV4YW1wbGUgT1NFcnJvclxuICovXG5leHBvcnQgY29uc3QgQVRUUl9FWENFUFRJT05fVFlQRSA9ICdleGNlcHRpb24udHlwZSc7XG4vKipcbiAqIEhUVFAgcmVxdWVzdCBoZWFkZXJzLCBgPGtleT5gIGJlaW5nIHRoZSBub3JtYWxpemVkIEhUVFAgSGVhZGVyIG5hbWUgKGxvd2VyY2FzZSksIHRoZSB2YWx1ZSBiZWluZyB0aGUgaGVhZGVyIHZhbHVlcy5cbiAqXG4gKiBAZXhhbXBsZSBbXCJhcHBsaWNhdGlvbi9qc29uXCJdXG4gKiBAZXhhbXBsZSBbXCIxLjIuMy40XCIsIFwiMS4yLjMuNVwiXVxuICpcbiAqIEBub3RlIEluc3RydW1lbnRhdGlvbnMgKipTSE9VTEQqKiByZXF1aXJlIGFuIGV4cGxpY2l0IGNvbmZpZ3VyYXRpb24gb2Ygd2hpY2ggaGVhZGVycyBhcmUgdG8gYmUgY2FwdHVyZWQuXG4gKiBJbmNsdWRpbmcgYWxsIHJlcXVlc3QgaGVhZGVycyBjYW4gYmUgYSBzZWN1cml0eSByaXNrIC0gZXhwbGljaXQgY29uZmlndXJhdGlvbiBoZWxwcyBhdm9pZCBsZWFraW5nIHNlbnNpdGl2ZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBUaGUgYFVzZXItQWdlbnRgIGhlYWRlciBpcyBhbHJlYWR5IGNhcHR1cmVkIGluIHRoZSBgdXNlcl9hZ2VudC5vcmlnaW5hbGAgYXR0cmlidXRlLlxuICogVXNlcnMgKipNQVkqKiBleHBsaWNpdGx5IGNvbmZpZ3VyZSBpbnN0cnVtZW50YXRpb25zIHRvIGNhcHR1cmUgdGhlbSBldmVuIHRob3VnaCBpdCBpcyBub3QgcmVjb21tZW5kZWQuXG4gKlxuICogVGhlIGF0dHJpYnV0ZSB2YWx1ZSAqKk1VU1QqKiBjb25zaXN0IG9mIGVpdGhlciBtdWx0aXBsZSBoZWFkZXIgdmFsdWVzIGFzIGFuIGFycmF5IG9mIHN0cmluZ3NcbiAqIG9yIGEgc2luZ2xlLWl0ZW0gYXJyYXkgY29udGFpbmluZyBhIHBvc3NpYmx5IGNvbW1hLWNvbmNhdGVuYXRlZCBzdHJpbmcsIGRlcGVuZGluZyBvbiB0aGUgd2F5XG4gKiB0aGUgSFRUUCBsaWJyYXJ5IHByb3ZpZGVzIGFjY2VzcyB0byBoZWFkZXJzLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgLSBBIGhlYWRlciBgQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uYCAqKlNIT1VMRCoqIGJlIHJlY29yZGVkIGFzIHRoZSBgaHR0cC5yZXF1ZXN0LmhlYWRlci5jb250ZW50LXR5cGVgXG4gKiAgICAgYXR0cmlidXRlIHdpdGggdmFsdWUgYFtcImFwcGxpY2F0aW9uL2pzb25cIl1gLlxuICogICAtIEEgaGVhZGVyIGBYLUZvcndhcmRlZC1Gb3I6IDEuMi4zLjQsIDEuMi4zLjVgICoqU0hPVUxEKiogYmUgcmVjb3JkZWQgYXMgdGhlIGBodHRwLnJlcXVlc3QuaGVhZGVyLngtZm9yd2FyZGVkLWZvcmBcbiAqICAgICBhdHRyaWJ1dGUgd2l0aCB2YWx1ZSBgW1wiMS4yLjMuNFwiLCBcIjEuMi4zLjVcIl1gIG9yIGBbXCIxLjIuMy40LCAxLjIuMy41XCJdYCBkZXBlbmRpbmcgb24gdGhlIEhUVFAgbGlicmFyeS5cbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfSFRUUF9SRVFVRVNUX0hFQURFUiA9IChrZXkpID0+IGBodHRwLnJlcXVlc3QuaGVhZGVyLiR7a2V5fWA7XG4vKipcbiAqIEhUVFAgcmVxdWVzdCBtZXRob2QuXG4gKlxuICogQGV4YW1wbGUgR0VUXG4gKiBAZXhhbXBsZSBQT1NUXG4gKiBAZXhhbXBsZSBIRUFEXG4gKlxuICogQG5vdGUgSFRUUCByZXF1ZXN0IG1ldGhvZCB2YWx1ZSAqKlNIT1VMRCoqIGJlIFwia25vd25cIiB0byB0aGUgaW5zdHJ1bWVudGF0aW9uLlxuICogQnkgZGVmYXVsdCwgdGhpcyBjb252ZW50aW9uIGRlZmluZXMgXCJrbm93blwiIG1ldGhvZHMgYXMgdGhlIG9uZXMgbGlzdGVkIGluIFtSRkM5MTEwXShodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjOTExMC5odG1sI25hbWUtbWV0aG9kcylcbiAqIGFuZCB0aGUgUEFUQ0ggbWV0aG9kIGRlZmluZWQgaW4gW1JGQzU3ODldKGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM1Nzg5Lmh0bWwpLlxuICpcbiAqIElmIHRoZSBIVFRQIHJlcXVlc3QgbWV0aG9kIGlzIG5vdCBrbm93biB0byBpbnN0cnVtZW50YXRpb24sIGl0ICoqTVVTVCoqIHNldCB0aGUgYGh0dHAucmVxdWVzdC5tZXRob2RgIGF0dHJpYnV0ZSB0byBgX09USEVSYC5cbiAqXG4gKiBJZiB0aGUgSFRUUCBpbnN0cnVtZW50YXRpb24gY291bGQgZW5kIHVwIGNvbnZlcnRpbmcgdmFsaWQgSFRUUCByZXF1ZXN0IG1ldGhvZHMgdG8gYF9PVEhFUmAsIHRoZW4gaXQgKipNVVNUKiogcHJvdmlkZSBhIHdheSB0byBvdmVycmlkZVxuICogdGhlIGxpc3Qgb2Yga25vd24gSFRUUCBtZXRob2RzLiBJZiB0aGlzIG92ZXJyaWRlIGlzIGRvbmUgdmlhIGVudmlyb25tZW50IHZhcmlhYmxlLCB0aGVuIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSAqKk1VU1QqKiBiZSBuYW1lZFxuICogT1RFTF9JTlNUUlVNRU5UQVRJT05fSFRUUF9LTk9XTl9NRVRIT0RTIGFuZCBzdXBwb3J0IGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgY2FzZS1zZW5zaXRpdmUga25vd24gSFRUUCBtZXRob2RzXG4gKiAodGhpcyBsaXN0ICoqTVVTVCoqIGJlIGEgZnVsbCBvdmVycmlkZSBvZiB0aGUgZGVmYXVsdCBrbm93biBtZXRob2QsIGl0IGlzIG5vdCBhIGxpc3Qgb2Yga25vd24gbWV0aG9kcyBpbiBhZGRpdGlvbiB0byB0aGUgZGVmYXVsdHMpLlxuICpcbiAqIEhUVFAgbWV0aG9kIG5hbWVzIGFyZSBjYXNlLXNlbnNpdGl2ZSBhbmQgYGh0dHAucmVxdWVzdC5tZXRob2RgIGF0dHJpYnV0ZSB2YWx1ZSAqKk1VU1QqKiBtYXRjaCBhIGtub3duIEhUVFAgbWV0aG9kIG5hbWUgZXhhY3RseS5cbiAqIEluc3RydW1lbnRhdGlvbnMgZm9yIHNwZWNpZmljIHdlYiBmcmFtZXdvcmtzIHRoYXQgY29uc2lkZXIgSFRUUCBtZXRob2RzIHRvIGJlIGNhc2UgaW5zZW5zaXRpdmUsICoqU0hPVUxEKiogcG9wdWxhdGUgYSBjYW5vbmljYWwgZXF1aXZhbGVudC5cbiAqIFRyYWNpbmcgaW5zdHJ1bWVudGF0aW9ucyB0aGF0IGRvIHNvLCAqKk1VU1QqKiBhbHNvIHNldCBgaHR0cC5yZXF1ZXN0Lm1ldGhvZF9vcmlnaW5hbGAgdG8gdGhlIG9yaWdpbmFsIHZhbHVlLlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9IVFRQX1JFUVVFU1RfTUVUSE9EID0gJ2h0dHAucmVxdWVzdC5tZXRob2QnO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwiX09USEVSXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9IVFRQX1JFUVVFU1RfTUVUSE9EfS5cbiAqXG4gKiBBbnkgSFRUUCBtZXRob2QgdGhhdCB0aGUgaW5zdHJ1bWVudGF0aW9uIGhhcyBubyBwcmlvciBrbm93bGVkZ2Ugb2YuXG4gKi9cbmV4cG9ydCBjb25zdCBIVFRQX1JFUVVFU1RfTUVUSE9EX1ZBTFVFX09USEVSID0gXCJfT1RIRVJcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcIkNPTk5FQ1RcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX0hUVFBfUkVRVUVTVF9NRVRIT0R9LlxuICpcbiAqIENPTk5FQ1QgbWV0aG9kLlxuICovXG5leHBvcnQgY29uc3QgSFRUUF9SRVFVRVNUX01FVEhPRF9WQUxVRV9DT05ORUNUID0gXCJDT05ORUNUXCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJERUxFVEVcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX0hUVFBfUkVRVUVTVF9NRVRIT0R9LlxuICpcbiAqIERFTEVURSBtZXRob2QuXG4gKi9cbmV4cG9ydCBjb25zdCBIVFRQX1JFUVVFU1RfTUVUSE9EX1ZBTFVFX0RFTEVURSA9IFwiREVMRVRFXCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJHRVRcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX0hUVFBfUkVRVUVTVF9NRVRIT0R9LlxuICpcbiAqIEdFVCBtZXRob2QuXG4gKi9cbmV4cG9ydCBjb25zdCBIVFRQX1JFUVVFU1RfTUVUSE9EX1ZBTFVFX0dFVCA9IFwiR0VUXCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJIRUFEXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9IVFRQX1JFUVVFU1RfTUVUSE9EfS5cbiAqXG4gKiBIRUFEIG1ldGhvZC5cbiAqL1xuZXhwb3J0IGNvbnN0IEhUVFBfUkVRVUVTVF9NRVRIT0RfVkFMVUVfSEVBRCA9IFwiSEVBRFwiO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwiT1BUSU9OU1wiIGZvciBhdHRyaWJ1dGUge0BsaW5rIEFUVFJfSFRUUF9SRVFVRVNUX01FVEhPRH0uXG4gKlxuICogT1BUSU9OUyBtZXRob2QuXG4gKi9cbmV4cG9ydCBjb25zdCBIVFRQX1JFUVVFU1RfTUVUSE9EX1ZBTFVFX09QVElPTlMgPSBcIk9QVElPTlNcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcIlBBVENIXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9IVFRQX1JFUVVFU1RfTUVUSE9EfS5cbiAqXG4gKiBQQVRDSCBtZXRob2QuXG4gKi9cbmV4cG9ydCBjb25zdCBIVFRQX1JFUVVFU1RfTUVUSE9EX1ZBTFVFX1BBVENIID0gXCJQQVRDSFwiO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwiUE9TVFwiIGZvciBhdHRyaWJ1dGUge0BsaW5rIEFUVFJfSFRUUF9SRVFVRVNUX01FVEhPRH0uXG4gKlxuICogUE9TVCBtZXRob2QuXG4gKi9cbmV4cG9ydCBjb25zdCBIVFRQX1JFUVVFU1RfTUVUSE9EX1ZBTFVFX1BPU1QgPSBcIlBPU1RcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcIlBVVFwiIGZvciBhdHRyaWJ1dGUge0BsaW5rIEFUVFJfSFRUUF9SRVFVRVNUX01FVEhPRH0uXG4gKlxuICogUFVUIG1ldGhvZC5cbiAqL1xuZXhwb3J0IGNvbnN0IEhUVFBfUkVRVUVTVF9NRVRIT0RfVkFMVUVfUFVUID0gXCJQVVRcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcIlRSQUNFXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9IVFRQX1JFUVVFU1RfTUVUSE9EfS5cbiAqXG4gKiBUUkFDRSBtZXRob2QuXG4gKi9cbmV4cG9ydCBjb25zdCBIVFRQX1JFUVVFU1RfTUVUSE9EX1ZBTFVFX1RSQUNFID0gXCJUUkFDRVwiO1xuLyoqXG4gKiBPcmlnaW5hbCBIVFRQIG1ldGhvZCBzZW50IGJ5IHRoZSBjbGllbnQgaW4gdGhlIHJlcXVlc3QgbGluZS5cbiAqXG4gKiBAZXhhbXBsZSBHZVRcbiAqIEBleGFtcGxlIEFDTFxuICogQGV4YW1wbGUgZm9vXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX0hUVFBfUkVRVUVTVF9NRVRIT0RfT1JJR0lOQUwgPSAnaHR0cC5yZXF1ZXN0Lm1ldGhvZF9vcmlnaW5hbCc7XG4vKipcbiAqIFRoZSBvcmRpbmFsIG51bWJlciBvZiByZXF1ZXN0IHJlc2VuZGluZyBhdHRlbXB0IChmb3IgYW55IHJlYXNvbiwgaW5jbHVkaW5nIHJlZGlyZWN0cykuXG4gKlxuICogQGV4YW1wbGUgM1xuICpcbiAqIEBub3RlIFRoZSByZXNlbmQgY291bnQgKipTSE9VTEQqKiBiZSB1cGRhdGVkIGVhY2ggdGltZSBhbiBIVFRQIHJlcXVlc3QgZ2V0cyByZXNlbnQgYnkgdGhlIGNsaWVudCwgcmVnYXJkbGVzcyBvZiB3aGF0IHdhcyB0aGUgY2F1c2Ugb2YgdGhlIHJlc2VuZGluZyAoZS5nLiByZWRpcmVjdGlvbiwgYXV0aG9yaXphdGlvbiBmYWlsdXJlLCA1MDMgU2VydmVyIFVuYXZhaWxhYmxlLCBuZXR3b3JrIGlzc3Vlcywgb3IgYW55IG90aGVyKS5cbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfSFRUUF9SRVFVRVNUX1JFU0VORF9DT1VOVCA9ICdodHRwLnJlcXVlc3QucmVzZW5kX2NvdW50Jztcbi8qKlxuICogSFRUUCByZXNwb25zZSBoZWFkZXJzLCBgPGtleT5gIGJlaW5nIHRoZSBub3JtYWxpemVkIEhUVFAgSGVhZGVyIG5hbWUgKGxvd2VyY2FzZSksIHRoZSB2YWx1ZSBiZWluZyB0aGUgaGVhZGVyIHZhbHVlcy5cbiAqXG4gKiBAZXhhbXBsZSBbXCJhcHBsaWNhdGlvbi9qc29uXCJdXG4gKiBAZXhhbXBsZSBbXCJhYmNcIiwgXCJkZWZcIl1cbiAqXG4gKiBAbm90ZSBJbnN0cnVtZW50YXRpb25zICoqU0hPVUxEKiogcmVxdWlyZSBhbiBleHBsaWNpdCBjb25maWd1cmF0aW9uIG9mIHdoaWNoIGhlYWRlcnMgYXJlIHRvIGJlIGNhcHR1cmVkLlxuICogSW5jbHVkaW5nIGFsbCByZXNwb25zZSBoZWFkZXJzIGNhbiBiZSBhIHNlY3VyaXR5IHJpc2sgLSBleHBsaWNpdCBjb25maWd1cmF0aW9uIGhlbHBzIGF2b2lkIGxlYWtpbmcgc2Vuc2l0aXZlIGluZm9ybWF0aW9uLlxuICpcbiAqIFVzZXJzICoqTUFZKiogZXhwbGljaXRseSBjb25maWd1cmUgaW5zdHJ1bWVudGF0aW9ucyB0byBjYXB0dXJlIHRoZW0gZXZlbiB0aG91Z2ggaXQgaXMgbm90IHJlY29tbWVuZGVkLlxuICpcbiAqIFRoZSBhdHRyaWJ1dGUgdmFsdWUgKipNVVNUKiogY29uc2lzdCBvZiBlaXRoZXIgbXVsdGlwbGUgaGVhZGVyIHZhbHVlcyBhcyBhbiBhcnJheSBvZiBzdHJpbmdzXG4gKiBvciBhIHNpbmdsZS1pdGVtIGFycmF5IGNvbnRhaW5pbmcgYSBwb3NzaWJseSBjb21tYS1jb25jYXRlbmF0ZWQgc3RyaW5nLCBkZXBlbmRpbmcgb24gdGhlIHdheVxuICogdGhlIEhUVFAgbGlicmFyeSBwcm92aWRlcyBhY2Nlc3MgdG8gaGVhZGVycy5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgIC0gQSBoZWFkZXIgYENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbmAgaGVhZGVyICoqU0hPVUxEKiogYmUgcmVjb3JkZWQgYXMgdGhlIGBodHRwLnJlcXVlc3QucmVzcG9uc2UuY29udGVudC10eXBlYFxuICogICAgIGF0dHJpYnV0ZSB3aXRoIHZhbHVlIGBbXCJhcHBsaWNhdGlvbi9qc29uXCJdYC5cbiAqICAgLSBBIGhlYWRlciBgTXktY3VzdG9tLWhlYWRlcjogYWJjLCBkZWZgIGhlYWRlciAqKlNIT1VMRCoqIGJlIHJlY29yZGVkIGFzIHRoZSBgaHR0cC5yZXNwb25zZS5oZWFkZXIubXktY3VzdG9tLWhlYWRlcmBcbiAqICAgICBhdHRyaWJ1dGUgd2l0aCB2YWx1ZSBgW1wiYWJjXCIsIFwiZGVmXCJdYCBvciBgW1wiYWJjLCBkZWZcIl1gIGRlcGVuZGluZyBvbiB0aGUgSFRUUCBsaWJyYXJ5LlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9IVFRQX1JFU1BPTlNFX0hFQURFUiA9IChrZXkpID0+IGBodHRwLnJlc3BvbnNlLmhlYWRlci4ke2tleX1gO1xuLyoqXG4gKiBbSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZV0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzEjc2VjdGlvbi02KS5cbiAqXG4gKiBAZXhhbXBsZSAyMDBcbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfSFRUUF9SRVNQT05TRV9TVEFUVVNfQ09ERSA9ICdodHRwLnJlc3BvbnNlLnN0YXR1c19jb2RlJztcbi8qKlxuICogVGhlIG1hdGNoZWQgcm91dGUsIHRoYXQgaXMsIHRoZSBwYXRoIHRlbXBsYXRlIGluIHRoZSBmb3JtYXQgdXNlZCBieSB0aGUgcmVzcGVjdGl2ZSBzZXJ2ZXIgZnJhbWV3b3JrLlxuICpcbiAqIEBleGFtcGxlIC91c2Vycy86dXNlcklEP1xuICogQGV4YW1wbGUge2NvbnRyb2xsZXJ9L3thY3Rpb259L3tpZD99XG4gKlxuICogQG5vdGUgKipNVVNUIE5PVCoqIGJlIHBvcHVsYXRlZCB3aGVuIHRoaXMgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgSFRUUCBzZXJ2ZXIgZnJhbWV3b3JrIGFzIHRoZSByb3V0ZSBhdHRyaWJ1dGUgc2hvdWxkIGhhdmUgbG93LWNhcmRpbmFsaXR5IGFuZCB0aGUgVVJJIHBhdGggY2FuIE5PVCBzdWJzdGl0dXRlIGl0LlxuICogKipTSE9VTEQqKiBpbmNsdWRlIHRoZSBbYXBwbGljYXRpb24gcm9vdF0oL2RvY3MvaHR0cC9odHRwLXNwYW5zLm1kI2h0dHAtc2VydmVyLWRlZmluaXRpb25zKSBpZiB0aGVyZSBpcyBvbmUuXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX0hUVFBfUk9VVEUgPSAnaHR0cC5yb3V0ZSc7XG4vKipcbiAqIE5hbWUgb2YgdGhlIGdhcmJhZ2UgY29sbGVjdG9yIGFjdGlvbi5cbiAqXG4gKiBAZXhhbXBsZSBlbmQgb2YgbWlub3IgR0NcbiAqIEBleGFtcGxlIGVuZCBvZiBtYWpvciBHQ1xuICpcbiAqIEBub3RlIEdhcmJhZ2UgY29sbGVjdG9yIGFjdGlvbiBpcyBnZW5lcmFsbHkgb2J0YWluZWQgdmlhIFtHYXJiYWdlQ29sbGVjdGlvbk5vdGlmaWNhdGlvbkluZm8jZ2V0R2NBY3Rpb24oKV0oaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamRrLm1hbmFnZW1lbnQvY29tL3N1bi9tYW5hZ2VtZW50L0dhcmJhZ2VDb2xsZWN0aW9uTm90aWZpY2F0aW9uSW5mby5odG1sI2dldEdjQWN0aW9uKCkpLlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9KVk1fR0NfQUNUSU9OID0gJ2p2bS5nYy5hY3Rpb24nO1xuLyoqXG4gKiBOYW1lIG9mIHRoZSBnYXJiYWdlIGNvbGxlY3Rvci5cbiAqXG4gKiBAZXhhbXBsZSBHMSBZb3VuZyBHZW5lcmF0aW9uXG4gKiBAZXhhbXBsZSBHMSBPbGQgR2VuZXJhdGlvblxuICpcbiAqIEBub3RlIEdhcmJhZ2UgY29sbGVjdG9yIG5hbWUgaXMgZ2VuZXJhbGx5IG9idGFpbmVkIHZpYSBbR2FyYmFnZUNvbGxlY3Rpb25Ob3RpZmljYXRpb25JbmZvI2dldEdjTmFtZSgpXShodHRwczovL2RvY3Mub3JhY2xlLmNvbS9lbi9qYXZhL2phdmFzZS8xMS9kb2NzL2FwaS9qZGsubWFuYWdlbWVudC9jb20vc3VuL21hbmFnZW1lbnQvR2FyYmFnZUNvbGxlY3Rpb25Ob3RpZmljYXRpb25JbmZvLmh0bWwjZ2V0R2NOYW1lKCkpLlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9KVk1fR0NfTkFNRSA9ICdqdm0uZ2MubmFtZSc7XG4vKipcbiAqIE5hbWUgb2YgdGhlIG1lbW9yeSBwb29sLlxuICpcbiAqIEBleGFtcGxlIEcxIE9sZCBHZW5cbiAqIEBleGFtcGxlIEcxIEVkZW4gc3BhY2VcbiAqIEBleGFtcGxlIEcxIFN1cnZpdm9yIFNwYWNlXG4gKlxuICogQG5vdGUgUG9vbCBuYW1lcyBhcmUgZ2VuZXJhbGx5IG9idGFpbmVkIHZpYSBbTWVtb3J5UG9vbE1YQmVhbiNnZXROYW1lKCldKGh0dHBzOi8vZG9jcy5vcmFjbGUuY29tL2VuL2phdmEvamF2YXNlLzExL2RvY3MvYXBpL2phdmEubWFuYWdlbWVudC9qYXZhL2xhbmcvbWFuYWdlbWVudC9NZW1vcnlQb29sTVhCZWFuLmh0bWwjZ2V0TmFtZSgpKS5cbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfSlZNX01FTU9SWV9QT09MX05BTUUgPSAnanZtLm1lbW9yeS5wb29sLm5hbWUnO1xuLyoqXG4gKiBUaGUgdHlwZSBvZiBtZW1vcnkuXG4gKlxuICogQGV4YW1wbGUgaGVhcFxuICogQGV4YW1wbGUgbm9uX2hlYXBcbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfSlZNX01FTU9SWV9UWVBFID0gJ2p2bS5tZW1vcnkudHlwZSc7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJoZWFwXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9KVk1fTUVNT1JZX1RZUEV9LlxuICpcbiAqIEhlYXAgbWVtb3J5LlxuICovXG5leHBvcnQgY29uc3QgSlZNX01FTU9SWV9UWVBFX1ZBTFVFX0hFQVAgPSBcImhlYXBcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcIm5vbl9oZWFwXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9KVk1fTUVNT1JZX1RZUEV9LlxuICpcbiAqIE5vbi1oZWFwIG1lbW9yeVxuICovXG5leHBvcnQgY29uc3QgSlZNX01FTU9SWV9UWVBFX1ZBTFVFX05PTl9IRUFQID0gXCJub25faGVhcFwiO1xuLyoqXG4gKiBXaGV0aGVyIHRoZSB0aHJlYWQgaXMgZGFlbW9uIG9yIG5vdC5cbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfSlZNX1RIUkVBRF9EQUVNT04gPSAnanZtLnRocmVhZC5kYWVtb24nO1xuLyoqXG4gKiBTdGF0ZSBvZiB0aGUgdGhyZWFkLlxuICpcbiAqIEBleGFtcGxlIHJ1bm5hYmxlXG4gKiBAZXhhbXBsZSBibG9ja2VkXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX0pWTV9USFJFQURfU1RBVEUgPSAnanZtLnRocmVhZC5zdGF0ZSc7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJibG9ja2VkXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9KVk1fVEhSRUFEX1NUQVRFfS5cbiAqXG4gKiBBIHRocmVhZCB0aGF0IGlzIGJsb2NrZWQgd2FpdGluZyBmb3IgYSBtb25pdG9yIGxvY2sgaXMgaW4gdGhpcyBzdGF0ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEpWTV9USFJFQURfU1RBVEVfVkFMVUVfQkxPQ0tFRCA9IFwiYmxvY2tlZFwiO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwibmV3XCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9KVk1fVEhSRUFEX1NUQVRFfS5cbiAqXG4gKiBBIHRocmVhZCB0aGF0IGhhcyBub3QgeWV0IHN0YXJ0ZWQgaXMgaW4gdGhpcyBzdGF0ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEpWTV9USFJFQURfU1RBVEVfVkFMVUVfTkVXID0gXCJuZXdcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcInJ1bm5hYmxlXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9KVk1fVEhSRUFEX1NUQVRFfS5cbiAqXG4gKiBBIHRocmVhZCBleGVjdXRpbmcgaW4gdGhlIEphdmEgdmlydHVhbCBtYWNoaW5lIGlzIGluIHRoaXMgc3RhdGUuXG4gKi9cbmV4cG9ydCBjb25zdCBKVk1fVEhSRUFEX1NUQVRFX1ZBTFVFX1JVTk5BQkxFID0gXCJydW5uYWJsZVwiO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwidGVybWluYXRlZFwiIGZvciBhdHRyaWJ1dGUge0BsaW5rIEFUVFJfSlZNX1RIUkVBRF9TVEFURX0uXG4gKlxuICogQSB0aHJlYWQgdGhhdCBoYXMgZXhpdGVkIGlzIGluIHRoaXMgc3RhdGUuXG4gKi9cbmV4cG9ydCBjb25zdCBKVk1fVEhSRUFEX1NUQVRFX1ZBTFVFX1RFUk1JTkFURUQgPSBcInRlcm1pbmF0ZWRcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcInRpbWVkX3dhaXRpbmdcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX0pWTV9USFJFQURfU1RBVEV9LlxuICpcbiAqIEEgdGhyZWFkIHRoYXQgaXMgd2FpdGluZyBmb3IgYW5vdGhlciB0aHJlYWQgdG8gcGVyZm9ybSBhbiBhY3Rpb24gZm9yIHVwIHRvIGEgc3BlY2lmaWVkIHdhaXRpbmcgdGltZSBpcyBpbiB0aGlzIHN0YXRlLlxuICovXG5leHBvcnQgY29uc3QgSlZNX1RIUkVBRF9TVEFURV9WQUxVRV9USU1FRF9XQUlUSU5HID0gXCJ0aW1lZF93YWl0aW5nXCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJ3YWl0aW5nXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9KVk1fVEhSRUFEX1NUQVRFfS5cbiAqXG4gKiBBIHRocmVhZCB0aGF0IGlzIHdhaXRpbmcgaW5kZWZpbml0ZWx5IGZvciBhbm90aGVyIHRocmVhZCB0byBwZXJmb3JtIGEgcGFydGljdWxhciBhY3Rpb24gaXMgaW4gdGhpcyBzdGF0ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEpWTV9USFJFQURfU1RBVEVfVkFMVUVfV0FJVElORyA9IFwid2FpdGluZ1wiO1xuLyoqXG4gKiBMb2NhbCBhZGRyZXNzIG9mIHRoZSBuZXR3b3JrIGNvbm5lY3Rpb24gLSBJUCBhZGRyZXNzIG9yIFVuaXggZG9tYWluIHNvY2tldCBuYW1lLlxuICpcbiAqIEBleGFtcGxlIDEwLjEuMi44MFxuICogQGV4YW1wbGUgL3RtcC9teS5zb2NrXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX05FVFdPUktfTE9DQUxfQUREUkVTUyA9ICduZXR3b3JrLmxvY2FsLmFkZHJlc3MnO1xuLyoqXG4gKiBMb2NhbCBwb3J0IG51bWJlciBvZiB0aGUgbmV0d29yayBjb25uZWN0aW9uLlxuICpcbiAqIEBleGFtcGxlIDY1MTIzXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX05FVFdPUktfTE9DQUxfUE9SVCA9ICduZXR3b3JrLmxvY2FsLnBvcnQnO1xuLyoqXG4gKiBQZWVyIGFkZHJlc3Mgb2YgdGhlIG5ldHdvcmsgY29ubmVjdGlvbiAtIElQIGFkZHJlc3Mgb3IgVW5peCBkb21haW4gc29ja2V0IG5hbWUuXG4gKlxuICogQGV4YW1wbGUgMTAuMS4yLjgwXG4gKiBAZXhhbXBsZSAvdG1wL215LnNvY2tcbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfTkVUV09SS19QRUVSX0FERFJFU1MgPSAnbmV0d29yay5wZWVyLmFkZHJlc3MnO1xuLyoqXG4gKiBQZWVyIHBvcnQgbnVtYmVyIG9mIHRoZSBuZXR3b3JrIGNvbm5lY3Rpb24uXG4gKlxuICogQGV4YW1wbGUgNjUxMjNcbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfTkVUV09SS19QRUVSX1BPUlQgPSAnbmV0d29yay5wZWVyLnBvcnQnO1xuLyoqXG4gKiBbT1NJIGFwcGxpY2F0aW9uIGxheWVyXShodHRwczovL3dpa2lwZWRpYS5vcmcvd2lraS9BcHBsaWNhdGlvbl9sYXllcikgb3Igbm9uLU9TSSBlcXVpdmFsZW50LlxuICpcbiAqIEBleGFtcGxlIGFtcXBcbiAqIEBleGFtcGxlIGh0dHBcbiAqIEBleGFtcGxlIG1xdHRcbiAqXG4gKiBAbm90ZSBUaGUgdmFsdWUgKipTSE9VTEQqKiBiZSBub3JtYWxpemVkIHRvIGxvd2VyY2FzZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfTkVUV09SS19QUk9UT0NPTF9OQU1FID0gJ25ldHdvcmsucHJvdG9jb2wubmFtZSc7XG4vKipcbiAqIFRoZSBhY3R1YWwgdmVyc2lvbiBvZiB0aGUgcHJvdG9jb2wgdXNlZCBmb3IgbmV0d29yayBjb21tdW5pY2F0aW9uLlxuICpcbiAqIEBleGFtcGxlIDEuMVxuICogQGV4YW1wbGUgMlxuICpcbiAqIEBub3RlIElmIHByb3RvY29sIHZlcnNpb24gaXMgc3ViamVjdCB0byBuZWdvdGlhdGlvbiAoZm9yIGV4YW1wbGUgdXNpbmcgW0FMUE5dKGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM3MzAxLmh0bWwpKSwgdGhpcyBhdHRyaWJ1dGUgKipTSE9VTEQqKiBiZSBzZXQgdG8gdGhlIG5lZ290aWF0ZWQgdmVyc2lvbi4gSWYgdGhlIGFjdHVhbCBwcm90b2NvbCB2ZXJzaW9uIGlzIG5vdCBrbm93biwgdGhpcyBhdHRyaWJ1dGUgKipTSE9VTEQgTk9UKiogYmUgc2V0LlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9ORVRXT1JLX1BST1RPQ09MX1ZFUlNJT04gPSAnbmV0d29yay5wcm90b2NvbC52ZXJzaW9uJztcbi8qKlxuICogW09TSSB0cmFuc3BvcnQgbGF5ZXJdKGh0dHBzOi8vd2lraXBlZGlhLm9yZy93aWtpL1RyYW5zcG9ydF9sYXllcikgb3IgW2ludGVyLXByb2Nlc3MgY29tbXVuaWNhdGlvbiBtZXRob2RdKGh0dHBzOi8vd2lraXBlZGlhLm9yZy93aWtpL0ludGVyLXByb2Nlc3NfY29tbXVuaWNhdGlvbikuXG4gKlxuICogQGV4YW1wbGUgdGNwXG4gKiBAZXhhbXBsZSB1ZHBcbiAqXG4gKiBAbm90ZSBUaGUgdmFsdWUgKipTSE9VTEQqKiBiZSBub3JtYWxpemVkIHRvIGxvd2VyY2FzZS5cbiAqXG4gKiBDb25zaWRlciBhbHdheXMgc2V0dGluZyB0aGUgdHJhbnNwb3J0IHdoZW4gc2V0dGluZyBhIHBvcnQgbnVtYmVyLCBzaW5jZVxuICogYSBwb3J0IG51bWJlciBpcyBhbWJpZ3VvdXMgd2l0aG91dCBrbm93aW5nIHRoZSB0cmFuc3BvcnQuIEZvciBleGFtcGxlXG4gKiBkaWZmZXJlbnQgcHJvY2Vzc2VzIGNvdWxkIGJlIGxpc3RlbmluZyBvbiBUQ1AgcG9ydCAxMjM0NSBhbmQgVURQIHBvcnQgMTIzNDUuXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX05FVFdPUktfVFJBTlNQT1JUID0gJ25ldHdvcmsudHJhbnNwb3J0Jztcbi8qKlxuICogRW51bSB2YWx1ZSBcInBpcGVcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX05FVFdPUktfVFJBTlNQT1JUfS5cbiAqXG4gKiBOYW1lZCBvciBhbm9ueW1vdXMgcGlwZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE5FVFdPUktfVFJBTlNQT1JUX1ZBTFVFX1BJUEUgPSBcInBpcGVcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcInF1aWNcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX05FVFdPUktfVFJBTlNQT1JUfS5cbiAqXG4gKiBRVUlDXG4gKi9cbmV4cG9ydCBjb25zdCBORVRXT1JLX1RSQU5TUE9SVF9WQUxVRV9RVUlDID0gXCJxdWljXCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJ0Y3BcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX05FVFdPUktfVFJBTlNQT1JUfS5cbiAqXG4gKiBUQ1BcbiAqL1xuZXhwb3J0IGNvbnN0IE5FVFdPUktfVFJBTlNQT1JUX1ZBTFVFX1RDUCA9IFwidGNwXCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJ1ZHBcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX05FVFdPUktfVFJBTlNQT1JUfS5cbiAqXG4gKiBVRFBcbiAqL1xuZXhwb3J0IGNvbnN0IE5FVFdPUktfVFJBTlNQT1JUX1ZBTFVFX1VEUCA9IFwidWRwXCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJ1bml4XCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9ORVRXT1JLX1RSQU5TUE9SVH0uXG4gKlxuICogVW5peCBkb21haW4gc29ja2V0XG4gKi9cbmV4cG9ydCBjb25zdCBORVRXT1JLX1RSQU5TUE9SVF9WQUxVRV9VTklYID0gXCJ1bml4XCI7XG4vKipcbiAqIFtPU0kgbmV0d29yayBsYXllcl0oaHR0cHM6Ly93aWtpcGVkaWEub3JnL3dpa2kvTmV0d29ya19sYXllcikgb3Igbm9uLU9TSSBlcXVpdmFsZW50LlxuICpcbiAqIEBleGFtcGxlIGlwdjRcbiAqIEBleGFtcGxlIGlwdjZcbiAqXG4gKiBAbm90ZSBUaGUgdmFsdWUgKipTSE9VTEQqKiBiZSBub3JtYWxpemVkIHRvIGxvd2VyY2FzZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfTkVUV09SS19UWVBFID0gJ25ldHdvcmsudHlwZSc7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJpcHY0XCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9ORVRXT1JLX1RZUEV9LlxuICpcbiAqIElQdjRcbiAqL1xuZXhwb3J0IGNvbnN0IE5FVFdPUktfVFlQRV9WQUxVRV9JUFY0ID0gXCJpcHY0XCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJpcHY2XCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9ORVRXT1JLX1RZUEV9LlxuICpcbiAqIElQdjZcbiAqL1xuZXhwb3J0IGNvbnN0IE5FVFdPUktfVFlQRV9WQUxVRV9JUFY2ID0gXCJpcHY2XCI7XG4vKipcbiAqIFRoZSBuYW1lIG9mIHRoZSBpbnN0cnVtZW50YXRpb24gc2NvcGUgLSAoYEluc3RydW1lbnRhdGlvblNjb3BlLk5hbWVgIGluIE9UTFApLlxuICpcbiAqIEBleGFtcGxlIGlvLm9wZW50ZWxlbWV0cnkuY29udHJpYi5tb25nb2RiXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX09URUxfU0NPUEVfTkFNRSA9ICdvdGVsLnNjb3BlLm5hbWUnO1xuLyoqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgaW5zdHJ1bWVudGF0aW9uIHNjb3BlIC0gKGBJbnN0cnVtZW50YXRpb25TY29wZS5WZXJzaW9uYCBpbiBPVExQKS5cbiAqXG4gKiBAZXhhbXBsZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgQVRUUl9PVEVMX1NDT1BFX1ZFUlNJT04gPSAnb3RlbC5zY29wZS52ZXJzaW9uJztcbi8qKlxuICogTmFtZSBvZiB0aGUgY29kZSwgZWl0aGVyIFwiT0tcIiBvciBcIkVSUk9SXCIuICoqTVVTVCBOT1QqKiBiZSBzZXQgaWYgdGhlIHN0YXR1cyBjb2RlIGlzIFVOU0VULlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9PVEVMX1NUQVRVU19DT0RFID0gJ290ZWwuc3RhdHVzX2NvZGUnO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwiRVJST1JcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX09URUxfU1RBVFVTX0NPREV9LlxuICpcbiAqIFRoZSBvcGVyYXRpb24gY29udGFpbnMgYW4gZXJyb3IuXG4gKi9cbmV4cG9ydCBjb25zdCBPVEVMX1NUQVRVU19DT0RFX1ZBTFVFX0VSUk9SID0gXCJFUlJPUlwiO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwiT0tcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX09URUxfU1RBVFVTX0NPREV9LlxuICpcbiAqIFRoZSBvcGVyYXRpb24gaGFzIGJlZW4gdmFsaWRhdGVkIGJ5IGFuIEFwcGxpY2F0aW9uIGRldmVsb3BlciBvciBPcGVyYXRvciB0byBoYXZlIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuXG4gKi9cbmV4cG9ydCBjb25zdCBPVEVMX1NUQVRVU19DT0RFX1ZBTFVFX09LID0gXCJPS1wiO1xuLyoqXG4gKiBEZXNjcmlwdGlvbiBvZiB0aGUgU3RhdHVzIGlmIGl0IGhhcyBhIHZhbHVlLCBvdGhlcndpc2Ugbm90IHNldC5cbiAqXG4gKiBAZXhhbXBsZSByZXNvdXJjZSBub3QgZm91bmRcbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfT1RFTF9TVEFUVVNfREVTQ1JJUFRJT04gPSAnb3RlbC5zdGF0dXNfZGVzY3JpcHRpb24nO1xuLyoqXG4gKiBTZXJ2ZXIgZG9tYWluIG5hbWUgaWYgYXZhaWxhYmxlIHdpdGhvdXQgcmV2ZXJzZSBETlMgbG9va3VwOyBvdGhlcndpc2UsIElQIGFkZHJlc3Mgb3IgVW5peCBkb21haW4gc29ja2V0IG5hbWUuXG4gKlxuICogQGV4YW1wbGUgZXhhbXBsZS5jb21cbiAqIEBleGFtcGxlIDEwLjEuMi44MFxuICogQGV4YW1wbGUgL3RtcC9teS5zb2NrXG4gKlxuICogQG5vdGUgV2hlbiBvYnNlcnZlZCBmcm9tIHRoZSBjbGllbnQgc2lkZSwgYW5kIHdoZW4gY29tbXVuaWNhdGluZyB0aHJvdWdoIGFuIGludGVybWVkaWFyeSwgYHNlcnZlci5hZGRyZXNzYCAqKlNIT1VMRCoqIHJlcHJlc2VudCB0aGUgc2VydmVyIGFkZHJlc3MgYmVoaW5kIGFueSBpbnRlcm1lZGlhcmllcywgZm9yIGV4YW1wbGUgcHJveGllcywgaWYgaXQncyBhdmFpbGFibGUuXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX1NFUlZFUl9BRERSRVNTID0gJ3NlcnZlci5hZGRyZXNzJztcbi8qKlxuICogU2VydmVyIHBvcnQgbnVtYmVyLlxuICpcbiAqIEBleGFtcGxlIDgwXG4gKiBAZXhhbXBsZSA4MDgwXG4gKiBAZXhhbXBsZSA0NDNcbiAqXG4gKiBAbm90ZSBXaGVuIG9ic2VydmVkIGZyb20gdGhlIGNsaWVudCBzaWRlLCBhbmQgd2hlbiBjb21tdW5pY2F0aW5nIHRocm91Z2ggYW4gaW50ZXJtZWRpYXJ5LCBgc2VydmVyLnBvcnRgICoqU0hPVUxEKiogcmVwcmVzZW50IHRoZSBzZXJ2ZXIgcG9ydCBiZWhpbmQgYW55IGludGVybWVkaWFyaWVzLCBmb3IgZXhhbXBsZSBwcm94aWVzLCBpZiBpdCdzIGF2YWlsYWJsZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfU0VSVkVSX1BPUlQgPSAnc2VydmVyLnBvcnQnO1xuLyoqXG4gKiBMb2dpY2FsIG5hbWUgb2YgdGhlIHNlcnZpY2UuXG4gKlxuICogQGV4YW1wbGUgc2hvcHBpbmdjYXJ0XG4gKlxuICogQG5vdGUgKipNVVNUKiogYmUgdGhlIHNhbWUgZm9yIGFsbCBpbnN0YW5jZXMgb2YgaG9yaXpvbnRhbGx5IHNjYWxlZCBzZXJ2aWNlcy4gSWYgdGhlIHZhbHVlIHdhcyBub3Qgc3BlY2lmaWVkLCBTREtzICoqTVVTVCoqIGZhbGxiYWNrIHRvIGB1bmtub3duX3NlcnZpY2U6YCBjb25jYXRlbmF0ZWQgd2l0aCBbYHByb2Nlc3MuZXhlY3V0YWJsZS5uYW1lYF0ocHJvY2Vzcy5tZCksIGUuZy4gYHVua25vd25fc2VydmljZTpiYXNoYC4gSWYgYHByb2Nlc3MuZXhlY3V0YWJsZS5uYW1lYCBpcyBub3QgYXZhaWxhYmxlLCB0aGUgdmFsdWUgKipNVVNUKiogYmUgc2V0IHRvIGB1bmtub3duX3NlcnZpY2VgLlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9TRVJWSUNFX05BTUUgPSAnc2VydmljZS5uYW1lJztcbi8qKlxuICogVGhlIHZlcnNpb24gc3RyaW5nIG9mIHRoZSBzZXJ2aWNlIEFQSSBvciBpbXBsZW1lbnRhdGlvbi4gVGhlIGZvcm1hdCBpcyBub3QgZGVmaW5lZCBieSB0aGVzZSBjb252ZW50aW9ucy5cbiAqXG4gKiBAZXhhbXBsZSAyLjAuMFxuICogQGV4YW1wbGUgYTAxZGJlZjhhXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX1NFUlZJQ0VfVkVSU0lPTiA9ICdzZXJ2aWNlLnZlcnNpb24nO1xuLyoqXG4gKiBTaWduYWxSIEhUVFAgY29ubmVjdGlvbiBjbG9zdXJlIHN0YXR1cy5cbiAqXG4gKiBAZXhhbXBsZSBhcHBfc2h1dGRvd25cbiAqIEBleGFtcGxlIHRpbWVvdXRcbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfU0lHTkFMUl9DT05ORUNUSU9OX1NUQVRVUyA9ICdzaWduYWxyLmNvbm5lY3Rpb24uc3RhdHVzJztcbi8qKlxuICogRW51bSB2YWx1ZSBcImFwcF9zaHV0ZG93blwiIGZvciBhdHRyaWJ1dGUge0BsaW5rIEFUVFJfU0lHTkFMUl9DT05ORUNUSU9OX1NUQVRVU30uXG4gKlxuICogVGhlIGNvbm5lY3Rpb24gd2FzIGNsb3NlZCBiZWNhdXNlIHRoZSBhcHAgaXMgc2h1dHRpbmcgZG93bi5cbiAqL1xuZXhwb3J0IGNvbnN0IFNJR05BTFJfQ09OTkVDVElPTl9TVEFUVVNfVkFMVUVfQVBQX1NIVVRET1dOID0gXCJhcHBfc2h1dGRvd25cIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcIm5vcm1hbF9jbG9zdXJlXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9TSUdOQUxSX0NPTk5FQ1RJT05fU1RBVFVTfS5cbiAqXG4gKiBUaGUgY29ubmVjdGlvbiB3YXMgY2xvc2VkIG5vcm1hbGx5LlxuICovXG5leHBvcnQgY29uc3QgU0lHTkFMUl9DT05ORUNUSU9OX1NUQVRVU19WQUxVRV9OT1JNQUxfQ0xPU1VSRSA9IFwibm9ybWFsX2Nsb3N1cmVcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcInRpbWVvdXRcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX1NJR05BTFJfQ09OTkVDVElPTl9TVEFUVVN9LlxuICpcbiAqIFRoZSBjb25uZWN0aW9uIHdhcyBjbG9zZWQgZHVlIHRvIGEgdGltZW91dC5cbiAqL1xuZXhwb3J0IGNvbnN0IFNJR05BTFJfQ09OTkVDVElPTl9TVEFUVVNfVkFMVUVfVElNRU9VVCA9IFwidGltZW91dFwiO1xuLyoqXG4gKiBbU2lnbmFsUiB0cmFuc3BvcnQgdHlwZV0oaHR0cHM6Ly9naXRodWIuY29tL2RvdG5ldC9hc3BuZXRjb3JlL2Jsb2IvbWFpbi9zcmMvU2lnbmFsUi9kb2NzL3NwZWNzL1RyYW5zcG9ydFByb3RvY29scy5tZClcbiAqXG4gKiBAZXhhbXBsZSB3ZWJfc29ja2V0c1xuICogQGV4YW1wbGUgbG9uZ19wb2xsaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX1NJR05BTFJfVFJBTlNQT1JUID0gJ3NpZ25hbHIudHJhbnNwb3J0Jztcbi8qKlxuICogRW51bSB2YWx1ZSBcImxvbmdfcG9sbGluZ1wiIGZvciBhdHRyaWJ1dGUge0BsaW5rIEFUVFJfU0lHTkFMUl9UUkFOU1BPUlR9LlxuICpcbiAqIExvbmdQb2xsaW5nIHByb3RvY29sXG4gKi9cbmV4cG9ydCBjb25zdCBTSUdOQUxSX1RSQU5TUE9SVF9WQUxVRV9MT05HX1BPTExJTkcgPSBcImxvbmdfcG9sbGluZ1wiO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwic2VydmVyX3NlbnRfZXZlbnRzXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9TSUdOQUxSX1RSQU5TUE9SVH0uXG4gKlxuICogU2VydmVyU2VudEV2ZW50cyBwcm90b2NvbFxuICovXG5leHBvcnQgY29uc3QgU0lHTkFMUl9UUkFOU1BPUlRfVkFMVUVfU0VSVkVSX1NFTlRfRVZFTlRTID0gXCJzZXJ2ZXJfc2VudF9ldmVudHNcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcIndlYl9zb2NrZXRzXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9TSUdOQUxSX1RSQU5TUE9SVH0uXG4gKlxuICogV2ViU29ja2V0cyBwcm90b2NvbFxuICovXG5leHBvcnQgY29uc3QgU0lHTkFMUl9UUkFOU1BPUlRfVkFMVUVfV0VCX1NPQ0tFVFMgPSBcIndlYl9zb2NrZXRzXCI7XG4vKipcbiAqIFRoZSBsYW5ndWFnZSBvZiB0aGUgdGVsZW1ldHJ5IFNESy5cbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfVEVMRU1FVFJZX1NES19MQU5HVUFHRSA9ICd0ZWxlbWV0cnkuc2RrLmxhbmd1YWdlJztcbi8qKlxuICogRW51bSB2YWx1ZSBcImNwcFwiIGZvciBhdHRyaWJ1dGUge0BsaW5rIEFUVFJfVEVMRU1FVFJZX1NES19MQU5HVUFHRX0uXG4gKi9cbmV4cG9ydCBjb25zdCBURUxFTUVUUllfU0RLX0xBTkdVQUdFX1ZBTFVFX0NQUCA9IFwiY3BwXCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJkb3RuZXRcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX1RFTEVNRVRSWV9TREtfTEFOR1VBR0V9LlxuICovXG5leHBvcnQgY29uc3QgVEVMRU1FVFJZX1NES19MQU5HVUFHRV9WQUxVRV9ET1RORVQgPSBcImRvdG5ldFwiO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwiZXJsYW5nXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9URUxFTUVUUllfU0RLX0xBTkdVQUdFfS5cbiAqL1xuZXhwb3J0IGNvbnN0IFRFTEVNRVRSWV9TREtfTEFOR1VBR0VfVkFMVUVfRVJMQU5HID0gXCJlcmxhbmdcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcImdvXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9URUxFTUVUUllfU0RLX0xBTkdVQUdFfS5cbiAqL1xuZXhwb3J0IGNvbnN0IFRFTEVNRVRSWV9TREtfTEFOR1VBR0VfVkFMVUVfR08gPSBcImdvXCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJqYXZhXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9URUxFTUVUUllfU0RLX0xBTkdVQUdFfS5cbiAqL1xuZXhwb3J0IGNvbnN0IFRFTEVNRVRSWV9TREtfTEFOR1VBR0VfVkFMVUVfSkFWQSA9IFwiamF2YVwiO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwibm9kZWpzXCIgZm9yIGF0dHJpYnV0ZSB7QGxpbmsgQVRUUl9URUxFTUVUUllfU0RLX0xBTkdVQUdFfS5cbiAqL1xuZXhwb3J0IGNvbnN0IFRFTEVNRVRSWV9TREtfTEFOR1VBR0VfVkFMVUVfTk9ERUpTID0gXCJub2RlanNcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcInBocFwiIGZvciBhdHRyaWJ1dGUge0BsaW5rIEFUVFJfVEVMRU1FVFJZX1NES19MQU5HVUFHRX0uXG4gKi9cbmV4cG9ydCBjb25zdCBURUxFTUVUUllfU0RLX0xBTkdVQUdFX1ZBTFVFX1BIUCA9IFwicGhwXCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJweXRob25cIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX1RFTEVNRVRSWV9TREtfTEFOR1VBR0V9LlxuICovXG5leHBvcnQgY29uc3QgVEVMRU1FVFJZX1NES19MQU5HVUFHRV9WQUxVRV9QWVRIT04gPSBcInB5dGhvblwiO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwicnVieVwiIGZvciBhdHRyaWJ1dGUge0BsaW5rIEFUVFJfVEVMRU1FVFJZX1NES19MQU5HVUFHRX0uXG4gKi9cbmV4cG9ydCBjb25zdCBURUxFTUVUUllfU0RLX0xBTkdVQUdFX1ZBTFVFX1JVQlkgPSBcInJ1YnlcIjtcbi8qKlxuICogRW51bSB2YWx1ZSBcInJ1c3RcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX1RFTEVNRVRSWV9TREtfTEFOR1VBR0V9LlxuICovXG5leHBvcnQgY29uc3QgVEVMRU1FVFJZX1NES19MQU5HVUFHRV9WQUxVRV9SVVNUID0gXCJydXN0XCI7XG4vKipcbiAqIEVudW0gdmFsdWUgXCJzd2lmdFwiIGZvciBhdHRyaWJ1dGUge0BsaW5rIEFUVFJfVEVMRU1FVFJZX1NES19MQU5HVUFHRX0uXG4gKi9cbmV4cG9ydCBjb25zdCBURUxFTUVUUllfU0RLX0xBTkdVQUdFX1ZBTFVFX1NXSUZUID0gXCJzd2lmdFwiO1xuLyoqXG4gKiBFbnVtIHZhbHVlIFwid2VianNcIiBmb3IgYXR0cmlidXRlIHtAbGluayBBVFRSX1RFTEVNRVRSWV9TREtfTEFOR1VBR0V9LlxuICovXG5leHBvcnQgY29uc3QgVEVMRU1FVFJZX1NES19MQU5HVUFHRV9WQUxVRV9XRUJKUyA9IFwid2VianNcIjtcbi8qKlxuICogVGhlIG5hbWUgb2YgdGhlIHRlbGVtZXRyeSBTREsgYXMgZGVmaW5lZCBhYm92ZS5cbiAqXG4gKiBAZXhhbXBsZSBvcGVudGVsZW1ldHJ5XG4gKlxuICogQG5vdGUgVGhlIE9wZW5UZWxlbWV0cnkgU0RLICoqTVVTVCoqIHNldCB0aGUgYHRlbGVtZXRyeS5zZGsubmFtZWAgYXR0cmlidXRlIHRvIGBvcGVudGVsZW1ldHJ5YC5cbiAqIElmIGFub3RoZXIgU0RLLCBsaWtlIGEgZm9yayBvciBhIHZlbmRvci1wcm92aWRlZCBpbXBsZW1lbnRhdGlvbiwgaXMgdXNlZCwgdGhpcyBTREsgKipNVVNUKiogc2V0IHRoZVxuICogYHRlbGVtZXRyeS5zZGsubmFtZWAgYXR0cmlidXRlIHRvIHRoZSBmdWxseS1xdWFsaWZpZWQgY2xhc3Mgb3IgbW9kdWxlIG5hbWUgb2YgdGhpcyBTREsncyBtYWluIGVudHJ5IHBvaW50XG4gKiBvciBhbm90aGVyIHN1aXRhYmxlIGlkZW50aWZpZXIgZGVwZW5kaW5nIG9uIHRoZSBsYW5ndWFnZS5cbiAqIFRoZSBpZGVudGlmaWVyIGBvcGVudGVsZW1ldHJ5YCBpcyByZXNlcnZlZCBhbmQgKipNVVNUIE5PVCoqIGJlIHVzZWQgaW4gdGhpcyBjYXNlLlxuICogQWxsIGN1c3RvbSBpZGVudGlmaWVycyAqKlNIT1VMRCoqIGJlIHN0YWJsZSBhY3Jvc3MgZGlmZmVyZW50IHZlcnNpb25zIG9mIGFuIGltcGxlbWVudGF0aW9uLlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9URUxFTUVUUllfU0RLX05BTUUgPSAndGVsZW1ldHJ5LnNkay5uYW1lJztcbi8qKlxuICogVGhlIHZlcnNpb24gc3RyaW5nIG9mIHRoZSB0ZWxlbWV0cnkgU0RLLlxuICpcbiAqIEBleGFtcGxlIDEuMi4zXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX1RFTEVNRVRSWV9TREtfVkVSU0lPTiA9ICd0ZWxlbWV0cnkuc2RrLnZlcnNpb24nO1xuLyoqXG4gKiBUaGUgW1VSSSBmcmFnbWVudF0oaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzM5ODYjc2VjdGlvbi0zLjUpIGNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlIFNlbUNvbnZcbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfVVJMX0ZSQUdNRU5UID0gJ3VybC5mcmFnbWVudCc7XG4vKipcbiAqIEFic29sdXRlIFVSTCBkZXNjcmliaW5nIGEgbmV0d29yayByZXNvdXJjZSBhY2NvcmRpbmcgdG8gW1JGQzM5ODZdKGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmMzOTg2KVxuICpcbiAqIEBleGFtcGxlIGh0dHBzOi8vd3d3LmZvby5iYXIvc2VhcmNoP3E9T3BlblRlbGVtZXRyeSNTZW1Db252XG4gKiBAZXhhbXBsZSAvL2xvY2FsaG9zdFxuICpcbiAqIEBub3RlIEZvciBuZXR3b3JrIGNhbGxzLCBVUkwgdXN1YWxseSBoYXMgYHNjaGVtZTovL2hvc3RbOnBvcnRdW3BhdGhdWz9xdWVyeV1bI2ZyYWdtZW50XWAgZm9ybWF0LCB3aGVyZSB0aGUgZnJhZ21lbnRcbiAqIGlzIG5vdCB0cmFuc21pdHRlZCBvdmVyIEhUVFAsIGJ1dCBpZiBpdCBpcyBrbm93biwgaXQgKipTSE9VTEQqKiBiZSBpbmNsdWRlZCBuZXZlcnRoZWxlc3MuXG4gKlxuICogYHVybC5mdWxsYCAqKk1VU1QgTk9UKiogY29udGFpbiBjcmVkZW50aWFscyBwYXNzZWQgdmlhIFVSTCBpbiBmb3JtIG9mIGBodHRwczovL3VzZXJuYW1lOnBhc3N3b3JkQHd3dy5leGFtcGxlLmNvbS9gLlxuICogSW4gc3VjaCBjYXNlIHVzZXJuYW1lIGFuZCBwYXNzd29yZCAqKlNIT1VMRCoqIGJlIHJlZGFjdGVkIGFuZCBhdHRyaWJ1dGUncyB2YWx1ZSAqKlNIT1VMRCoqIGJlIGBodHRwczovL1JFREFDVEVEOlJFREFDVEVEQHd3dy5leGFtcGxlLmNvbS9gLlxuICpcbiAqIGB1cmwuZnVsbGAgKipTSE9VTEQqKiBjYXB0dXJlIHRoZSBhYnNvbHV0ZSBVUkwgd2hlbiBpdCBpcyBhdmFpbGFibGUgKG9yIGNhbiBiZSByZWNvbnN0cnVjdGVkKS5cbiAqXG4gKiBTZW5zaXRpdmUgY29udGVudCBwcm92aWRlZCBpbiBgdXJsLmZ1bGxgICoqU0hPVUxEKiogYmUgc2NydWJiZWQgd2hlbiBpbnN0cnVtZW50YXRpb25zIGNhbiBpZGVudGlmeSBpdC5cbiAqXG4gKlxuICogUXVlcnkgc3RyaW5nIHZhbHVlcyBmb3IgdGhlIGZvbGxvd2luZyBrZXlzICoqU0hPVUxEKiogYmUgcmVkYWN0ZWQgYnkgZGVmYXVsdCBhbmQgcmVwbGFjZWQgYnkgdGhlXG4gKiB2YWx1ZSBgUkVEQUNURURgOlxuICpcbiAqICAgLSBbYEFXU0FjY2Vzc0tleUlkYF0oaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FtYXpvblMzL2xhdGVzdC91c2VyZ3VpZGUvUkVTVEF1dGhlbnRpY2F0aW9uLmh0bWwjUkVTVEF1dGhlbnRpY2F0aW9uUXVlcnlTdHJpbmdBdXRoKVxuICogICAtIFtgU2lnbmF0dXJlYF0oaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FtYXpvblMzL2xhdGVzdC91c2VyZ3VpZGUvUkVTVEF1dGhlbnRpY2F0aW9uLmh0bWwjUkVTVEF1dGhlbnRpY2F0aW9uUXVlcnlTdHJpbmdBdXRoKVxuICogICAtIFtgc2lnYF0oaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2F6dXJlL3N0b3JhZ2UvY29tbW9uL3N0b3JhZ2Utc2FzLW92ZXJ2aWV3I3Nhcy10b2tlbilcbiAqICAgLSBbYFgtR29vZy1TaWduYXR1cmVgXShodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vc3RvcmFnZS9kb2NzL2FjY2Vzcy1jb250cm9sL3NpZ25lZC11cmxzKVxuICpcbiAqIFRoaXMgbGlzdCBpcyBzdWJqZWN0IHRvIGNoYW5nZSBvdmVyIHRpbWUuXG4gKlxuICogV2hlbiBhIHF1ZXJ5IHN0cmluZyB2YWx1ZSBpcyByZWRhY3RlZCwgdGhlIHF1ZXJ5IHN0cmluZyBrZXkgKipTSE9VTEQqKiBzdGlsbCBiZSBwcmVzZXJ2ZWQsIGUuZy5cbiAqIGBodHRwczovL3d3dy5leGFtcGxlLmNvbS9wYXRoP2NvbG9yPWJsdWUmc2lnPVJFREFDVEVEYC5cbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfVVJMX0ZVTEwgPSAndXJsLmZ1bGwnO1xuLyoqXG4gKiBUaGUgW1VSSSBwYXRoXShodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjMzk4NiNzZWN0aW9uLTMuMykgY29tcG9uZW50XG4gKlxuICogQGV4YW1wbGUgL3NlYXJjaFxuICpcbiAqIEBub3RlIFNlbnNpdGl2ZSBjb250ZW50IHByb3ZpZGVkIGluIGB1cmwucGF0aGAgKipTSE9VTEQqKiBiZSBzY3J1YmJlZCB3aGVuIGluc3RydW1lbnRhdGlvbnMgY2FuIGlkZW50aWZ5IGl0LlxuICovXG5leHBvcnQgY29uc3QgQVRUUl9VUkxfUEFUSCA9ICd1cmwucGF0aCc7XG4vKipcbiAqIFRoZSBbVVJJIHF1ZXJ5XShodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjMzk4NiNzZWN0aW9uLTMuNCkgY29tcG9uZW50XG4gKlxuICogQGV4YW1wbGUgcT1PcGVuVGVsZW1ldHJ5XG4gKlxuICogQG5vdGUgU2Vuc2l0aXZlIGNvbnRlbnQgcHJvdmlkZWQgaW4gYHVybC5xdWVyeWAgKipTSE9VTEQqKiBiZSBzY3J1YmJlZCB3aGVuIGluc3RydW1lbnRhdGlvbnMgY2FuIGlkZW50aWZ5IGl0LlxuICpcbiAqXG4gKiBRdWVyeSBzdHJpbmcgdmFsdWVzIGZvciB0aGUgZm9sbG93aW5nIGtleXMgKipTSE9VTEQqKiBiZSByZWRhY3RlZCBieSBkZWZhdWx0IGFuZCByZXBsYWNlZCBieSB0aGUgdmFsdWUgYFJFREFDVEVEYDpcbiAqXG4gKiAgIC0gW2BBV1NBY2Nlc3NLZXlJZGBdKGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BbWF6b25TMy9sYXRlc3QvdXNlcmd1aWRlL1JFU1RBdXRoZW50aWNhdGlvbi5odG1sI1JFU1RBdXRoZW50aWNhdGlvblF1ZXJ5U3RyaW5nQXV0aClcbiAqICAgLSBbYFNpZ25hdHVyZWBdKGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BbWF6b25TMy9sYXRlc3QvdXNlcmd1aWRlL1JFU1RBdXRoZW50aWNhdGlvbi5odG1sI1JFU1RBdXRoZW50aWNhdGlvblF1ZXJ5U3RyaW5nQXV0aClcbiAqICAgLSBbYHNpZ2BdKGh0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9henVyZS9zdG9yYWdlL2NvbW1vbi9zdG9yYWdlLXNhcy1vdmVydmlldyNzYXMtdG9rZW4pXG4gKiAgIC0gW2BYLUdvb2ctU2lnbmF0dXJlYF0oaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3N0b3JhZ2UvZG9jcy9hY2Nlc3MtY29udHJvbC9zaWduZWQtdXJscylcbiAqXG4gKiBUaGlzIGxpc3QgaXMgc3ViamVjdCB0byBjaGFuZ2Ugb3ZlciB0aW1lLlxuICpcbiAqIFdoZW4gYSBxdWVyeSBzdHJpbmcgdmFsdWUgaXMgcmVkYWN0ZWQsIHRoZSBxdWVyeSBzdHJpbmcga2V5ICoqU0hPVUxEKiogc3RpbGwgYmUgcHJlc2VydmVkLCBlLmcuXG4gKiBgcT1PcGVuVGVsZW1ldHJ5JnNpZz1SRURBQ1RFRGAuXG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX1VSTF9RVUVSWSA9ICd1cmwucXVlcnknO1xuLyoqXG4gKiBUaGUgW1VSSSBzY2hlbWVdKGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmMzOTg2I3NlY3Rpb24tMy4xKSBjb21wb25lbnQgaWRlbnRpZnlpbmcgdGhlIHVzZWQgcHJvdG9jb2wuXG4gKlxuICogQGV4YW1wbGUgaHR0cHNcbiAqIEBleGFtcGxlIGZ0cFxuICogQGV4YW1wbGUgdGVsbmV0XG4gKi9cbmV4cG9ydCBjb25zdCBBVFRSX1VSTF9TQ0hFTUUgPSAndXJsLnNjaGVtZSc7XG4vKipcbiAqIFZhbHVlIG9mIHRoZSBbSFRUUCBVc2VyLUFnZW50XShodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjOTExMC5odG1sI2ZpZWxkLnVzZXItYWdlbnQpIGhlYWRlciBzZW50IGJ5IHRoZSBjbGllbnQuXG4gKlxuICogQGV4YW1wbGUgQ0VSTi1MaW5lTW9kZS8yLjE1IGxpYnd3dy8yLjE3YjNcbiAqIEBleGFtcGxlIE1vemlsbGEvNS4wIChpUGhvbmU7IENQVSBpUGhvbmUgT1MgMTRfN18xIGxpa2UgTWFjIE9TIFgpIEFwcGxlV2ViS2l0LzYwNS4xLjE1IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi8xNC4xLjIgTW9iaWxlLzE1RTE0OCBTYWZhcmkvNjA0LjFcbiAqIEBleGFtcGxlIFlvdXJBcHAvMS4wLjAgZ3JwYy1qYXZhLW9raHR0cC8xLjI3LjJcbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJfVVNFUl9BR0VOVF9PUklHSU5BTCA9ICd1c2VyX2FnZW50Lm9yaWdpbmFsJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YWJsZV9hdHRyaWJ1dGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js\n");

/***/ })

};
;